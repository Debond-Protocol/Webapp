/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface BankRouterInterface extends utils.Interface {
  contractName: 'BankRouter';
  functions: {
    'getReserves(address,address)': FunctionFragment;
    'swapExactEthForTokens(uint256,address[],address)': FunctionFragment;
    'swapExactTokensForEth(uint256,uint256,address[],address)': FunctionFragment;
    'swapExactTokensForTokens(uint256,uint256,address[],address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'getReserves', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'swapExactEthForTokens', values: [BigNumberish, string[], string]): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForEth',
    values: [BigNumberish, BigNumberish, string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForTokens',
    values: [BigNumberish, BigNumberish, string[], string]
  ): string;

  decodeFunctionResult(functionFragment: 'getReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapExactEthForTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapExactTokensForEth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapExactTokensForTokens', data: BytesLike): Result;

  events: {};
}

export interface BankRouter extends BaseContract {
  contractName: 'BankRouter';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BankRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getReserves(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _reserveA: BigNumber; _reserveB: BigNumber }>;

    swapExactEthForTokens(
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForEth(
      _amountIn: BigNumberish,
      _amountEthMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokens(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getReserves(
    _tokenA: string,
    _tokenB: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { _reserveA: BigNumber; _reserveB: BigNumber }>;

  swapExactEthForTokens(
    _amountOutMin: BigNumberish,
    _path: string[],
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForEth(
    _amountIn: BigNumberish,
    _amountEthMin: BigNumberish,
    _path: string[],
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokens(
    _amountIn: BigNumberish,
    _amountOutMin: BigNumberish,
    _path: string[],
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getReserves(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _reserveA: BigNumber; _reserveB: BigNumber }>;

    swapExactEthForTokens(
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForEth(
      _amountIn: BigNumberish,
      _amountEthMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForTokens(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getReserves(_tokenA: string, _tokenB: string, overrides?: CallOverrides): Promise<BigNumber>;

    swapExactEthForTokens(
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactTokensForEth(
      _amountIn: BigNumberish,
      _amountEthMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactTokensForTokens(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getReserves(_tokenA: string, _tokenB: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapExactEthForTokens(
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForEth(
      _amountIn: BigNumberish,
      _amountEthMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
