/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface APMInterface extends utils.Interface {
  contractName: 'APM';
  functions: {
    'contractIsActive()': FunctionFragment;
    'entriesAfterAddingLiq(uint256,uint256,uint256,uint256)': FunctionFragment;
    'entriesAfterRemovingLiq(uint256,uint256,uint256,uint256)': FunctionFragment;
    'getAmountsOut(uint256,address[])': FunctionFragment;
    'getReserves(address,address)': FunctionFragment;
    'removeLiquidity(address,address,uint256)': FunctionFragment;
    'setBankAddress(address)': FunctionFragment;
    'setIsActive(bool)': FunctionFragment;
    'swap(uint256,uint256,address,address,address)': FunctionFragment;
    'updateWhenAddLiquidity(uint256,uint256,address,address)': FunctionFragment;
    'updateWhenRemoveLiquidity(uint256,address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'contractIsActive', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'entriesAfterAddingLiq',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'entriesAfterRemovingLiq',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'getAmountsOut', values: [BigNumberish, string[]]): string;
  encodeFunctionData(functionFragment: 'getReserves', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'removeLiquidity', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setBankAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setIsActive', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'swap', values: [BigNumberish, BigNumberish, string, string, string]): string;
  encodeFunctionData(
    functionFragment: 'updateWhenAddLiquidity',
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: 'updateWhenRemoveLiquidity', values: [BigNumberish, string]): string;

  decodeFunctionResult(functionFragment: 'contractIsActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'entriesAfterAddingLiq', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'entriesAfterRemovingLiq', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAmountsOut', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBankAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIsActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateWhenAddLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateWhenRemoveLiquidity', data: BytesLike): Result;

  events: {};
}

export interface APM extends BaseContract {
  contractName: 'APM';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: APMInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    contractIsActive(overrides?: CallOverrides): Promise<[boolean]>;

    entriesAfterAddingLiq(
      oldEntries: BigNumberish,
      amount: BigNumberish,
      totalEntriesToken: BigNumberish,
      totalReserveToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { newEntries: BigNumber }>;

    entriesAfterRemovingLiq(
      oldEntries: BigNumberish,
      amount: BigNumberish,
      totalEntriesToken: BigNumberish,
      totalReserveToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { newEntries: BigNumber }>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { reserveA: BigNumber; reserveB: BigNumber }>;

    removeLiquidity(
      _to: string,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBankAddress(
      _bankAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsActive(
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      token0: string,
      token1: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWhenAddLiquidity(
      amountA: BigNumberish,
      amountB: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWhenRemoveLiquidity(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  contractIsActive(overrides?: CallOverrides): Promise<boolean>;

  entriesAfterAddingLiq(
    oldEntries: BigNumberish,
    amount: BigNumberish,
    totalEntriesToken: BigNumberish,
    totalReserveToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  entriesAfterRemovingLiq(
    oldEntries: BigNumberish,
    amount: BigNumberish,
    totalEntriesToken: BigNumberish,
    totalReserveToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountsOut(amountIn: BigNumberish, path: string[], overrides?: CallOverrides): Promise<BigNumber[]>;

  getReserves(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { reserveA: BigNumber; reserveB: BigNumber }>;

  removeLiquidity(
    _to: string,
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBankAddress(
    _bankAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsActive(
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    amount0Out: BigNumberish,
    amount1Out: BigNumberish,
    token0: string,
    token1: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWhenAddLiquidity(
    amountA: BigNumberish,
    amountB: BigNumberish,
    tokenA: string,
    tokenB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWhenRemoveLiquidity(
    amount: BigNumberish,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    contractIsActive(overrides?: CallOverrides): Promise<boolean>;

    entriesAfterAddingLiq(
      oldEntries: BigNumberish,
      amount: BigNumberish,
      totalEntriesToken: BigNumberish,
      totalReserveToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entriesAfterRemovingLiq(
      oldEntries: BigNumberish,
      amount: BigNumberish,
      totalEntriesToken: BigNumberish,
      totalReserveToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(amountIn: BigNumberish, path: string[], overrides?: CallOverrides): Promise<BigNumber[]>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { reserveA: BigNumber; reserveB: BigNumber }>;

    removeLiquidity(_to: string, tokenAddress: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setBankAddress(_bankAddress: string, overrides?: CallOverrides): Promise<void>;

    setIsActive(_isActive: boolean, overrides?: CallOverrides): Promise<void>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      token0: string,
      token1: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWhenAddLiquidity(
      amountA: BigNumberish,
      amountB: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWhenRemoveLiquidity(amount: BigNumberish, token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    contractIsActive(overrides?: CallOverrides): Promise<BigNumber>;

    entriesAfterAddingLiq(
      oldEntries: BigNumberish,
      amount: BigNumberish,
      totalEntriesToken: BigNumberish,
      totalReserveToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entriesAfterRemovingLiq(
      oldEntries: BigNumberish,
      amount: BigNumberish,
      totalEntriesToken: BigNumberish,
      totalReserveToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(amountIn: BigNumberish, path: string[], overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(tokenA: string, tokenB: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      _to: string,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBankAddress(
      _bankAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsActive(_isActive: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      token0: string,
      token1: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWhenAddLiquidity(
      amountA: BigNumberish,
      amountB: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWhenRemoveLiquidity(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    contractIsActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    entriesAfterAddingLiq(
      oldEntries: BigNumberish,
      amount: BigNumberish,
      totalEntriesToken: BigNumberish,
      totalReserveToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entriesAfterRemovingLiq(
      oldEntries: BigNumberish,
      amount: BigNumberish,
      totalEntriesToken: BigNumberish,
      totalReserveToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(amountIn: BigNumberish, path: string[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserves(tokenA: string, tokenB: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      _to: string,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBankAddress(
      _bankAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsActive(
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      token0: string,
      token1: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWhenAddLiquidity(
      amountA: BigNumberish,
      amountB: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWhenRemoveLiquidity(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
