/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface DebondMathInterface extends utils.Interface {
  contractName: 'DebondMath';
  functions: {
    'calculateInterestRate(uint256,uint256)': FunctionFragment;
    'div(uint256,uint256)': FunctionFragment;
    'estimateInterestEarned(uint256,uint256,uint256)': FunctionFragment;
    'fixedInterestRate(uint256,uint256,uint256)': FunctionFragment;
    'floatingETA(uint256,uint256,uint256,uint256,uint256,uint256)': FunctionFragment;
    'floatingInterestRate(uint256,uint256,uint256)': FunctionFragment;
    'inCrisis(uint256,uint256,uint256)': FunctionFragment;
    'inv(uint256)': FunctionFragment;
    'lastMonthAverageLiquidityFlow(uint256,uint256)': FunctionFragment;
    'log2(uint256)': FunctionFragment;
    'mul(uint256,uint256)': FunctionFragment;
    'pow(uint256,uint256)': FunctionFragment;
    'sigmoid(uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'calculateInterestRate', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'div', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'estimateInterestEarned',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'fixedInterestRate', values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'floatingETA',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'floatingInterestRate',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'inCrisis', values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'inv', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'lastMonthAverageLiquidityFlow', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'log2', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'mul', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'pow', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'sigmoid', values: [BigNumberish, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'calculateInterestRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'div', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'estimateInterestEarned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fixedInterestRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'floatingETA', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'floatingInterestRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inCrisis', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inv', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastMonthAverageLiquidityFlow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'log2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mul', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sigmoid', data: BytesLike): Result;

  events: {};
}

export interface DebondMath extends BaseContract {
  contractName: 'DebondMath';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DebondMathInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateInterestRate(
      _duration: BigNumberish,
      _interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { interest: BigNumber }>;

    div(x: BigNumberish, y: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { result: BigNumber }>;

    estimateInterestEarned(
      _amount: BigNumberish,
      _duration: BigNumberish,
      _interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { interest: BigNumber }>;

    fixedInterestRate(
      _fixRateBond: BigNumberish,
      _floatingRateBond: BigNumberish,
      _benchmarkIR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fixedRate: BigNumber }>;

    floatingETA(
      _maturityTime: BigNumberish,
      _sumOfLiquidityFlow: BigNumberish,
      _benchmarkIR: BigNumberish,
      _sumOfLiquidityOfLastNonce: BigNumberish,
      _nonceDuration: BigNumberish,
      _lastMonthLiquidityFlow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { redemptionTime: BigNumber }>;

    floatingInterestRate(
      _fixRateBond: BigNumberish,
      _floatingRateBond: BigNumberish,
      _benchmarkIR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { floatingRate: BigNumber }>;

    inCrisis(
      _sumOfLiquidityFlow: BigNumberish,
      _benchmarkIR: BigNumberish,
      _sumOfLiquidityOfLastNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { crisis: boolean }>;

    inv(x: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { result: BigNumber }>;

    lastMonthAverageLiquidityFlow(
      _sumOfLiquidityFlow: BigNumberish,
      _benchmarkIR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { averageFlow: BigNumber }>;

    log2(x: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { result: BigNumber }>;

    mul(x: BigNumberish, y: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { result: BigNumber }>;

    pow(x: BigNumberish, y: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { result: BigNumber }>;

    sigmoid(
      _x: BigNumberish,
      _c: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;
  };

  calculateInterestRate(
    _duration: BigNumberish,
    _interestRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  div(x: BigNumberish, y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  estimateInterestEarned(
    _amount: BigNumberish,
    _duration: BigNumberish,
    _interestRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fixedInterestRate(
    _fixRateBond: BigNumberish,
    _floatingRateBond: BigNumberish,
    _benchmarkIR: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  floatingETA(
    _maturityTime: BigNumberish,
    _sumOfLiquidityFlow: BigNumberish,
    _benchmarkIR: BigNumberish,
    _sumOfLiquidityOfLastNonce: BigNumberish,
    _nonceDuration: BigNumberish,
    _lastMonthLiquidityFlow: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  floatingInterestRate(
    _fixRateBond: BigNumberish,
    _floatingRateBond: BigNumberish,
    _benchmarkIR: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  inCrisis(
    _sumOfLiquidityFlow: BigNumberish,
    _benchmarkIR: BigNumberish,
    _sumOfLiquidityOfLastNonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  inv(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  lastMonthAverageLiquidityFlow(
    _sumOfLiquidityFlow: BigNumberish,
    _benchmarkIR: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  log2(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  mul(x: BigNumberish, y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  pow(x: BigNumberish, y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  sigmoid(_x: BigNumberish, _c: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    calculateInterestRate(
      _duration: BigNumberish,
      _interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    div(x: BigNumberish, y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    estimateInterestEarned(
      _amount: BigNumberish,
      _duration: BigNumberish,
      _interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixedInterestRate(
      _fixRateBond: BigNumberish,
      _floatingRateBond: BigNumberish,
      _benchmarkIR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    floatingETA(
      _maturityTime: BigNumberish,
      _sumOfLiquidityFlow: BigNumberish,
      _benchmarkIR: BigNumberish,
      _sumOfLiquidityOfLastNonce: BigNumberish,
      _nonceDuration: BigNumberish,
      _lastMonthLiquidityFlow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    floatingInterestRate(
      _fixRateBond: BigNumberish,
      _floatingRateBond: BigNumberish,
      _benchmarkIR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inCrisis(
      _sumOfLiquidityFlow: BigNumberish,
      _benchmarkIR: BigNumberish,
      _sumOfLiquidityOfLastNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    inv(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    lastMonthAverageLiquidityFlow(
      _sumOfLiquidityFlow: BigNumberish,
      _benchmarkIR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    log2(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    mul(x: BigNumberish, y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pow(x: BigNumberish, y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    sigmoid(_x: BigNumberish, _c: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    calculateInterestRate(
      _duration: BigNumberish,
      _interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    div(x: BigNumberish, y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    estimateInterestEarned(
      _amount: BigNumberish,
      _duration: BigNumberish,
      _interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixedInterestRate(
      _fixRateBond: BigNumberish,
      _floatingRateBond: BigNumberish,
      _benchmarkIR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    floatingETA(
      _maturityTime: BigNumberish,
      _sumOfLiquidityFlow: BigNumberish,
      _benchmarkIR: BigNumberish,
      _sumOfLiquidityOfLastNonce: BigNumberish,
      _nonceDuration: BigNumberish,
      _lastMonthLiquidityFlow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    floatingInterestRate(
      _fixRateBond: BigNumberish,
      _floatingRateBond: BigNumberish,
      _benchmarkIR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inCrisis(
      _sumOfLiquidityFlow: BigNumberish,
      _benchmarkIR: BigNumberish,
      _sumOfLiquidityOfLastNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inv(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    lastMonthAverageLiquidityFlow(
      _sumOfLiquidityFlow: BigNumberish,
      _benchmarkIR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    log2(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    mul(x: BigNumberish, y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pow(x: BigNumberish, y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    sigmoid(_x: BigNumberish, _c: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateInterestRate(
      _duration: BigNumberish,
      _interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    div(x: BigNumberish, y: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateInterestEarned(
      _amount: BigNumberish,
      _duration: BigNumberish,
      _interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fixedInterestRate(
      _fixRateBond: BigNumberish,
      _floatingRateBond: BigNumberish,
      _benchmarkIR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    floatingETA(
      _maturityTime: BigNumberish,
      _sumOfLiquidityFlow: BigNumberish,
      _benchmarkIR: BigNumberish,
      _sumOfLiquidityOfLastNonce: BigNumberish,
      _nonceDuration: BigNumberish,
      _lastMonthLiquidityFlow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    floatingInterestRate(
      _fixRateBond: BigNumberish,
      _floatingRateBond: BigNumberish,
      _benchmarkIR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inCrisis(
      _sumOfLiquidityFlow: BigNumberish,
      _benchmarkIR: BigNumberish,
      _sumOfLiquidityOfLastNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inv(x: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastMonthAverageLiquidityFlow(
      _sumOfLiquidityFlow: BigNumberish,
      _benchmarkIR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    log2(x: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mul(x: BigNumberish, y: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pow(x: BigNumberish, y: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sigmoid(_x: BigNumberish, _c: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
