/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IDataInterface extends utils.Interface {
  contractName: "IData";
  functions: {
    "addClass(uint256,string,uint8,address,uint256)": FunctionFragment;
    "getClassFromId(uint256)": FunctionFragment;
    "getLastNonceCreated(uint256)": FunctionFragment;
    "isPairAllowed(address,address)": FunctionFragment;
    "updateLastNonce(uint256,uint256,uint256)": FunctionFragment;
    "updateTokenAllowed(address,address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addClass",
    values: [BigNumberish, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClassFromId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastNonceCreated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPairAllowed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLastNonce",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenAllowed",
    values: [string, string, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "addClass", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClassFromId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastNonceCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPairAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLastNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenAllowed",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IData extends BaseContract {
  contractName: "IData";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addClass(
      classId: BigNumberish,
      symbol: string,
      interestRateType: BigNumberish,
      tokenAddress: string,
      periodTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getClassFromId(
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, BigNumber] & {
        symbol: string;
        interestRateType: number;
        tokenAddress: string;
        periodTimestamp: BigNumber;
      }
    >;

    getLastNonceCreated(
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nonceId: BigNumber; createdAt: BigNumber }
    >;

    isPairAllowed(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateLastNonce(
      classId: BigNumberish,
      nonceId: BigNumberish,
      createdAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTokenAllowed(
      tokenA: string,
      tokenB: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addClass(
    classId: BigNumberish,
    symbol: string,
    interestRateType: BigNumberish,
    tokenAddress: string,
    periodTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getClassFromId(
    classId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, string, BigNumber] & {
      symbol: string;
      interestRateType: number;
      tokenAddress: string;
      periodTimestamp: BigNumber;
    }
  >;

  getLastNonceCreated(
    classId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nonceId: BigNumber; createdAt: BigNumber }
  >;

  isPairAllowed(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateLastNonce(
    classId: BigNumberish,
    nonceId: BigNumberish,
    createdAt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTokenAllowed(
    tokenA: string,
    tokenB: string,
    allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addClass(
      classId: BigNumberish,
      symbol: string,
      interestRateType: BigNumberish,
      tokenAddress: string,
      periodTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getClassFromId(
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, BigNumber] & {
        symbol: string;
        interestRateType: number;
        tokenAddress: string;
        periodTimestamp: BigNumber;
      }
    >;

    getLastNonceCreated(
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nonceId: BigNumber; createdAt: BigNumber }
    >;

    isPairAllowed(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateLastNonce(
      classId: BigNumberish,
      nonceId: BigNumberish,
      createdAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenAllowed(
      tokenA: string,
      tokenB: string,
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addClass(
      classId: BigNumberish,
      symbol: string,
      interestRateType: BigNumberish,
      tokenAddress: string,
      periodTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getClassFromId(
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastNonceCreated(
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPairAllowed(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateLastNonce(
      classId: BigNumberish,
      nonceId: BigNumberish,
      createdAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTokenAllowed(
      tokenA: string,
      tokenB: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addClass(
      classId: BigNumberish,
      symbol: string,
      interestRateType: BigNumberish,
      tokenAddress: string,
      periodTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getClassFromId(
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastNonceCreated(
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPairAllowed(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateLastNonce(
      classId: BigNumberish,
      nonceId: BigNumberish,
      createdAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenAllowed(
      tokenA: string,
      tokenB: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
