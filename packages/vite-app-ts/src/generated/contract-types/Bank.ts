/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface BankInterface extends utils.Interface {
  contractName: 'Bank';
  functions: {
    'bankDataAddress()': FunctionFragment;
    'bondManagerAddress()': FunctionFragment;
    'buyDBITBondsWithETH(uint256,uint256,uint256,uint256,address)': FunctionFragment;
    'buyDBITBondsWithTokens(uint256,uint256,uint256,uint256,uint256,address)': FunctionFragment;
    'buyDGOVBondsWithDBIT(uint256,uint256,uint256,uint256,uint256,address)': FunctionFragment;
    'buyDGOVBondsWithETH(uint256,uint256,uint256,uint256,address)': FunctionFragment;
    'buyDGOVBondsWithTokens(uint256,uint256,uint256,uint256,uint256,address)': FunctionFragment;
    'canPurchase(uint256,uint256)': FunctionFragment;
    'contractIsActive()': FunctionFragment;
    'getReserves(address,address)': FunctionFragment;
    'interestRate(uint256,uint256,uint256,uint8)': FunctionFragment;
    'purchaseDBITBondsByStakingETH(uint256,uint256,uint256,uint256,address)': FunctionFragment;
    'purchaseDBITBondsByStakingTokens(uint256,uint256,uint256,uint256,uint256,address)': FunctionFragment;
    'purchaseDGOVBondsByStakingDBIT(uint256,uint256,uint256,uint256,uint256,address)': FunctionFragment;
    'purchaseDGOVBondsByStakingETH(uint256,uint256,uint256,uint256,address)': FunctionFragment;
    'purchaseDGOVBondsByStakingTokens(uint256,uint256,uint256,uint256,uint256,address)': FunctionFragment;
    'redeemBonds(uint256[],uint256[],uint256[])': FunctionFragment;
    'redeemWETHBonds(uint256[],uint256[],uint256[])': FunctionFragment;
    'setApmAddress(address)': FunctionFragment;
    'setBankDataAddress(address)': FunctionFragment;
    'setBondManagerAddress(address)': FunctionFragment;
    'setDBITAddress(address)': FunctionFragment;
    'setDGOVAddress(address)': FunctionFragment;
    'setIsActive(bool)': FunctionFragment;
    'swapExactEthForTokens(uint256,address[],address)': FunctionFragment;
    'swapExactTokensForEth(uint256,uint256,address[],address)': FunctionFragment;
    'swapExactTokensForTokens(uint256,uint256,address[],address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'bankDataAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bondManagerAddress', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'buyDBITBondsWithETH',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'buyDBITBondsWithTokens',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'buyDGOVBondsWithDBIT',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'buyDGOVBondsWithETH',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'buyDGOVBondsWithTokens',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: 'canPurchase', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'contractIsActive', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getReserves', values: [string, string]): string;
  encodeFunctionData(
    functionFragment: 'interestRate',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'purchaseDBITBondsByStakingETH',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'purchaseDBITBondsByStakingTokens',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'purchaseDGOVBondsByStakingDBIT',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'purchaseDGOVBondsByStakingETH',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'purchaseDGOVBondsByStakingTokens',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: 'redeemBonds', values: [BigNumberish[], BigNumberish[], BigNumberish[]]): string;
  encodeFunctionData(
    functionFragment: 'redeemWETHBonds',
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: 'setApmAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setBankDataAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setBondManagerAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setDBITAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setDGOVAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setIsActive', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'swapExactEthForTokens', values: [BigNumberish, string[], string]): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForEth',
    values: [BigNumberish, BigNumberish, string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForTokens',
    values: [BigNumberish, BigNumberish, string[], string]
  ): string;

  decodeFunctionResult(functionFragment: 'bankDataAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bondManagerAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyDBITBondsWithETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyDBITBondsWithTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyDGOVBondsWithDBIT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyDGOVBondsWithETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyDGOVBondsWithTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canPurchase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'contractIsActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchaseDBITBondsByStakingETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchaseDBITBondsByStakingTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchaseDGOVBondsByStakingDBIT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchaseDGOVBondsByStakingETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchaseDGOVBondsByStakingTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemBonds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemWETHBonds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApmAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBankDataAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBondManagerAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDBITAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDGOVAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIsActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapExactEthForTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapExactTokensForEth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapExactTokensForTokens', data: BytesLike): Result;

  events: {};
}

export interface Bank extends BaseContract {
  contractName: 'Bank';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BankInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bankDataAddress(overrides?: CallOverrides): Promise<[string]>;

    bondManagerAddress(overrides?: CallOverrides): Promise<[string]>;

    buyDBITBondsWithETH(
      _wethClassId: BigNumberish,
      _dbitClassId: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyDBITBondsWithTokens(
      _purchaseClassId: BigNumberish,
      _dbitClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyDGOVBondsWithDBIT(
      _dbitClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _dbitAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyDGOVBondsWithETH(
      _wethClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyDGOVBondsWithTokens(
      _purchaseClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canPurchase(_classIdIn: BigNumberish, _classIdOut: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    contractIsActive(overrides?: CallOverrides): Promise<[boolean]>;

    getReserves(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _reserveA: BigNumber; _reserveB: BigNumber }>;

    interestRate(
      _purchaseTokenClassId: BigNumberish,
      _debondTokenClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _purchaseMethod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    purchaseDBITBondsByStakingETH(
      _wethClassId: BigNumberish,
      _dbitClassId: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    purchaseDBITBondsByStakingTokens(
      _purchaseClassId: BigNumberish,
      _dbitClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    purchaseDGOVBondsByStakingDBIT(
      _dbitClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _dbitTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    purchaseDGOVBondsByStakingETH(
      _wethClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    purchaseDGOVBondsByStakingTokens(
      _purchaseClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemBonds(
      _classIds: BigNumberish[],
      _nonceIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemWETHBonds(
      _wethClassIds: BigNumberish[],
      _nonceIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApmAddress(
      _apmAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBankDataAddress(
      _bankDataAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBondManagerAddress(
      _bondManagerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDBITAddress(
      _DBITAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDGOVAddress(
      _DGOVAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsActive(
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactEthForTokens(
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForEth(
      _amountIn: BigNumberish,
      _amountEthMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokens(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bankDataAddress(overrides?: CallOverrides): Promise<string>;

  bondManagerAddress(overrides?: CallOverrides): Promise<string>;

  buyDBITBondsWithETH(
    _wethClassId: BigNumberish,
    _dbitClassId: BigNumberish,
    _minRate: BigNumberish,
    _deadline: BigNumberish,
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyDBITBondsWithTokens(
    _purchaseClassId: BigNumberish,
    _dbitClassId: BigNumberish,
    _purchaseTokenAmount: BigNumberish,
    _minRate: BigNumberish,
    _deadline: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyDGOVBondsWithDBIT(
    _dbitClassId: BigNumberish,
    _dgovClassId: BigNumberish,
    _dbitAmount: BigNumberish,
    _minRate: BigNumberish,
    _deadline: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyDGOVBondsWithETH(
    _wethClassId: BigNumberish,
    _dgovClassId: BigNumberish,
    _minRate: BigNumberish,
    _deadline: BigNumberish,
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyDGOVBondsWithTokens(
    _purchaseClassId: BigNumberish,
    _dgovClassId: BigNumberish,
    _purchaseTokenAmount: BigNumberish,
    _minRate: BigNumberish,
    _deadline: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canPurchase(_classIdIn: BigNumberish, _classIdOut: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  contractIsActive(overrides?: CallOverrides): Promise<boolean>;

  getReserves(
    _tokenA: string,
    _tokenB: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { _reserveA: BigNumber; _reserveB: BigNumber }>;

  interestRate(
    _purchaseTokenClassId: BigNumberish,
    _debondTokenClassId: BigNumberish,
    _purchaseTokenAmount: BigNumberish,
    _purchaseMethod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  purchaseDBITBondsByStakingETH(
    _wethClassId: BigNumberish,
    _dbitClassId: BigNumberish,
    _minRate: BigNumberish,
    _deadline: BigNumberish,
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  purchaseDBITBondsByStakingTokens(
    _purchaseClassId: BigNumberish,
    _dbitClassId: BigNumberish,
    _purchaseTokenAmount: BigNumberish,
    _minRate: BigNumberish,
    _deadline: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  purchaseDGOVBondsByStakingDBIT(
    _dbitClassId: BigNumberish,
    _dgovClassId: BigNumberish,
    _dbitTokenAmount: BigNumberish,
    _minRate: BigNumberish,
    _deadline: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  purchaseDGOVBondsByStakingETH(
    _wethClassId: BigNumberish,
    _dgovClassId: BigNumberish,
    _minRate: BigNumberish,
    _deadline: BigNumberish,
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  purchaseDGOVBondsByStakingTokens(
    _purchaseClassId: BigNumberish,
    _dgovClassId: BigNumberish,
    _purchaseTokenAmount: BigNumberish,
    _minRate: BigNumberish,
    _deadline: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemBonds(
    _classIds: BigNumberish[],
    _nonceIds: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemWETHBonds(
    _wethClassIds: BigNumberish[],
    _nonceIds: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApmAddress(
    _apmAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBankDataAddress(
    _bankDataAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBondManagerAddress(
    _bondManagerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDBITAddress(
    _DBITAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDGOVAddress(
    _DGOVAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsActive(
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactEthForTokens(
    _amountOutMin: BigNumberish,
    _path: string[],
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForEth(
    _amountIn: BigNumberish,
    _amountEthMin: BigNumberish,
    _path: string[],
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokens(
    _amountIn: BigNumberish,
    _amountOutMin: BigNumberish,
    _path: string[],
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bankDataAddress(overrides?: CallOverrides): Promise<string>;

    bondManagerAddress(overrides?: CallOverrides): Promise<string>;

    buyDBITBondsWithETH(
      _wethClassId: BigNumberish,
      _dbitClassId: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyDBITBondsWithTokens(
      _purchaseClassId: BigNumberish,
      _dbitClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyDGOVBondsWithDBIT(
      _dbitClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _dbitAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyDGOVBondsWithETH(
      _wethClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyDGOVBondsWithTokens(
      _purchaseClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    canPurchase(_classIdIn: BigNumberish, _classIdOut: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    contractIsActive(overrides?: CallOverrides): Promise<boolean>;

    getReserves(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _reserveA: BigNumber; _reserveB: BigNumber }>;

    interestRate(
      _purchaseTokenClassId: BigNumberish,
      _debondTokenClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _purchaseMethod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchaseDBITBondsByStakingETH(
      _wethClassId: BigNumberish,
      _dbitClassId: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseDBITBondsByStakingTokens(
      _purchaseClassId: BigNumberish,
      _dbitClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseDGOVBondsByStakingDBIT(
      _dbitClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _dbitTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseDGOVBondsByStakingETH(
      _wethClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseDGOVBondsByStakingTokens(
      _purchaseClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemBonds(
      _classIds: BigNumberish[],
      _nonceIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    redeemWETHBonds(
      _wethClassIds: BigNumberish[],
      _nonceIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setApmAddress(_apmAddress: string, overrides?: CallOverrides): Promise<void>;

    setBankDataAddress(_bankDataAddress: string, overrides?: CallOverrides): Promise<void>;

    setBondManagerAddress(_bondManagerAddress: string, overrides?: CallOverrides): Promise<void>;

    setDBITAddress(_DBITAddress: string, overrides?: CallOverrides): Promise<void>;

    setDGOVAddress(_DGOVAddress: string, overrides?: CallOverrides): Promise<void>;

    setIsActive(_isActive: boolean, overrides?: CallOverrides): Promise<void>;

    swapExactEthForTokens(
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForEth(
      _amountIn: BigNumberish,
      _amountEthMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForTokens(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bankDataAddress(overrides?: CallOverrides): Promise<BigNumber>;

    bondManagerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    buyDBITBondsWithETH(
      _wethClassId: BigNumberish,
      _dbitClassId: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyDBITBondsWithTokens(
      _purchaseClassId: BigNumberish,
      _dbitClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyDGOVBondsWithDBIT(
      _dbitClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _dbitAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyDGOVBondsWithETH(
      _wethClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyDGOVBondsWithTokens(
      _purchaseClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canPurchase(_classIdIn: BigNumberish, _classIdOut: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    contractIsActive(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(_tokenA: string, _tokenB: string, overrides?: CallOverrides): Promise<BigNumber>;

    interestRate(
      _purchaseTokenClassId: BigNumberish,
      _debondTokenClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _purchaseMethod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchaseDBITBondsByStakingETH(
      _wethClassId: BigNumberish,
      _dbitClassId: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    purchaseDBITBondsByStakingTokens(
      _purchaseClassId: BigNumberish,
      _dbitClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    purchaseDGOVBondsByStakingDBIT(
      _dbitClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _dbitTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    purchaseDGOVBondsByStakingETH(
      _wethClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    purchaseDGOVBondsByStakingTokens(
      _purchaseClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemBonds(
      _classIds: BigNumberish[],
      _nonceIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemWETHBonds(
      _wethClassIds: BigNumberish[],
      _nonceIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApmAddress(_apmAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setBankDataAddress(
      _bankDataAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBondManagerAddress(
      _bondManagerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDBITAddress(
      _DBITAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDGOVAddress(
      _DGOVAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsActive(_isActive: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    swapExactEthForTokens(
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactTokensForEth(
      _amountIn: BigNumberish,
      _amountEthMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactTokensForTokens(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bankDataAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondManagerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyDBITBondsWithETH(
      _wethClassId: BigNumberish,
      _dbitClassId: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyDBITBondsWithTokens(
      _purchaseClassId: BigNumberish,
      _dbitClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyDGOVBondsWithDBIT(
      _dbitClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _dbitAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyDGOVBondsWithETH(
      _wethClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyDGOVBondsWithTokens(
      _purchaseClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canPurchase(
      _classIdIn: BigNumberish,
      _classIdOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractIsActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserves(_tokenA: string, _tokenB: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestRate(
      _purchaseTokenClassId: BigNumberish,
      _debondTokenClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _purchaseMethod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchaseDBITBondsByStakingETH(
      _wethClassId: BigNumberish,
      _dbitClassId: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    purchaseDBITBondsByStakingTokens(
      _purchaseClassId: BigNumberish,
      _dbitClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    purchaseDGOVBondsByStakingDBIT(
      _dbitClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _dbitTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    purchaseDGOVBondsByStakingETH(
      _wethClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    purchaseDGOVBondsByStakingTokens(
      _purchaseClassId: BigNumberish,
      _dgovClassId: BigNumberish,
      _purchaseTokenAmount: BigNumberish,
      _minRate: BigNumberish,
      _deadline: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemBonds(
      _classIds: BigNumberish[],
      _nonceIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemWETHBonds(
      _wethClassIds: BigNumberish[],
      _nonceIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApmAddress(
      _apmAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBankDataAddress(
      _bankDataAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBondManagerAddress(
      _bondManagerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDBITAddress(
      _DBITAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDGOVAddress(
      _DGOVAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsActive(
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactEthForTokens(
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForEth(
      _amountIn: BigNumberish,
      _amountEthMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
