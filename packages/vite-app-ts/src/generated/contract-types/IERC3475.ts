/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IERC3475Interface extends utils.Interface {
  contractName: "IERC3475";
  functions: {
    "activeSupply(uint256,uint256)": FunctionFragment;
    "allowance(address,address,uint256,uint256)": FunctionFragment;
    "approve(address,uint256,uint256,uint256)": FunctionFragment;
    "balanceOf(address,uint256,uint256)": FunctionFragment;
    "batchApprove(address,uint256[],uint256[],uint256[])": FunctionFragment;
    "burn(address,uint256,uint256,uint256)": FunctionFragment;
    "burnedSupply(uint256,uint256)": FunctionFragment;
    "classInfoDescription(uint256)": FunctionFragment;
    "classInfos(uint256)": FunctionFragment;
    "isApprovedFor(address,address,uint256)": FunctionFragment;
    "isRedeemable(uint256,uint256)": FunctionFragment;
    "issue(address,uint256,uint256,uint256)": FunctionFragment;
    "nonceInfoDescription(uint256)": FunctionFragment;
    "nonceInfos(uint256,uint256)": FunctionFragment;
    "redeem(address,uint256,uint256,uint256)": FunctionFragment;
    "redeemedSupply(uint256,uint256)": FunctionFragment;
    "setApprovalFor(address,uint256,bool)": FunctionFragment;
    "symbol(uint256)": FunctionFragment;
    "totalSupply(uint256,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activeSupply",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchApprove",
    values: [string, BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnedSupply",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "classInfoDescription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "classInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedFor",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRedeemable",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceInfoDescription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceInfos",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemedSupply",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalFor",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "symbol",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "classInfoDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "classInfos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRedeemable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonceInfoDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonceInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalFor(address,address,uint256,bool)": EventFragment;
    "Burn(address,address,uint256,uint256,uint256)": EventFragment;
    "Issue(address,address,uint256,uint256,uint256)": EventFragment;
    "Redeem(address,address,uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalFor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Issue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalForEvent = TypedEvent<
  [string, string, BigNumber, boolean],
  { _owner: string; _operator: string; classId: BigNumber; _approved: boolean }
>;

export type ApprovalForEventFilter = TypedEventFilter<ApprovalForEvent>;

export type BurnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    _operator: string;
    _from: string;
    classId: BigNumber;
    nonceId: BigNumber;
    amount: BigNumber;
  }
>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export type IssueEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    _operator: string;
    _to: string;
    classId: BigNumber;
    nonceId: BigNumber;
    amount: BigNumber;
  }
>;

export type IssueEventFilter = TypedEventFilter<IssueEvent>;

export type RedeemEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    _operator: string;
    _from: string;
    classId: BigNumber;
    nonceId: BigNumber;
    amount: BigNumber;
  }
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export type TransferEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  {
    _operator: string;
    _from: string;
    _to: string;
    classId: BigNumber;
    nonceId: BigNumber;
    amount: BigNumber;
  }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface IERC3475 extends BaseContract {
  contractName: "IERC3475";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC3475Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    batchApprove(
      spender: string,
      classIds: BigNumberish[],
      nonceIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      from: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnedSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    classInfoDescription(
      classInfo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    classInfos(
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isApprovedFor(
      owner: string,
      operator: string,
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRedeemable(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issue(
      to: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonceInfoDescription(
      nonceInfo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nonceInfos(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    redeem(
      from: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemedSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setApprovalFor(
      operator: string,
      classId: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(classId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    totalSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activeSupply(
    classId: BigNumberish,
    nonceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    classId: BigNumberish,
    nonceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    classId: BigNumberish,
    nonceId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    classId: BigNumberish,
    nonceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchApprove(
    spender: string,
    classIds: BigNumberish[],
    nonceIds: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    from: string,
    classId: BigNumberish,
    nonceId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnedSupply(
    classId: BigNumberish,
    nonceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  classInfoDescription(
    classInfo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  classInfos(
    classId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isApprovedFor(
    owner: string,
    operator: string,
    classId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRedeemable(
    classId: BigNumberish,
    nonceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issue(
    to: string,
    classId: BigNumberish,
    nonceId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonceInfoDescription(
    nonceInfo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  nonceInfos(
    classId: BigNumberish,
    nonceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  redeem(
    from: string,
    classId: BigNumberish,
    nonceId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemedSupply(
    classId: BigNumberish,
    nonceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setApprovalFor(
    operator: string,
    classId: BigNumberish,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(classId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(
    classId: BigNumberish,
    nonceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    classId: BigNumberish,
    nonceId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchApprove(
      spender: string,
      classIds: BigNumberish[],
      nonceIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      from: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnedSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    classInfoDescription(
      classInfo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    classInfos(
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isApprovedFor(
      owner: string,
      operator: string,
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRedeemable(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issue(
      to: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nonceInfoDescription(
      nonceInfo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    nonceInfos(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    redeem(
      from: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemedSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovalFor(
      operator: string,
      classId: BigNumberish,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(classId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApprovalFor(address,address,uint256,bool)"(
      _owner?: string | null,
      _operator?: string | null,
      classId?: null,
      _approved?: null
    ): ApprovalForEventFilter;
    ApprovalFor(
      _owner?: string | null,
      _operator?: string | null,
      classId?: null,
      _approved?: null
    ): ApprovalForEventFilter;

    "Burn(address,address,uint256,uint256,uint256)"(
      _operator?: string | null,
      _from?: string | null,
      classId?: null,
      nonceId?: null,
      amount?: null
    ): BurnEventFilter;
    Burn(
      _operator?: string | null,
      _from?: string | null,
      classId?: null,
      nonceId?: null,
      amount?: null
    ): BurnEventFilter;

    "Issue(address,address,uint256,uint256,uint256)"(
      _operator?: string | null,
      _to?: string | null,
      classId?: null,
      nonceId?: null,
      amount?: null
    ): IssueEventFilter;
    Issue(
      _operator?: string | null,
      _to?: string | null,
      classId?: null,
      nonceId?: null,
      amount?: null
    ): IssueEventFilter;

    "Redeem(address,address,uint256,uint256,uint256)"(
      _operator?: string | null,
      _from?: string | null,
      classId?: null,
      nonceId?: null,
      amount?: null
    ): RedeemEventFilter;
    Redeem(
      _operator?: string | null,
      _from?: string | null,
      classId?: null,
      nonceId?: null,
      amount?: null
    ): RedeemEventFilter;

    "Transfer(address,address,address,uint256,uint256,uint256)"(
      _operator?: string | null,
      _from?: string | null,
      _to?: string | null,
      classId?: null,
      nonceId?: null,
      amount?: null
    ): TransferEventFilter;
    Transfer(
      _operator?: string | null,
      _from?: string | null,
      _to?: string | null,
      classId?: null,
      nonceId?: null,
      amount?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    activeSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchApprove(
      spender: string,
      classIds: BigNumberish[],
      nonceIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      from: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnedSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    classInfoDescription(
      classInfo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    classInfos(
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedFor(
      owner: string,
      operator: string,
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRedeemable(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      to: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonceInfoDescription(
      nonceInfo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonceInfos(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      from: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemedSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovalFor(
      operator: string,
      classId: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchApprove(
      spender: string,
      classIds: BigNumberish[],
      nonceIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      from: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnedSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    classInfoDescription(
      classInfo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    classInfos(
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedFor(
      owner: string,
      operator: string,
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRedeemable(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      to: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonceInfoDescription(
      nonceInfo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonceInfos(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      from: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemedSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovalFor(
      operator: string,
      classId: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
