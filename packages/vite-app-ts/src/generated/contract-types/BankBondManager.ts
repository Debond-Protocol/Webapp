/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace IERC3475 {
  export type MetadataStruct = {
    title: string;
    types: string;
    description: string;
  };

  export type MetadataStructOutput = [string, string, string] & {
    title: string;
    types: string;
    description: string;
  };
}

export interface BankBondManagerInterface extends utils.Interface {
  contractName: 'BankBondManager';
  functions: {
    'EPOCH_24H()': FunctionFragment;
    'classValues(uint256)': FunctionFragment;
    'contractIsActive()': FunctionFragment;
    'createClass(uint256,string,address,uint8,uint256)': FunctionFragment;
    'createClassMetadatas(uint256[],(string,string,string)[])': FunctionFragment;
    'getBaseTimestamp()': FunctionFragment;
    'getBenchmarkInterest()': FunctionFragment;
    'getClassIdsFromTokenAddress(address)': FunctionFragment;
    'getClasses()': FunctionFragment;
    'getETA(uint256,uint256)': FunctionFragment;
    'getInterestRate(uint256,uint256)': FunctionFragment;
    'getProgress(uint256,uint256)': FunctionFragment;
    'getTokenInterestRateSupply(address,uint8)': FunctionFragment;
    'getTokenTotalSupplyAtNonce(address,uint256)': FunctionFragment;
    'initDatas(address,address,address,address,address)': FunctionFragment;
    'interestRateTypeMetadataId()': FunctionFragment;
    'issuanceDateMetadataId()': FunctionFragment;
    'issueBonds(address,uint256[],uint256[])': FunctionFragment;
    'maturityDateMetadataId()': FunctionFragment;
    'nonceValues(uint256,uint256)': FunctionFragment;
    'periodMetadataId()': FunctionFragment;
    'redeemBonds(address,uint256[],uint256[],uint256[])': FunctionFragment;
    'setBankAddress(address)': FunctionFragment;
    'setBankDataAddress(address)': FunctionFragment;
    'setBenchmarkInterest(uint256)': FunctionFragment;
    'setDebondBondAddress(address)': FunctionFragment;
    'setIsActive(bool)': FunctionFragment;
    'symbolMetadataId()': FunctionFragment;
    'tokenAddressMetadataId()': FunctionFragment;
    'updateCanPurchase(uint256,uint256,bool)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'EPOCH_24H', values?: undefined): string;
  encodeFunctionData(functionFragment: 'classValues', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'contractIsActive', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'createClass',
    values: [BigNumberish, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'createClassMetadatas',
    values: [BigNumberish[], IERC3475.MetadataStruct[]]
  ): string;
  encodeFunctionData(functionFragment: 'getBaseTimestamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBenchmarkInterest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getClassIdsFromTokenAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'getClasses', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getETA', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getInterestRate', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getProgress', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getTokenInterestRateSupply', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getTokenTotalSupplyAtNonce', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'initDatas', values: [string, string, string, string, string]): string;
  encodeFunctionData(functionFragment: 'interestRateTypeMetadataId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'issuanceDateMetadataId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'issueBonds', values: [string, BigNumberish[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'maturityDateMetadataId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonceValues', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'periodMetadataId', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redeemBonds',
    values: [string, BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: 'setBankAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setBankDataAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setBenchmarkInterest', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setDebondBondAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setIsActive', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'symbolMetadataId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenAddressMetadataId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateCanPurchase', values: [BigNumberish, BigNumberish, boolean]): string;

  decodeFunctionResult(functionFragment: 'EPOCH_24H', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'classValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'contractIsActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createClass', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createClassMetadatas', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBaseTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBenchmarkInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getClassIdsFromTokenAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getClasses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getETA', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getInterestRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProgress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokenInterestRateSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokenTotalSupplyAtNonce', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initDatas', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestRateTypeMetadataId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'issuanceDateMetadataId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'issueBonds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maturityDateMetadataId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonceValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'periodMetadataId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemBonds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBankAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBankDataAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBenchmarkInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDebondBondAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIsActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbolMetadataId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenAddressMetadataId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateCanPurchase', data: BytesLike): Result;

  events: {
    'ClassCreated(uint256,string,address,uint8,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ClassCreated'): EventFragment;
}

export type ClassCreatedEvent = TypedEvent<
  [BigNumber, string, string, number, BigNumber],
  {
    classId: BigNumber;
    arg1: string;
    arg2: string;
    arg3: number;
    arg4: BigNumber;
  }
>;

export type ClassCreatedEventFilter = TypedEventFilter<ClassCreatedEvent>;

export interface BankBondManager extends BaseContract {
  contractName: 'BankBondManager';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BankBondManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EPOCH_24H(overrides?: CallOverrides): Promise<[BigNumber]>;

    classValues(
      _classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        _tokenAddress: string;
        _interestRateType: number;
        _periodTimestamp: BigNumber;
      }
    >;

    contractIsActive(overrides?: CallOverrides): Promise<[boolean]>;

    createClass(
      _classId: BigNumberish,
      _symbol: string,
      _tokenAddress: string,
      _interestRateType: BigNumberish,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createClassMetadatas(
      _metadataIds: BigNumberish[],
      _metadatas: IERC3475.MetadataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBaseTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBenchmarkInterest(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClassIdsFromTokenAddress(tokenAddress: string, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getClasses(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getETA(_classId: BigNumberish, _nonceId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getInterestRate(
      classId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rate: BigNumber }>;

    getProgress(
      _classId: BigNumberish,
      _nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        progressAchieved: BigNumber;
        progressRemaining: BigNumber;
      }
    >;

    getTokenInterestRateSupply(
      tokenAddress: string,
      interestRateType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenTotalSupplyAtNonce(
      tokenAddress: string,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initDatas(
      DBITAddress: string,
      USDTAddress: string,
      DAIAddress: string,
      DGOVAddress: string,
      WETHAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestRateTypeMetadataId(overrides?: CallOverrides): Promise<[BigNumber]>;

    issuanceDateMetadataId(overrides?: CallOverrides): Promise<[BigNumber]>;

    issueBonds(
      _to: string,
      _classIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maturityDateMetadataId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonceValues(
      _classId: BigNumberish,
      _nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _issuanceDate: BigNumber;
        _maturityDate: BigNumber;
      }
    >;

    periodMetadataId(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemBonds(
      _from: string,
      _classIds: BigNumberish[],
      _nonceIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBankAddress(
      _bankAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBankDataAddress(
      _bankDataAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBenchmarkInterest(
      _benchmarkInterest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDebondBondAddress(
      _debondBondAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsActive(
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbolMetadataId(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenAddressMetadataId(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateCanPurchase(
      _classIdIn: BigNumberish,
      _classIdOut: BigNumberish,
      _canPurchase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  EPOCH_24H(overrides?: CallOverrides): Promise<BigNumber>;

  classValues(
    _classId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber] & {
      _tokenAddress: string;
      _interestRateType: number;
      _periodTimestamp: BigNumber;
    }
  >;

  contractIsActive(overrides?: CallOverrides): Promise<boolean>;

  createClass(
    _classId: BigNumberish,
    _symbol: string,
    _tokenAddress: string,
    _interestRateType: BigNumberish,
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createClassMetadatas(
    _metadataIds: BigNumberish[],
    _metadatas: IERC3475.MetadataStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBaseTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getBenchmarkInterest(overrides?: CallOverrides): Promise<BigNumber>;

  getClassIdsFromTokenAddress(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  getClasses(overrides?: CallOverrides): Promise<BigNumber[]>;

  getETA(_classId: BigNumberish, _nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getInterestRate(classId: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getProgress(
    _classId: BigNumberish,
    _nonceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      progressAchieved: BigNumber;
      progressRemaining: BigNumber;
    }
  >;

  getTokenInterestRateSupply(
    tokenAddress: string,
    interestRateType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenTotalSupplyAtNonce(
    tokenAddress: string,
    nonceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initDatas(
    DBITAddress: string,
    USDTAddress: string,
    DAIAddress: string,
    DGOVAddress: string,
    WETHAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestRateTypeMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

  issuanceDateMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

  issueBonds(
    _to: string,
    _classIds: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maturityDateMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

  nonceValues(
    _classId: BigNumberish,
    _nonceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _issuanceDate: BigNumber;
      _maturityDate: BigNumber;
    }
  >;

  periodMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

  redeemBonds(
    _from: string,
    _classIds: BigNumberish[],
    _nonceIds: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBankAddress(
    _bankAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBankDataAddress(
    _bankDataAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBenchmarkInterest(
    _benchmarkInterest: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDebondBondAddress(
    _debondBondAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsActive(
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbolMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

  tokenAddressMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

  updateCanPurchase(
    _classIdIn: BigNumberish,
    _classIdOut: BigNumberish,
    _canPurchase: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EPOCH_24H(overrides?: CallOverrides): Promise<BigNumber>;

    classValues(
      _classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        _tokenAddress: string;
        _interestRateType: number;
        _periodTimestamp: BigNumber;
      }
    >;

    contractIsActive(overrides?: CallOverrides): Promise<boolean>;

    createClass(
      _classId: BigNumberish,
      _symbol: string,
      _tokenAddress: string,
      _interestRateType: BigNumberish,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createClassMetadatas(
      _metadataIds: BigNumberish[],
      _metadatas: IERC3475.MetadataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    getBaseTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getBenchmarkInterest(overrides?: CallOverrides): Promise<BigNumber>;

    getClassIdsFromTokenAddress(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    getClasses(overrides?: CallOverrides): Promise<BigNumber[]>;

    getETA(_classId: BigNumberish, _nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getInterestRate(classId: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getProgress(
      _classId: BigNumberish,
      _nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        progressAchieved: BigNumber;
        progressRemaining: BigNumber;
      }
    >;

    getTokenInterestRateSupply(
      tokenAddress: string,
      interestRateType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenTotalSupplyAtNonce(
      tokenAddress: string,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initDatas(
      DBITAddress: string,
      USDTAddress: string,
      DAIAddress: string,
      DGOVAddress: string,
      WETHAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interestRateTypeMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

    issuanceDateMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

    issueBonds(
      _to: string,
      _classIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    maturityDateMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

    nonceValues(
      _classId: BigNumberish,
      _nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _issuanceDate: BigNumber;
        _maturityDate: BigNumber;
      }
    >;

    periodMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

    redeemBonds(
      _from: string,
      _classIds: BigNumberish[],
      _nonceIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setBankAddress(_bankAddress: string, overrides?: CallOverrides): Promise<void>;

    setBankDataAddress(_bankDataAddress: string, overrides?: CallOverrides): Promise<void>;

    setBenchmarkInterest(_benchmarkInterest: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setDebondBondAddress(_debondBondAddress: string, overrides?: CallOverrides): Promise<void>;

    setIsActive(_isActive: boolean, overrides?: CallOverrides): Promise<void>;

    symbolMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddressMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

    updateCanPurchase(
      _classIdIn: BigNumberish,
      _classIdOut: BigNumberish,
      _canPurchase: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'ClassCreated(uint256,string,address,uint8,uint256)'(
      classId?: null,
      arg1?: null,
      arg2?: null,
      arg3?: null,
      arg4?: null
    ): ClassCreatedEventFilter;
    ClassCreated(classId?: null, arg1?: null, arg2?: null, arg3?: null, arg4?: null): ClassCreatedEventFilter;
  };

  estimateGas: {
    EPOCH_24H(overrides?: CallOverrides): Promise<BigNumber>;

    classValues(_classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    contractIsActive(overrides?: CallOverrides): Promise<BigNumber>;

    createClass(
      _classId: BigNumberish,
      _symbol: string,
      _tokenAddress: string,
      _interestRateType: BigNumberish,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createClassMetadatas(
      _metadataIds: BigNumberish[],
      _metadatas: IERC3475.MetadataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBaseTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getBenchmarkInterest(overrides?: CallOverrides): Promise<BigNumber>;

    getClassIdsFromTokenAddress(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    getClasses(overrides?: CallOverrides): Promise<BigNumber>;

    getETA(_classId: BigNumberish, _nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getInterestRate(classId: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getProgress(_classId: BigNumberish, _nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenInterestRateSupply(
      tokenAddress: string,
      interestRateType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenTotalSupplyAtNonce(
      tokenAddress: string,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initDatas(
      DBITAddress: string,
      USDTAddress: string,
      DAIAddress: string,
      DGOVAddress: string,
      WETHAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestRateTypeMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

    issuanceDateMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

    issueBonds(
      _to: string,
      _classIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maturityDateMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

    nonceValues(_classId: BigNumberish, _nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    periodMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

    redeemBonds(
      _from: string,
      _classIds: BigNumberish[],
      _nonceIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBankAddress(
      _bankAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBankDataAddress(
      _bankDataAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBenchmarkInterest(
      _benchmarkInterest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDebondBondAddress(
      _debondBondAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsActive(_isActive: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    symbolMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddressMetadataId(overrides?: CallOverrides): Promise<BigNumber>;

    updateCanPurchase(
      _classIdIn: BigNumberish,
      _classIdOut: BigNumberish,
      _canPurchase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EPOCH_24H(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    classValues(_classId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractIsActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createClass(
      _classId: BigNumberish,
      _symbol: string,
      _tokenAddress: string,
      _interestRateType: BigNumberish,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createClassMetadatas(
      _metadataIds: BigNumberish[],
      _metadatas: IERC3475.MetadataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBaseTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBenchmarkInterest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClassIdsFromTokenAddress(tokenAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClasses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getETA(_classId: BigNumberish, _nonceId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInterestRate(
      classId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProgress(
      _classId: BigNumberish,
      _nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenInterestRateSupply(
      tokenAddress: string,
      interestRateType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenTotalSupplyAtNonce(
      tokenAddress: string,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initDatas(
      DBITAddress: string,
      USDTAddress: string,
      DAIAddress: string,
      DGOVAddress: string,
      WETHAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestRateTypeMetadataId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issuanceDateMetadataId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issueBonds(
      _to: string,
      _classIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maturityDateMetadataId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonceValues(
      _classId: BigNumberish,
      _nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodMetadataId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemBonds(
      _from: string,
      _classIds: BigNumberish[],
      _nonceIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBankAddress(
      _bankAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBankDataAddress(
      _bankDataAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBenchmarkInterest(
      _benchmarkInterest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDebondBondAddress(
      _debondBondAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsActive(
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbolMetadataId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAddressMetadataId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateCanPurchase(
      _classIdIn: BigNumberish,
      _classIdOut: BigNumberish,
      _canPurchase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
