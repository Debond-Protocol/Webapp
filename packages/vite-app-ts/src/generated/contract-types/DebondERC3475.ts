/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace IERC3475 {
  export type TransactionStruct = {
    classId: BigNumberish;
    nonceId: BigNumberish;
    amount: BigNumberish;
  };

  export type TransactionStructOutput = [BigNumber, BigNumber, BigNumber] & {
    classId: BigNumber;
    nonceId: BigNumber;
    amount: BigNumber;
  };

  export type MetadataStruct = {
    title: string;
    types: string;
    description: string;
  };

  export type MetadataStructOutput = [string, string, string] & {
    title: string;
    types: string;
    description: string;
  };

  export type ValuesStruct = {
    stringValue: string;
    uintValue: BigNumberish;
    addressValue: string;
    boolValue: boolean;
  };

  export type ValuesStructOutput = [string, BigNumber, string, boolean] & {
    stringValue: string;
    uintValue: BigNumber;
    addressValue: string;
    boolValue: boolean;
  };
}

export interface DebondERC3475Interface extends utils.Interface {
  contractName: 'DebondERC3475';
  functions: {
    'activeSupply(uint256,uint256)': FunctionFragment;
    'allowance(address,address,uint256,uint256)': FunctionFragment;
    'approve(address,(uint256,uint256,uint256)[])': FunctionFragment;
    'balanceOf(address,uint256,uint256)': FunctionFragment;
    'batchActiveSupply(uint256)': FunctionFragment;
    'batchBurnedSupply(uint256)': FunctionFragment;
    'batchRedeemedSupply(uint256)': FunctionFragment;
    'batchTotalSupply(uint256)': FunctionFragment;
    'burn(address,(uint256,uint256,uint256)[])': FunctionFragment;
    'burnedSupply(uint256,uint256)': FunctionFragment;
    'classExists(uint256)': FunctionFragment;
    'classLiquidity(uint256)': FunctionFragment;
    'classLiquidityAtNonce(uint256,uint256)': FunctionFragment;
    'classMetadata(uint256)': FunctionFragment;
    'classValues(uint256,uint256)': FunctionFragment;
    'contractIsActive()': FunctionFragment;
    'createClass(uint256,uint256[],(string,uint256,address,bool)[])': FunctionFragment;
    'createClassMetadata(uint256,(string,string,string))': FunctionFragment;
    'createClassMetadataBatch(uint256[],(string,string,string)[])': FunctionFragment;
    'createNonce(uint256,uint256,uint256[],(string,uint256,address,bool)[])': FunctionFragment;
    'createNonceMetadata(uint256,uint256,(string,string,string))': FunctionFragment;
    'createNonceMetadataBatch(uint256,uint256[],(string,string,string)[])': FunctionFragment;
    'getLastNonceCreated(uint256)': FunctionFragment;
    'getProgress(uint256,uint256)': FunctionFragment;
    'isApprovedFor(address,address)': FunctionFragment;
    'issue(address,(uint256,uint256,uint256)[])': FunctionFragment;
    'nonceExists(uint256,uint256)': FunctionFragment;
    'nonceMetadata(uint256,uint256)': FunctionFragment;
    'nonceValues(uint256,uint256,uint256)': FunctionFragment;
    'redeem(address,(uint256,uint256,uint256)[])': FunctionFragment;
    'redeemedSupply(uint256,uint256)': FunctionFragment;
    'setApprovalFor(address,bool)': FunctionFragment;
    'setBankAddress(address)': FunctionFragment;
    'setIsActive(bool)': FunctionFragment;
    'totalSupply(uint256,uint256)': FunctionFragment;
    'transferAllowanceFrom(address,address,(uint256,uint256,uint256)[])': FunctionFragment;
    'transferFrom(address,address,(uint256,uint256,uint256)[])': FunctionFragment;
    'updateLastNonce(uint256,uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'activeSupply', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, IERC3475.TransactionStruct[]]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'batchActiveSupply', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'batchBurnedSupply', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'batchRedeemedSupply', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'batchTotalSupply', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'burn', values: [string, IERC3475.TransactionStruct[]]): string;
  encodeFunctionData(functionFragment: 'burnedSupply', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'classExists', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'classLiquidity', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'classLiquidityAtNonce', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'classMetadata', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'classValues', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'contractIsActive', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'createClass',
    values: [BigNumberish, BigNumberish[], IERC3475.ValuesStruct[]]
  ): string;
  encodeFunctionData(functionFragment: 'createClassMetadata', values: [BigNumberish, IERC3475.MetadataStruct]): string;
  encodeFunctionData(
    functionFragment: 'createClassMetadataBatch',
    values: [BigNumberish[], IERC3475.MetadataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'createNonce',
    values: [BigNumberish, BigNumberish, BigNumberish[], IERC3475.ValuesStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'createNonceMetadata',
    values: [BigNumberish, BigNumberish, IERC3475.MetadataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'createNonceMetadataBatch',
    values: [BigNumberish, BigNumberish[], IERC3475.MetadataStruct[]]
  ): string;
  encodeFunctionData(functionFragment: 'getLastNonceCreated', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getProgress', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isApprovedFor', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'issue', values: [string, IERC3475.TransactionStruct[]]): string;
  encodeFunctionData(functionFragment: 'nonceExists', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'nonceMetadata', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'nonceValues', values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'redeem', values: [string, IERC3475.TransactionStruct[]]): string;
  encodeFunctionData(functionFragment: 'redeemedSupply', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setApprovalFor', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'setBankAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setIsActive', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'transferAllowanceFrom',
    values: [string, string, IERC3475.TransactionStruct[]]
  ): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, IERC3475.TransactionStruct[]]): string;
  encodeFunctionData(functionFragment: 'updateLastNonce', values: [BigNumberish, BigNumberish, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'activeSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'batchActiveSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'batchBurnedSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'batchRedeemedSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'batchTotalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnedSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'classExists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'classLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'classLiquidityAtNonce', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'classMetadata', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'classValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'contractIsActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createClass', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createClassMetadata', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createClassMetadataBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createNonce', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createNonceMetadata', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createNonceMetadataBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLastNonceCreated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProgress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'issue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonceExists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonceMetadata', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonceValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemedSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBankAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIsActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferAllowanceFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateLastNonce', data: BytesLike): Result;

  events: {
    'ApprovalFor(address,address,bool)': EventFragment;
    'Burn(address,address,tuple[])': EventFragment;
    'Issue(address,address,tuple[])': EventFragment;
    'Redeem(address,address,tuple[])': EventFragment;
    'Transfer(address,address,address,tuple[])': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ApprovalFor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Issue'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Redeem'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export type ApprovalForEvent = TypedEvent<
  [string, string, boolean],
  { _owner: string; _operator: string; _approved: boolean }
>;

export type ApprovalForEventFilter = TypedEventFilter<ApprovalForEvent>;

export type BurnEvent = TypedEvent<
  [string, string, IERC3475.TransactionStructOutput[]],
  {
    _operator: string;
    _from: string;
    _transaction: IERC3475.TransactionStructOutput[];
  }
>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export type IssueEvent = TypedEvent<
  [string, string, IERC3475.TransactionStructOutput[]],
  {
    _operator: string;
    _to: string;
    _transaction: IERC3475.TransactionStructOutput[];
  }
>;

export type IssueEventFilter = TypedEventFilter<IssueEvent>;

export type RedeemEvent = TypedEvent<
  [string, string, IERC3475.TransactionStructOutput[]],
  {
    _operator: string;
    _from: string;
    _transaction: IERC3475.TransactionStructOutput[];
  }
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export type TransferEvent = TypedEvent<
  [string, string, string, IERC3475.TransactionStructOutput[]],
  {
    _operator: string;
    _from: string;
    _to: string;
    _transaction: IERC3475.TransactionStructOutput[];
  }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface DebondERC3475 extends BaseContract {
  contractName: 'DebondERC3475';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DebondERC3475Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    batchActiveSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    batchBurnedSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    batchRedeemedSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    batchTotalSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      from: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnedSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    classExists(classId: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    classLiquidity(classId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    classLiquidityAtNonce(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    classMetadata(metadataId: BigNumberish, overrides?: CallOverrides): Promise<[IERC3475.MetadataStructOutput]>;

    classValues(
      classId: BigNumberish,
      metadataId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IERC3475.ValuesStructOutput]>;

    contractIsActive(overrides?: CallOverrides): Promise<[boolean]>;

    createClass(
      classId: BigNumberish,
      metadataIds: BigNumberish[],
      values: IERC3475.ValuesStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createClassMetadata(
      metadataId: BigNumberish,
      metadata: IERC3475.MetadataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createClassMetadataBatch(
      metadataIds: BigNumberish[],
      metadatas: IERC3475.MetadataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNonce(
      classId: BigNumberish,
      nonceId: BigNumberish,
      metadataIds: BigNumberish[],
      values: IERC3475.ValuesStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNonceMetadata(
      classId: BigNumberish,
      metadataId: BigNumberish,
      metadata: IERC3475.MetadataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNonceMetadataBatch(
      classId: BigNumberish,
      metadataIds: BigNumberish[],
      metadatas: IERC3475.MetadataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLastNonceCreated(
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { nonceId: BigNumber; createdAt: BigNumber }>;

    getProgress(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        progressAchieved: BigNumber;
        progressRemaining: BigNumber;
      }
    >;

    isApprovedFor(owner: string, operator: string, overrides?: CallOverrides): Promise<[boolean]>;

    issue(
      to: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonceExists(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    nonceMetadata(
      classId: BigNumberish,
      metadataId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IERC3475.MetadataStructOutput]>;

    nonceValues(
      classId: BigNumberish,
      nonceId: BigNumberish,
      metadataId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IERC3475.ValuesStructOutput]>;

    redeem(
      from: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemedSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    setApprovalFor(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBankAddress(
      _bankAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsActive(
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferAllowanceFrom(
      from: string,
      to: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLastNonce(
      classId: BigNumberish,
      newNonceId: BigNumberish,
      createdAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activeSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    classId: BigNumberish,
    nonceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    transactions: IERC3475.TransactionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    classId: BigNumberish,
    nonceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchActiveSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  batchBurnedSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  batchRedeemedSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  batchTotalSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    from: string,
    transactions: IERC3475.TransactionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnedSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  classExists(classId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  classLiquidity(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  classLiquidityAtNonce(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  classMetadata(metadataId: BigNumberish, overrides?: CallOverrides): Promise<IERC3475.MetadataStructOutput>;

  classValues(
    classId: BigNumberish,
    metadataId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IERC3475.ValuesStructOutput>;

  contractIsActive(overrides?: CallOverrides): Promise<boolean>;

  createClass(
    classId: BigNumberish,
    metadataIds: BigNumberish[],
    values: IERC3475.ValuesStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createClassMetadata(
    metadataId: BigNumberish,
    metadata: IERC3475.MetadataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createClassMetadataBatch(
    metadataIds: BigNumberish[],
    metadatas: IERC3475.MetadataStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNonce(
    classId: BigNumberish,
    nonceId: BigNumberish,
    metadataIds: BigNumberish[],
    values: IERC3475.ValuesStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNonceMetadata(
    classId: BigNumberish,
    metadataId: BigNumberish,
    metadata: IERC3475.MetadataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNonceMetadataBatch(
    classId: BigNumberish,
    metadataIds: BigNumberish[],
    metadatas: IERC3475.MetadataStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLastNonceCreated(
    classId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { nonceId: BigNumber; createdAt: BigNumber }>;

  getProgress(
    classId: BigNumberish,
    nonceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      progressAchieved: BigNumber;
      progressRemaining: BigNumber;
    }
  >;

  isApprovedFor(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

  issue(
    to: string,
    transactions: IERC3475.TransactionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonceExists(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  nonceMetadata(
    classId: BigNumberish,
    metadataId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IERC3475.MetadataStructOutput>;

  nonceValues(
    classId: BigNumberish,
    nonceId: BigNumberish,
    metadataId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IERC3475.ValuesStructOutput>;

  redeem(
    from: string,
    transactions: IERC3475.TransactionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemedSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  setApprovalFor(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBankAddress(
    _bankAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsActive(
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  transferAllowanceFrom(
    from: string,
    to: string,
    transactions: IERC3475.TransactionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    transactions: IERC3475.TransactionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLastNonce(
    classId: BigNumberish,
    newNonceId: BigNumberish,
    createdAt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(spender: string, transactions: IERC3475.TransactionStruct[], overrides?: CallOverrides): Promise<void>;

    balanceOf(
      account: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchActiveSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    batchBurnedSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    batchRedeemedSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    batchTotalSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    burn(from: string, transactions: IERC3475.TransactionStruct[], overrides?: CallOverrides): Promise<void>;

    burnedSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    classExists(classId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    classLiquidity(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    classLiquidityAtNonce(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    classMetadata(metadataId: BigNumberish, overrides?: CallOverrides): Promise<IERC3475.MetadataStructOutput>;

    classValues(
      classId: BigNumberish,
      metadataId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IERC3475.ValuesStructOutput>;

    contractIsActive(overrides?: CallOverrides): Promise<boolean>;

    createClass(
      classId: BigNumberish,
      metadataIds: BigNumberish[],
      values: IERC3475.ValuesStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    createClassMetadata(
      metadataId: BigNumberish,
      metadata: IERC3475.MetadataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createClassMetadataBatch(
      metadataIds: BigNumberish[],
      metadatas: IERC3475.MetadataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    createNonce(
      classId: BigNumberish,
      nonceId: BigNumberish,
      metadataIds: BigNumberish[],
      values: IERC3475.ValuesStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    createNonceMetadata(
      classId: BigNumberish,
      metadataId: BigNumberish,
      metadata: IERC3475.MetadataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createNonceMetadataBatch(
      classId: BigNumberish,
      metadataIds: BigNumberish[],
      metadatas: IERC3475.MetadataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    getLastNonceCreated(
      classId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { nonceId: BigNumber; createdAt: BigNumber }>;

    getProgress(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        progressAchieved: BigNumber;
        progressRemaining: BigNumber;
      }
    >;

    isApprovedFor(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

    issue(to: string, transactions: IERC3475.TransactionStruct[], overrides?: CallOverrides): Promise<void>;

    nonceExists(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    nonceMetadata(
      classId: BigNumberish,
      metadataId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IERC3475.MetadataStructOutput>;

    nonceValues(
      classId: BigNumberish,
      nonceId: BigNumberish,
      metadataId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IERC3475.ValuesStructOutput>;

    redeem(from: string, transactions: IERC3475.TransactionStruct[], overrides?: CallOverrides): Promise<void>;

    redeemedSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalFor(operator: string, approved: boolean, overrides?: CallOverrides): Promise<void>;

    setBankAddress(_bankAddress: string, overrides?: CallOverrides): Promise<void>;

    setIsActive(_isActive: boolean, overrides?: CallOverrides): Promise<void>;

    totalSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferAllowanceFrom(
      from: string,
      to: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateLastNonce(
      classId: BigNumberish,
      newNonceId: BigNumberish,
      createdAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'ApprovalFor(address,address,bool)'(
      _owner?: string | null,
      _operator?: string | null,
      _approved?: null
    ): ApprovalForEventFilter;
    ApprovalFor(_owner?: string | null, _operator?: string | null, _approved?: null): ApprovalForEventFilter;

    'Burn(address,address,tuple[])'(
      _operator?: string | null,
      _from?: string | null,
      _transaction?: null
    ): BurnEventFilter;
    Burn(_operator?: string | null, _from?: string | null, _transaction?: null): BurnEventFilter;

    'Issue(address,address,tuple[])'(
      _operator?: string | null,
      _to?: string | null,
      _transaction?: null
    ): IssueEventFilter;
    Issue(_operator?: string | null, _to?: string | null, _transaction?: null): IssueEventFilter;

    'Redeem(address,address,tuple[])'(
      _operator?: string | null,
      _from?: string | null,
      _transaction?: null
    ): RedeemEventFilter;
    Redeem(_operator?: string | null, _from?: string | null, _transaction?: null): RedeemEventFilter;

    'Transfer(address,address,address,tuple[])'(
      _operator?: string | null,
      _from?: string | null,
      _to?: string | null,
      _transaction?: null
    ): TransferEventFilter;
    Transfer(
      _operator?: string | null,
      _from?: string | null,
      _to?: string | null,
      _transaction?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    activeSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchActiveSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    batchBurnedSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    batchRedeemedSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    batchTotalSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      from: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnedSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    classExists(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    classLiquidity(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    classLiquidityAtNonce(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    classMetadata(metadataId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    classValues(classId: BigNumberish, metadataId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    contractIsActive(overrides?: CallOverrides): Promise<BigNumber>;

    createClass(
      classId: BigNumberish,
      metadataIds: BigNumberish[],
      values: IERC3475.ValuesStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createClassMetadata(
      metadataId: BigNumberish,
      metadata: IERC3475.MetadataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createClassMetadataBatch(
      metadataIds: BigNumberish[],
      metadatas: IERC3475.MetadataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNonce(
      classId: BigNumberish,
      nonceId: BigNumberish,
      metadataIds: BigNumberish[],
      values: IERC3475.ValuesStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNonceMetadata(
      classId: BigNumberish,
      metadataId: BigNumberish,
      metadata: IERC3475.MetadataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNonceMetadataBatch(
      classId: BigNumberish,
      metadataIds: BigNumberish[],
      metadatas: IERC3475.MetadataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLastNonceCreated(classId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getProgress(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedFor(owner: string, operator: string, overrides?: CallOverrides): Promise<BigNumber>;

    issue(
      to: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonceExists(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nonceMetadata(classId: BigNumberish, metadataId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nonceValues(
      classId: BigNumberish,
      nonceId: BigNumberish,
      metadataId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      from: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemedSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalFor(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBankAddress(
      _bankAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsActive(_isActive: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    totalSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferAllowanceFrom(
      from: string,
      to: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLastNonce(
      classId: BigNumberish,
      newNonceId: BigNumberish,
      createdAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchActiveSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchBurnedSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchRedeemedSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchTotalSupply(classId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      from: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnedSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    classExists(classId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    classLiquidity(classId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    classLiquidityAtNonce(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    classMetadata(metadataId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    classValues(
      classId: BigNumberish,
      metadataId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractIsActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createClass(
      classId: BigNumberish,
      metadataIds: BigNumberish[],
      values: IERC3475.ValuesStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createClassMetadata(
      metadataId: BigNumberish,
      metadata: IERC3475.MetadataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createClassMetadataBatch(
      metadataIds: BigNumberish[],
      metadatas: IERC3475.MetadataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNonce(
      classId: BigNumberish,
      nonceId: BigNumberish,
      metadataIds: BigNumberish[],
      values: IERC3475.ValuesStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNonceMetadata(
      classId: BigNumberish,
      metadataId: BigNumberish,
      metadata: IERC3475.MetadataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNonceMetadataBatch(
      classId: BigNumberish,
      metadataIds: BigNumberish[],
      metadatas: IERC3475.MetadataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLastNonceCreated(classId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProgress(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedFor(owner: string, operator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issue(
      to: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonceExists(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonceMetadata(
      classId: BigNumberish,
      metadataId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonceValues(
      classId: BigNumberish,
      nonceId: BigNumberish,
      metadataId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      from: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemedSupply(
      classId: BigNumberish,
      nonceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovalFor(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBankAddress(
      _bankAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsActive(
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(classId: BigNumberish, nonceId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAllowanceFrom(
      from: string,
      to: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLastNonce(
      classId: BigNumberish,
      newNonceId: BigNumberish,
      createdAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
