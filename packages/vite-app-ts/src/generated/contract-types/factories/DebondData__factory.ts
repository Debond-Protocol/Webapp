/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DebondData, DebondDataInterface } from "../DebondData";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "DBIT",
        type: "address",
      },
      {
        internalType: "address",
        name: "USDC",
        type: "address",
      },
      {
        internalType: "address",
        name: "USDT",
        type: "address",
      },
      {
        internalType: "address",
        name: "DAI",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ONE_HOUR_PERIOD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SIX_M_PERIOD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TEST_PERIOD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TWO_MIN_PERIOD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "classId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "enum IData.InterestRateType",
        name: "interestRateType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "periodTimestamp",
        type: "uint256",
      },
    ],
    name: "addClass",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "classes",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "enum IData.InterestRateType",
        name: "interestRateType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "periodTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastNonceIdCreated",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastNonceIdCreatedTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "classesIds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "debondClasses",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllClassesIds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "classId",
        type: "uint256",
      },
    ],
    name: "getClassFromId",
    outputs: [
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "enum IData.InterestRateType",
        name: "interestRateType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "periodTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDebondClasses",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "classId",
        type: "uint256",
      },
    ],
    name: "getLastNonceCreated",
    outputs: [
      {
        internalType: "uint256",
        name: "nonceId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "createdAt",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "debondClass",
        type: "uint256",
      },
    ],
    name: "getPurchasableClasses",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
    ],
    name: "isPairAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "purchasableClasses",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tokenAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "classId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nonceId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "createdAt",
        type: "uint256",
      },
    ],
    name: "updateLastNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "updateTokenAllowed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001567380380620015678339810160408190526200003491620006dc565b62000069600060405180604001604052806005815260200164110bd0925560da1b8152506000876000620003e960201b60201c565b6200009d6001604051806040016040528060048152602001635553444360e01b8152506000866000620003e960201b60201c565b620000d16002604051806040016040528060048152602001631554d11560e21b8152506000856000620003e960201b60201c565b6040805180820190915260038082526244414960e81b6020830152620000fb9160008481620003e9565b62000130600460405180604001604052806005815260200164110bd091d560da1b8152506000876000620003e960201b60201c565b620001656005604051806040016040528060048152602001635553444360e01b815250600086610e10620003e960201b60201c565b6200019a6006604051806040016040528060048152602001631554d11560e21b815250600085610e10620003e960201b60201c565b620001d0600760405180604001604052806005815260200164110bd0925560da1b815250600087610e10620003e960201b60201c565b600260208181527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b8054600181810183557f7d2944a272ac5bae96b5bd2f67b6c13276d541dc09eb1cf414d96b19a09e1c2f918201819055825480820184558201949094558154808501909255600391018190557facd8ef244210bb6898e73c48bf820ed8ecc857a3bab8d79c10e4fa92b1e9ca658054808501825560057f7613dffd80ba7541d4ea05a3202a3f515d93c4b983db32843fbe26e885c3d90091820155815480860190925560069101558054808401825560008281527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b918201819055825480860184556004908301558254948501909255600793019290925581906200030a9087908790620008186200051f821b17901c565b6001600160a01b038083166000908152600160208181526040808420948616845293815292909120805460ff1916909117905591935091506200035a9087908690620008186200051f821b17901c565b6001600160a01b038083166000908152600160208181526040808420948616845293815292909120805460ff191690911790559193509150620003aa9087908590620008186200051f821b17901c565b6001600160a01b0391821660009081526001602081815260408084209590941683529390935220805460ff19169091179055506200078b945050505050565b6000858152602081905260409020600181015460ff1615620004655760405162461bcd60e51b815260206004820152602a60248201527f4465626f6e64446174613a2063616e6e6f742061646420616e206578697374696044820152691b99c818db185cdcd25960b21b60648201526084015b60405180910390fd5b8581556001808201805460ff1916909117905584516200048f906002830190602088019062000619565b5060038101805485919060ff191660018381811115620004b357620004b362000739565b02179055506003810180546001600160a01b0390941661010002610100600160a81b03199094169390931790925560049182015580546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01929092555050565b600080826001600160a01b0316846001600160a01b031603620005905760405162461bcd60e51b815260206004820152602260248201527f4465626f6e644c6962726172793a204944454e544943414c5f41444452455353604482015261455360f01b60648201526084016200045c565b826001600160a01b0316846001600160a01b031610620005b2578284620005b5565b83835b90925090506001600160a01b038216620006125760405162461bcd60e51b815260206004820152601b60248201527f4465626f6e644c6962726172793a205a45524f5f41444452455353000000000060448201526064016200045c565b9250929050565b82805462000627906200074f565b90600052602060002090601f0160209004810192826200064b576000855562000696565b82601f106200066657805160ff191683800117855562000696565b8280016001018555821562000696579182015b828111156200069657825182559160200191906001019062000679565b50620006a4929150620006a8565b5090565b5b80821115620006a45760008155600101620006a9565b80516001600160a01b0381168114620006d757600080fd5b919050565b60008060008060808587031215620006f357600080fd5b620006fe85620006bf565b93506200070e60208601620006bf565b92506200071e60408601620006bf565b91506200072e60608601620006bf565b905092959194509250565b634e487b7160e01b600052602160045260246000fd5b600181811c908216806200076457607f821691505b6020821081036200078557634e487b7160e01b600052602260045260246000fd5b50919050565b610dcc806200079b6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638a38e419116100a2578063c766df1311610071578063c766df13146102ba578063c7f79eb4146101e5578063d190eaaf146102cf578063ef8448c4146102e2578063eff3e733146102ea57600080fd5b80638a38e41914610214578063941ed4e41461023c578063c012c6e614610245578063c60e219f146102a757600080fd5b806331d87e68116100e957806331d87e68146101aa57806343a560cb146101bd5780635cbf7179146101d2578063608643f5146101e5578063817dbe9f146101ed57600080fd5b806306ab3ae91461011b578063150358dc1461014357806323acd77f146101595780632ea1662814610187575b600080fd5b61012e6101293660046109c1565b6102fd565b60405190151581526020015b60405180910390f35b61014b607881565b60405190815260200161013a565b61012e6101673660046109c1565b600160209081526000928352604080842090915290825290205460ff1681565b61019a6101953660046109f4565b610340565b60405161013a9493929190610a92565b61014b6101b83660046109f4565b61040f565b6101d06101cb366004610af4565b610430565b005b61014b6101e0366004610bd8565b610560565b61014b600081565b6102006101fb3660046109f4565b610591565b60405161013a989796959493929190610bfa565b6102276102223660046109f4565b61066c565b6040805192835260208301919091520161013a565b61014b610e1081565b6101d0610253366004610c5b565b6001600160a01b039283166000818152600160208181526040808420969097168352948552858220805460ff1990811695151595861790915590855285822092825291909352929091208054909216179055565b6101d06102b5366004610ca7565b6106b5565b6102c26106f8565b60405161013a9190610cd3565b6102c26102dd3660046109f4565b610750565b6102c26107b2565b61014b6102f83660046109f4565b610808565b600080600061030c8585610818565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1695945050505050565b6000818152602081905260408120600281018054606093928392839261036590610d17565b80601f016020809104026020016040519081016040528092919081815260200182805461039190610d17565b80156103de5780601f106103b3576101008083540402835291602001916103de565b820191906000526020600020905b8154815290600101906020018083116103c157829003601f168201915b505050506004830154600390930154919860ff831698506101009092046001600160a01b0316965091945092505050565b6003818154811061041f57600080fd5b600091825260209091200154905081565b6000858152602081905260409020600181015460ff16156104ab5760405162461bcd60e51b815260206004820152602a60248201527f4465626f6e64446174613a2063616e6e6f742061646420616e206578697374696044820152691b99c818db185cdcd25960b21b60648201526084015b60405180910390fd5b8581556001808201805460ff1916909117905584516104d3906002830190602088019061090c565b5060038101805485919060ff1916600183818111156104f4576104f4610a5a565b02179055506003810180546001600160a01b0390941661010002610100600160a81b03199094169390931790925560049182015580546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01929092555050565b6002602052816000526040600020818154811061057c57600080fd5b90600052602060002001600091509150505481565b600060208190529081526040902080546001820154600283018054929360ff909216926105bd90610d17565b80601f01602080910402602001604051908101604052809291908181526020018280546105e990610d17565b80156106365780601f1061060b57610100808354040283529160200191610636565b820191906000526020600020905b81548152906001019060200180831161061957829003601f168201915b50505050600383015460048401546005850154600690950154939460ff8316946101009093046001600160a01b03169350909188565b6000818152602081905260408120600181015482919060ff166106a15760405162461bcd60e51b81526004016104a290610d51565b806005015492508060060154915050915091565b6000838152602081905260409020600181015460ff166106e75760405162461bcd60e51b81526004016104a290610d51565b600581019290925560069091015550565b6060600380548060200260200160405190810160405280929190818152602001828054801561074657602002820191906000526020600020905b815481526020019060010190808311610732575b5050505050905090565b6000818152600260209081526040918290208054835181840281018401909452808452606093928301828280156107a657602002820191906000526020600020905b815481526020019060010190808311610792575b50505050509050919050565b606060048054806020026020016040519081016040528092919081815260200182805480156107465760200282019190600052602060002090815481526020019060010190808311610732575050505050905090565b6004818154811061041f57600080fd5b600080826001600160a01b0316846001600160a01b0316036108875760405162461bcd60e51b815260206004820152602260248201527f4465626f6e644c6962726172793a204944454e544943414c5f41444452455353604482015261455360f01b60648201526084016104a2565b826001600160a01b0316846001600160a01b0316106108a75782846108aa565b83835b90925090506001600160a01b0382166109055760405162461bcd60e51b815260206004820152601b60248201527f4465626f6e644c6962726172793a205a45524f5f41444452455353000000000060448201526064016104a2565b9250929050565b82805461091890610d17565b90600052602060002090601f01602090048101928261093a5760008555610980565b82601f1061095357805160ff1916838001178555610980565b82800160010185558215610980579182015b82811115610980578251825591602001919060010190610965565b5061098c929150610990565b5090565b5b8082111561098c5760008155600101610991565b80356001600160a01b03811681146109bc57600080fd5b919050565b600080604083850312156109d457600080fd5b6109dd836109a5565b91506109eb602084016109a5565b90509250929050565b600060208284031215610a0657600080fd5b5035919050565b6000815180845260005b81811015610a3357602081850181015186830182015201610a17565b81811115610a45576000602083870101525b50601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b60028110610a8e57634e487b7160e01b600052602160045260246000fd5b9052565b608081526000610aa56080830187610a0d565b9050610ab46020830186610a70565b6001600160a01b039390931660408201526060015292915050565b634e487b7160e01b600052604160045260246000fd5b8035600281106109bc57600080fd5b600080600080600060a08688031215610b0c57600080fd5b85359450602086013567ffffffffffffffff80821115610b2b57600080fd5b818801915088601f830112610b3f57600080fd5b813581811115610b5157610b51610acf565b604051601f8201601f19908116603f01168101908382118183101715610b7957610b79610acf565b816040528281528b6020848701011115610b9257600080fd5b826020860160208301376000602084830101528098505050505050610bb960408701610ae5565b9250610bc7606087016109a5565b949793965091946080013592915050565b60008060408385031215610beb57600080fd5b50508035926020909101359150565b60006101008a83528915156020840152806040840152610c1c8184018a610a0d565b915050610c2c6060830188610a70565b6001600160a01b0395909516608082015260a081019390935260c083019190915260e090910152949350505050565b600080600060608486031215610c7057600080fd5b610c79846109a5565b9250610c87602085016109a5565b915060408401358015158114610c9c57600080fd5b809150509250925092565b600080600060608486031215610cbc57600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b81811015610d0b57835183529284019291840191600101610cef565b50909695505050505050565b600181811c90821680610d2b57607f821691505b602082108103610d4b57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526025908201527f4465626f6e6420446174613a20636c61737320696420676976656e206e6f7420604082015264199bdd5b9960da1b60608201526080019056fea26469706673582212202e7db849b005ec45079b79e43947e9e1e4a26febff651756007f521f1b645a9064736f6c634300080d0033";

type DebondDataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DebondDataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DebondData__factory extends ContractFactory {
  constructor(...args: DebondDataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "DebondData";
  }

  deploy(
    DBIT: string,
    USDC: string,
    USDT: string,
    DAI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DebondData> {
    return super.deploy(
      DBIT,
      USDC,
      USDT,
      DAI,
      overrides || {}
    ) as Promise<DebondData>;
  }
  getDeployTransaction(
    DBIT: string,
    USDC: string,
    USDT: string,
    DAI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(DBIT, USDC, USDT, DAI, overrides || {});
  }
  attach(address: string): DebondData {
    return super.attach(address) as DebondData;
  }
  connect(signer: Signer): DebondData__factory {
    return super.connect(signer) as DebondData__factory;
  }
  static readonly contractName: "DebondData";
  public readonly contractName: "DebondData";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DebondDataInterface {
    return new utils.Interface(_abi) as DebondDataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DebondData {
    return new Contract(address, _abi, signerOrProvider) as DebondData;
  }
}
