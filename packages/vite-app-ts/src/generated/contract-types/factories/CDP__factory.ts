/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CDP, CDPInterface } from "../CDP";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "dbitTotalSupply",
        type: "uint256",
      },
    ],
    name: "BondExchangeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "amount_bond",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountToken",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_dbitTotalSupply",
        type: "uint256",
      },
    ],
    name: "amountOfDBIT",
    outputs: [
      {
        internalType: "uint256",
        name: "amountDBIT",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6102dd61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80637e2cf8cd146100455780638ca925121461006a575b600080fd5b610058610053366004610226565b61007d565b60405190815260200160405180910390f35b61005861007836600461023f565b6101b0565b6000620186a08210156100995750670de0b6b3a7640000919050565b600073__$171e2470cf6965da0fb3593a90051e207b$__6324d4e90a6100c5856509184e72a000610261565b6040518263ffffffff1660e01b81526004016100e391815260200190565b602060405180830381865af4158015610100573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610124919061028e565b604051632e4c697f60e01b8152670e92596fd629000060048201526024810182905290915073__$171e2470cf6965da0fb3593a90051e207b$__90632e4c697f90604401602060405180830381865af4158015610185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a9919061028e565b9392505050565b60008083116102055760405162461bcd60e51b815260206004820152601b60248201527f4465626f6e643a2050726f7669646520736f6d6520746f6b656e730000000000604482015260640160405180910390fd5b8260006102118461007d565b905061021d8183610261565b95945050505050565b60006020828403121561023857600080fd5b5035919050565b6000806040838503121561025257600080fd5b50508035926020909101359150565b600081600019048311821515161561028957634e487b7160e01b600052601160045260246000fd5b500290565b6000602082840312156102a057600080fd5b505191905056fea2646970667358221220a5c129ee2d90a2c703e51ff3626ed7dbb0ba19c5379c7ab53c6dea667b997e6a64736f6c634300080d0033";

type CDPConstructorParams =
  | [linkLibraryAddresses: CDPLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CDPConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class CDP__factory extends ContractFactory {
  constructor(...args: CDPConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, CDP__factory.linkBytecode(linkLibraryAddresses), signer);
    }
    this.contractName = "CDP";
  }

  static linkBytecode(linkLibraryAddresses: CDPLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$171e2470cf6965da0fb3593a90051e207b\\$__", "g"),
      linkLibraryAddresses[
        "contracts/Debond-v0/contracts/libraries/SafeMath.sol:SafeMath"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CDP> {
    return super.deploy(overrides || {}) as Promise<CDP>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CDP {
    return super.attach(address) as CDP;
  }
  connect(signer: Signer): CDP__factory {
    return super.connect(signer) as CDP__factory;
  }
  static readonly contractName: "CDP";
  public readonly contractName: "CDP";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CDPInterface {
    return new utils.Interface(_abi) as CDPInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): CDP {
    return new Contract(address, _abi, signerOrProvider) as CDP;
  }
}

export interface CDPLibraryAddresses {
  ["contracts/Debond-v0/contracts/libraries/SafeMath.sol:SafeMath"]: string;
}
