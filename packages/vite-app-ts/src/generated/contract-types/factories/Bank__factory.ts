/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Bank, BankInterface } from "../Bank";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "apmAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "dataAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "bondAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "BASE_TIMESTAMP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DIFF_TIME_NEW_NONCE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
    ],
    name: "amountOfDBITToMint",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToMint",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_purchaseTokenClassId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_debondTokenClassId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_purchaseTokenAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_debondTokenMinAmount",
        type: "uint256",
      },
      {
        internalType: "enum Bank.PurchaseMethod",
        name: "purchaseMethod",
        type: "uint8",
      },
    ],
    name: "buyBond",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_TokenClassId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_TokenNonceId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sellBonds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161115138038061115183398101604081905261002f9161008d565b600080546001600160a01b039485166001600160a01b0319918216179091556001805493851693821693909317909255600280549190931691161790556100d0565b80516001600160a01b038116811461008857600080fd5b919050565b6000806000606084860312156100a257600080fd5b6100ab84610071565b92506100b960208501610071565b91506100c760408501610071565b90509250925092565b611072806100df6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80633ff2f59d14610067578063664e9704146100835780637127a82f1461008b5780637689700f1461009c578063b7aae6b7146100b1578063caa47d60146100c4575b600080fd5b6100716201518081565b60405190815260200160405180910390f35b610071600581565b610071610099366004610d32565b90565b6100af6100aa366004610d4b565b6100cf565b005b6100af6100bf366004610d87565b610279565b61007163621d53f081565b60025460405163ea2092f360e01b81523360048201526024810185905260448101849052606481018390526001600160a01b039091169063ea2092f390608401600060405180830381600087803b15801561012957600080fd5b505af115801561013d573d6000803e3d6000fd5b50506001546040516305d42cc560e31b815260048101879052600093508392506001600160a01b0390911690632ea1662890602401600060405180830381865afa15801561018f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101b79190810190610e11565b509093509150600090508260018111156101d3576101d3610f0c565b0361025b576000546040516323b872dd60e01b81526001600160a01b03918216600482015233602482015260448101859052908216906323b872dd906064016020604051808303816000875af1158015610231573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102559190610f22565b50610272565b600182600181111561026f5761026f610f0c565b50505b5050505050565b6001546040516305d42cc560e31b81526004810187905286918691869186916000916001600160a01b031690632ea1662890602401600060405180830381865afa1580156102cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102f39190810190610e11565b506001546040516305d42cc560e31b815260048101899052919450600093506001600160a01b03169150632ea1662890602401600060405180830381865afa158015610343573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261036b9190810190610e11565b506001546040516306ab3ae960e01b81526001600160a01b0387811660048301528084166024830152929550911692506306ab3ae99150604401602060405180830381865afa1580156103c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e69190610f22565b61042a5760405162461bcd60e51b815260206004820152601060248201526f14185a5c881b9bdd08105b1b1bddd95960821b60448201526064015b60405180910390fd5b6000610435856108e1565b6000546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018890529192508416906323b872dd906064016020604051808303816000875af1158015610490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b49190610f22565b506000546040516340c10f1960e01b81526001600160a01b03918216600482015260248101839052908316906340c10f1990604401600060405180830381600087803b15801561050357600080fd5b505af1158015610517573d6000803e3d6000fd5b5060019250610524915050565b88600181111561053657610536610f0c565b0361065f576105463388876108ed565b6000805460405163c9a396e960e01b81526001600160a01b0386811660048301528392169063c9a396e990602401602060405180830381865afa158015610591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b59190610f44565b60005460405163c9a396e960e01b81526001600160a01b0387811660048301529091169063c9a396e990602401602060405180830381865afa1580156105ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106239190610f44565b9150915060006106348884846109e0565b9050610657338a6064610648600586610f73565b6106529190610fa8565b6108ed565b505050610792565b600088600181111561067357610673610f0c565b03610792576000805460405163c9a396e960e01b81526001600160a01b0386811660048301528392169063c9a396e990602401602060405180830381865afa1580156106c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e79190610f44565b60005460405163c9a396e960e01b81526001600160a01b0387811660048301529091169063c9a396e990602401602060405180830381865afa158015610731573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107559190610f44565b9150915060006107668884846109e0565b905061078e338a606461077a600586610f73565b6107849190610fa8565b6106529085610fbc565b5050505b600054604051632209834360e21b81526001600160a01b03848116600483015260248201849052909116906388260d0c90604401600060405180830381600087803b1580156107e057600080fd5b505af11580156107f4573d6000803e3d6000fd5b5050600054604051632209834360e21b81526001600160a01b038781166004830152602482018a905290911692506388260d0c9150604401600060405180830381600087803b15801561084657600080fd5b505af115801561085a573d6000803e3d6000fd5b50506000546040516399483ecb60e01b81526001600160a01b038681166004830152878116602483015260448201869052606482018a905290911692506399483ecb9150608401600060405180830381600087803b1580156108bb57600080fd5b505af11580156108cf573d6000803e3d6000fd5b50505050505050505050505050505050565b600080825b9392505050565b6108f682610ac1565b600154604051638a38e41960e01b8152600481018490526000916001600160a01b031690638a38e419906024016040805180830381865afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190610fd4565b506002546040516347401a9360e01b81526001600160a01b0387811660048301526024820187905260448201849052606482018690529293509116906347401a9390608401600060405180830381600087803b1580156109c257600080fd5b505af11580156109d6573d6000803e3d6000fd5b5050505050505050565b6000808411610a3c5760405162461bcd60e51b815260206004820152602260248201527f4465626f6e644c6962726172793a20494e53554646494349454e545f414d4f55604482015261139560f21b6064820152608401610421565b600083118015610a4c5750600082115b610aa65760405162461bcd60e51b815260206004820152602560248201527f4465626f6e644c6962726172793a20494e53554646494349454e545f4c495155604482015264494449545960d81b6064820152608401610421565b610ab9610ab38386610f73565b84610ba3565b949350505050565b600154604051638a38e41960e01b815260048101839052429160009182916001600160a01b031690638a38e419906024016040805180830381865afa158015610b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b329190610fd4565b909250905062015180610b458285610ff8565b10610b5b57610b55848385610baf565b50505050565b600062015180610b6f63621d53f086610ff8565b610b79919061100f565b905062015180610b898386610ff8565b610b939083610fbc565b1061027257610272858486610baf565b60006108e68284610fa8565b600082610bbb81611023565b6001546040516305d42cc560e31b8152600481018890529195509192506000916001600160a01b031690632ea1662890602401600060405180830381865afa158015610c0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c339190810190610e11565b6002549094506001600160a01b0316925063d23a95de915087905084610c598588610fbc565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526101f46064820152608401600060405180830381600087803b158015610ca757600080fd5b505af1158015610cbb573d6000803e3d6000fd5b505060015460405163c60e219f60e01b81526004810189905260248101869052604481018790526001600160a01b03909116925063c60e219f9150606401600060405180830381600087803b158015610d1357600080fd5b505af1158015610d27573d6000803e3d6000fd5b505050505050505050565b600060208284031215610d4457600080fd5b5035919050565b600080600060608486031215610d6057600080fd5b505081359360208301359350604090920135919050565b60028110610d8457600080fd5b50565b600080600080600060a08688031215610d9f57600080fd5b853594506020860135935060408601359250606086013591506080860135610dc681610d77565b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b8051610df581610d77565b919050565b80516001600160a01b0381168114610df557600080fd5b60008060008060808587031215610e2757600080fd5b845167ffffffffffffffff80821115610e3f57600080fd5b818701915087601f830112610e5357600080fd5b815181811115610e6557610e65610dd4565b604051601f8201601f19908116603f01168101908382118183101715610e8d57610e8d610dd4565b81604052828152602093508a84848701011115610ea957600080fd5b600091505b82821015610ecb5784820184015181830185015290830190610eae565b82821115610edc5760008484830101525b9750610eec915050878201610dea565b94505050610efc60408601610dfa565b6060959095015193969295505050565b634e487b7160e01b600052602160045260246000fd5b600060208284031215610f3457600080fd5b815180151581146108e657600080fd5b600060208284031215610f5657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610f8d57610f8d610f5d565b500290565b634e487b7160e01b600052601260045260246000fd5b600082610fb757610fb7610f92565b500490565b60008219821115610fcf57610fcf610f5d565b500190565b60008060408385031215610fe757600080fd5b505080516020909101519092909150565b60008282101561100a5761100a610f5d565b500390565b60008261101e5761101e610f92565b500690565b60006001820161103557611035610f5d565b506001019056fea264697066735822122015494ebc4edabc0b88d9cf25c119d03e6d4bd4d3d9401b36dfa4e82b7898d02c64736f6c634300080d0033";

type BankConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BankConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bank__factory extends ContractFactory {
  constructor(...args: BankConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Bank";
  }

  deploy(
    apmAddress: string,
    dataAddress: string,
    bondAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Bank> {
    return super.deploy(
      apmAddress,
      dataAddress,
      bondAddress,
      overrides || {}
    ) as Promise<Bank>;
  }
  getDeployTransaction(
    apmAddress: string,
    dataAddress: string,
    bondAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      apmAddress,
      dataAddress,
      bondAddress,
      overrides || {}
    );
  }
  attach(address: string): Bank {
    return super.attach(address) as Bank;
  }
  connect(signer: Signer): Bank__factory {
    return super.connect(signer) as Bank__factory;
  }
  static readonly contractName: "Bank";
  public readonly contractName: "Bank";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BankInterface {
    return new utils.Interface(_abi) as BankInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Bank {
    return new Contract(address, _abi, signerOrProvider) as Bank;
  }
}
