/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { FakeOracle, FakeOracleInterface } from '../FakeOracle';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'tokenIn',
        type: 'address',
      },
      {
        internalType: 'uint128',
        name: 'amountIn',
        type: 'uint128',
      },
      {
        internalType: 'address',
        name: 'tokenOut',
        type: 'address',
      },
      {
        internalType: 'uint32',
        name: 'secondsAgo',
        type: 'uint32',
      },
    ],
    name: 'estimateAmountOut',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountOut',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061016b806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063beb3dd3f14610030575b600080fd5b61004361003e366004610094565b610055565b60405190815260200160405180910390f35b600061006664e8d4a5100085610101565b6001600160801b031695945050505050565b80356001600160a01b038116811461008f57600080fd5b919050565b600080600080608085870312156100aa57600080fd5b6100b385610078565b935060208501356001600160801b03811681146100cf57600080fd5b92506100dd60408601610078565b9150606085013563ffffffff811681146100f657600080fd5b939692955090935050565b60006001600160801b038084168061012957634e487b7160e01b600052601260045260246000fd5b9216919091049291505056fea2646970667358221220605fc2d2410a8241452a7447aaec775eb5b156804123900903b8cf911e0e978964736f6c634300080d0033';

type FakeOracleConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: FakeOracleConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class FakeOracle__factory extends ContractFactory {
  constructor(...args: FakeOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'FakeOracle';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<FakeOracle> {
    return super.deploy(overrides || {}) as Promise<FakeOracle>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FakeOracle {
    return super.attach(address) as FakeOracle;
  }
  connect(signer: Signer): FakeOracle__factory {
    return super.connect(signer) as FakeOracle__factory;
  }
  static readonly contractName: 'FakeOracle';
  public readonly contractName: 'FakeOracle';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FakeOracleInterface {
    return new utils.Interface(_abi) as FakeOracleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FakeOracle {
    return new Contract(address, _abi, signerOrProvider) as FakeOracle;
  }
}
