{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oldVlp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVlpToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalReserveToken",
          "type": "uint256"
        }
      ],
      "name": "amountToAddVlp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newVlp",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oldVlp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVlpToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalReserveToken",
          "type": "uint256"
        }
      ],
      "name": "amountToRemoveVlp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newVlp",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getVlps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "vlpA",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount0Out",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1Out",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateTotalReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "updateWhenAddLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "updateWhenRemoveLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountAAdded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "updateWhenSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x93e1179c748433682a37d9013c9ac7e43cb80e120318cd4a44322f07ea5fc38a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "1028218",
    "logsBloom": "0x
    "blockHash": "0xe7de97294f50adae5e45dbd6c1488e730b91c62abf84c4f130fa4d92320c883b",
    "transactionHash": "0x93e1179c748433682a37d9013c9ac7e43cb80e120318cd4a44322f07ea5fc38a",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "1028218",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "38817cb41b79540a5b058d9672f7da4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldVlp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVlpToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserveToken\",\"type\":\"uint256\"}],\"name\":\"amountToAddVlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newVlp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldVlp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVlpToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserveToken\",\"type\":\"uint256\"}],\"name\":\"amountToRemoveVlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newVlp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getVlps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vlpA\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateTotalReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"updateWhenAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateWhenRemoveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"updateWhenSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Debond-v0/contracts/APM.sol\":\"APM\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"contracts/Debond-v0/contracts/APM.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\nimport \\\"./interfaces/IAPM.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ncontract APM is IAPM {\\n    using SafeMath for uint256; //check this, maybe prbmath, see with cedric \\n\\n    mapping(address => uint256) internal totalReserve;\\n    mapping(address => uint256) internal totalVlp; //Vlp : virtual liquidity pool\\n    //mapping(address => mapping( address => Pair) ) pairs;\\n    mapping(address => mapping( address => uint) ) vlp;\\n\\n\\n    struct UpdateData { //to avoid stack too deep error\\n        uint amountA;\\n        uint amountB;\\n        address tokenA;\\n        address tokenB;\\n    }\\n\\n    function getReservesOneToken(\\n        address tokenA, //token we want to know reserve\\n        address tokenB //pool associated\\n    ) private view returns (uint reserveA) {\\n        uint totalVlpA = totalVlp[tokenA]; //gas saving\\n        if( totalVlpA != 0){\\n            uint vlpA = vlp[tokenA][tokenB];\\n            reserveA = vlpA * totalReserve[tokenA] / totalVlpA; //use mulDiv?\\n        }\\n    }\\n    function getReserves(\\n        address tokenA,\\n        address tokenB\\n    ) public override view returns (uint reserveA, uint reserveB) {\\n        (reserveA, reserveB) = (getReservesOneToken(tokenA, tokenB), getReservesOneToken(tokenB, tokenA) );\\n    }\\n    function updateTotalReserve(address tokenAddress, uint amount) public {\\n            totalReserve[tokenAddress] = totalReserve[tokenAddress] + amount;\\n    }\\n    function getVlps(address tokenA, address tokenB) public view returns (uint vlpA) {\\n        vlpA = vlp[tokenA][tokenB];\\n    }\\n    function updateWhenAddLiquidityOneToken(\\n        uint amountA,\\n        address tokenA,\\n        address tokenB) private { \\n            \\n        //require(msg.sender == bankAddress, \\\"not authorized\\\");\\n\\n        UpdateData memory updateData;\\n        updateData.amountA = amountA;\\n        updateData.tokenA = tokenA;\\n        updateData.tokenB = tokenB;\\n\\n        uint totalReserveA = totalReserve[updateData.tokenA];//gas saving\\n\\n        if(totalReserveA != 0){\\n            //update Vlp\\n            uint oldVlpA = vlp[tokenA][tokenB];  //for update total vlp\\n            uint totalVlpA = totalVlp[updateData.tokenA]; //save gas\\n\\n            uint vlpA = amountToAddVlp(oldVlpA, updateData.amountA, totalVlpA, totalReserveA);\\n            vlp[tokenA][tokenB] = vlpA;\\n\\n            //update total vlp\\n            totalVlp[updateData.tokenA] = totalVlpA - oldVlpA + vlpA;\\n        }\\n        else {\\n            vlp[tokenA][tokenB] = amountA;\\n            totalVlp[updateData.tokenA] = updateData.amountA;\\n        }\\n        totalReserve[updateData.tokenA] = totalReserveA + updateData.amountA;\\n    }\\n    function updateWhenAddLiquidity(\\n        uint amountA,\\n        uint amountB,\\n        address tokenA,\\n        address tokenB) external { //TODO : restrict update functions for bank only, using assert/require and not modifiers\\n        updateWhenAddLiquidityOneToken(amountA, tokenA, tokenB);\\n        updateWhenAddLiquidityOneToken(amountB, tokenB, tokenA);\\n    }\\n    function updateWhenRemoveLiquidityOneToken(\\n        uint amountA,\\n        address tokenA,\\n        address tokenB) private { \\n\\n        //require(msg.sender == bankAddress, \\\"not authorized\\\");\\n\\n        UpdateData memory updateData;\\n        updateData.amountA = amountA;\\n        updateData.tokenA = tokenA;\\n        updateData.tokenB = tokenB;\\n\\n        uint totalReserveA = totalReserve[updateData.tokenA];//gas saving\\n\\n        if(totalReserveA != 0){\\n            //update Vlp\\n            uint oldVlpA = vlp[tokenA][tokenB];  //for update total vlp\\n            uint totalVlpA = totalVlp[updateData.tokenA]; //save gas\\n\\n            uint vlpA = amountToRemoveVlp(oldVlpA, updateData.amountA, totalVlpA, totalReserveA);\\n            vlp[tokenA][tokenB] = vlpA;\\n\\n            //update total vlp\\n            totalVlp[updateData.tokenA] = totalVlpA - oldVlpA + vlpA;\\n        }\\n        else {\\n            vlp[tokenA][tokenB] = amountA;\\n            totalVlp[updateData.tokenA] = updateData.amountA;\\n        }\\n        totalReserve[updateData.tokenA] = totalReserveA - updateData.amountA;\\n    }\\n    function updateWhenRemoveLiquidity(\\n        uint amount, //amountA is the amount of tokenA removed in total pool reserve ( so not the total amount of tokenA in total pool reserve)\\n        address token) external {\\n        //require(msg.sender == bankAddress, \\\"not authorized\\\");\\n\\n        totalReserve[token] -= amount;\\n    }\\n    function updateWhenSwap(\\n        uint amountAAdded, //amountA is the amount of tokenA swapped in this pool ( so not the total amount of tokenA in this pool after the swap)\\n        uint amountBWithdrawn,\\n        address tokenA,\\n        address tokenB) public { \\n        //require(msg.sender == bankAddress or APM, \\\"not authorized\\\");\\n\\n        updateWhenAddLiquidityOneToken(amountAAdded, tokenA, tokenB);\\n        updateWhenRemoveLiquidityOneToken(amountBWithdrawn, tokenB, tokenA);\\n    }\\n    function amountToAddVlp(uint oldVlp, uint amount, uint totalVlpToken, uint totalReserveToken) public pure returns (uint newVlp) {\\n        newVlp = oldVlp + amount * totalVlpToken / totalReserveToken;\\n    }\\n    function amountToRemoveVlp(uint oldVlp, uint amount, uint totalVlpToken, uint totalReserveToken) public pure returns (uint newVlp) {\\n        newVlp = oldVlp - amount * totalVlpToken / totalReserveToken;\\n    }\\n    struct SwapData { //to avoid stack too deep error\\n        uint totalReserve0;\\n        uint totalReserve1;\\n        uint currentReserve0;\\n        uint currentReserve1;\\n        uint amount0In;\\n        uint amount1In;\\n    }\\n    \\n    function swap(uint amount0Out, uint amount1Out,address token0, address token1, address to) external { //no need to have both amount >0, there is always one equals to 0 (according to yu).\\n        require( (amount0Out != 0 && amount1Out == 0)|| (amount0Out == 0 && amount1Out != 0), 'APM swap: INSUFFICIENT_OUTPUT_AMOUNT_Or_Both_output >0');\\n        (uint _reserve0, uint _reserve1) = getReserves(token0, token1); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'APM swap: INSUFFICIENT_LIQUIDITY');\\n\\n        SwapData memory swapData;\\n        require(to != token0 && to != token1, 'APM swap: INVALID_TO'); // do we really need this?\\n        swapData.totalReserve0 = IERC20(token0).balanceOf(address(this));\\n        swapData.totalReserve1 = IERC20(token1).balanceOf(address(this));\\n        swapData.currentReserve0 = _reserve0 + swapData.totalReserve0 - totalReserve[token0]; // should be >= 0\\n        swapData.currentReserve1 = _reserve1 + swapData.totalReserve1 - totalReserve[token1];\\n\\n        swapData.amount0In = swapData.currentReserve0 > _reserve0 - amount0Out ? swapData.currentReserve0 - (_reserve0 - amount0Out) : 0;\\n        swapData.amount1In = swapData.currentReserve1 > _reserve1 - amount1Out ? swapData.currentReserve1 - (_reserve1 - amount1Out) : 0;\\n        require(swapData.amount0In > 0 || swapData.amount1In > 0, 'APM swap: INSUFFICIENT_INPUT_AMOUNT');\\n        require(swapData.currentReserve0 * swapData.currentReserve1 >= _reserve0 * _reserve1, 'APM swap: K');\\n        if (amount0Out == 0) {\\n            if (amount1Out != 0) IERC20(token1).transferFrom(address(this), to, amount1Out); //use of != because uint, cheaper than >\\n            updateWhenSwap(swapData.amount0In, amount1Out, token0, token1);\\n        }\\n        else{\\n            if (amount0Out != 0) IERC20(token0).transferFrom(address(this), to, amount0Out);\\n            updateWhenSwap(swapData.amount1In, amount0Out, token1, token0);\\n        }\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'DebondLibrary: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'DebondLibrary: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = amountIn * reserveOut;\\n        uint denominator = reserveIn + amountIn;\\n        amountOut = numerator / denominator;\\n    }\\n    \\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i < path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\\n\",\"keccak256\":\"0xafbc4151f3fb155d0fe89990c6d7a861360ea7b5913459b6fe99265300d1bde1\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/interfaces/IAPM.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\ninterface IAPM {\\n\\n    function getReserves(address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n\\n    function updateWhenAddLiquidity(\\n        uint _amountA, \\n        uint _amountB,\\n        address _tokenA,\\n        address _tokenB) external;\\n\\n    function updateWhenRemoveLiquidity(\\n        uint amount, \\n        address token) external;\\n\\n    function updateWhenSwap(\\n        uint amountAAdded, \\n        uint amountBWithdrawn,\\n        address _tokenA,\\n        address _tokenB) external;\\n\\n    function swap(uint amount0Out, uint amount1Out,address token0, address token1, address to) external;\\n\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n\\n    function updateTotalReserve(address tokenAddress, uint amount) external;\\n}\\n\",\"keccak256\":\"0x89547d4d02e2d9069e236f9573446a763f1de91cd4cd92c7af3c8b5074846785\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\n// DappHub (https://github.com/dapphub/ds-math)\\nlibrary SafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul0(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    function ln(uint256 x) public pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * 1e18) / 1_442695040888963407;\\n        }\\n    }\\n\\n    function pow(uint256 x, uint256 y) public pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? 1e18 : uint256(0);\\n        } else {\\n            result = exp2(mul2(log2(x), y));\\n        }\\n    }\\n\\n    function mul2(uint256 x, uint256 y) public pure returns (uint256 result) {\\n        result = mulDivFixedPoint(x, y);\\n    }\\n\\n    function mulDivFixedPoint(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= 1e18) {\\n            revert();\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        uint256 SCALE = 1e18;\\n        uint256 SCALE_LPOTD = 262144;\\n        uint256 SCALE_INVERSE = 78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / 1e18) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(\\n                            sub(prod1, gt(remainder, prod0)),\\n                            add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1)\\n                        )\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    function exp2(uint256 x) public pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert();\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / 1e18;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = exp2p(x192x64);\\n        }\\n    }\\n\\n    function log2(uint256 x) public pure returns (uint256 result) {\\n        if (x < 1e18) {\\n            revert();\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = mostSignificantBit(x / 1e18);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * 1e18;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == 1e18) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = 5e17; delta > 0; delta >>= 1) {\\n                y = (y * y) / 1e18;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * 1e18) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    function exp2p(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= 1e18;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3202d24172ce737d2593f648857b4a4ba666d5e7f1a82b80203331d46cf2cac5\",\"license\":\"apache 2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506111a4806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b05e9e0f11610066578063b05e9e0f14610117578063d06ca61f1461012a578063d52bb6f41461014a578063d5855a0014610172578063eab90da6146101ab57600080fd5b80633b730df1146100a35780633f056cc6146100b857806347f62a9d146100cb5780634c9bd2cb146100f15780637921709314610104575b600080fd5b6100b66100b1366004610dfd565b6101be565b005b6100b66100c6366004610dfd565b6101da565b6100de6100d9366004610e43565b6101f0565b6040519081526020015b60405180910390f35b6100de6100ff366004610e43565b61021a565b6100b6610112366004610e75565b61023b565b6100b6610125366004610e9f565b61027f565b61013d610138366004610ee1565b6102b0565b6040516100e89190610fb2565b61015d610158366004610ff6565b61043e565b604080519283526020830191909152016100e8565b6100de610180366004610ff6565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6100b66101b9366004611020565b610460565b6101c98483836109c0565b6101d48382846109c0565b50505050565b6101e58483836109c0565b6101d4838284610b15565b6000816101fd848661108d565b61020791906110ac565b61021190866110ce565b95945050505050565b600081610227848661108d565b61023191906110ac565b61021190866110e6565b6001600160a01b03821660009081526020819052604090205461025f9082906110ce565b6001600160a01b0390921660009081526020819052604090209190915550565b6001600160a01b038116600090815260208190526040812080548492906102a79084906110e6565b90915550505050565b60606002825110156103095760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f50415448000060448201526064015b60405180910390fd5b815167ffffffffffffffff81111561032357610323610ecb565b60405190808252806020026020018201604052801561034c578160200160208202803683370190505b5090508281600081518110610363576103636110fd565b60200260200101818152505060005b6001835161038091906110e6565b811015610437576000806103d285848151811061039f5761039f6110fd565b6020026020010151868560016103b591906110ce565b815181106103c5576103c56110fd565b602002602001015161043e565b915091506103fa8484815181106103eb576103eb6110fd565b60200260200101518383610c43565b846104068560016110ce565b81518110610416576104166110fd565b6020026020010181815250505050808061042f90611113565b915050610372565b5092915050565b60008061044b8484610d3f565b6104558486610d3f565b909590945092505050565b841580159061046d575083155b8061048057508415801561048057508315155b6104eb5760405162461bcd60e51b815260206004820152603660248201527f41504d20737761703a20494e53554646494349454e545f4f55545055545f414d60448201527504f554e545f4f725f426f74685f6f7574707574203e360541b6064820152608401610300565b6000806104f8858561043e565b91509150818710801561050a57508086105b6105565760405162461bcd60e51b815260206004820181905260248201527f41504d20737761703a20494e53554646494349454e545f4c49515549444954596044820152606401610300565b61058f6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b856001600160a01b0316846001600160a01b0316141580156105c35750846001600160a01b0316846001600160a01b031614155b6106065760405162461bcd60e51b815260206004820152601460248201527341504d20737761703a20494e56414c49445f544f60601b6044820152606401610300565b6040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa15801561064a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066e919061112c565b81526040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa1580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d8919061112c565b6020808301919091526001600160a01b0387166000908152908190526040902054815161070590856110ce565b61070f91906110e6565b6040808301919091526001600160a01b03861660009081526020818152919020549082015161073e90846110ce565b61074891906110e6565b606082015261075788846110e6565b816040015111610768576000610781565b61077288846110e6565b816040015161078191906110e6565b608082015261079087836110e6565b8160600151116107a15760006107ba565b6107ab87836110e6565b81606001516107ba91906110e6565b60a082015260808101511515806107d5575060008160a00151115b61082d5760405162461bcd60e51b815260206004820152602360248201527f41504d20737761703a20494e53554646494349454e545f494e5055545f414d4f60448201526215539560ea1b6064820152608401610300565b610837828461108d565b8160600151826040015161084b919061108d565b10156108875760405162461bcd60e51b815260206004820152600b60248201526a41504d20737761703a204b60a81b6044820152606401610300565b87600003610925578615610910576040516323b872dd60e01b81523060048201526001600160a01b038581166024830152604482018990528616906323b872dd906064016020604051808303816000875af11580156108ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090e9190611145565b505b61092081608001518888886101da565b6109b6565b87156109a6576040516323b872dd60e01b81523060048201526001600160a01b038581166024830152604482018a90528716906323b872dd906064016020604051808303816000875af1158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a49190611145565b505b6109b68160a001518987896101da565b5050505050505050565b6109c8610da7565b8381526001600160a01b03808416604080840182905291841660608401526000908152602081905220548015610aa5576001600160a01b038085166000908152600260209081526040808320878516845282528083205486820151909416835260019091528120548451909190610a4290849084876101f0565b6001600160a01b038089166000908152600260209081526040808320938b16835292905220819055905080610a7784846110e6565b610a8191906110ce565b6040808701516001600160a01b031660009081526001602052205550610ae2915050565b6001600160a01b03808516600090815260026020908152604080832087851684528252808320899055855186820151909416835260019091529020555b8151610aee90826110ce565b6040928301516001600160a01b031660009081526020819052929092209190915550505050565b610b1d610da7565b8381526001600160a01b03808416604080840182905291841660608401526000908152602081905220548015610bfa576001600160a01b038085166000908152600260209081526040808320878516845282528083205486820151909416835260019091528120548451909190610b97908490848761021a565b6001600160a01b038089166000908152600260209081526040808320938b16835292905220819055905080610bcc84846110e6565b610bd691906110ce565b6040808701516001600160a01b031660009081526001602052205550610c37915050565b6001600160a01b03808516600090815260026020908152604080832087851684528252808320899055855186820151909416835260019091529020555b8151610aee90826110e6565b6000808411610ca55760405162461bcd60e51b815260206004820152602860248201527f4465626f6e644c6962726172793a20494e53554646494349454e545f494e50556044820152671517d05353d5539560c21b6064820152608401610300565b600083118015610cb55750600082115b610d0f5760405162461bcd60e51b815260206004820152602560248201527f4465626f6e644c6962726172793a20494e53554646494349454e545f4c495155604482015264494449545960d81b6064820152608401610300565b6000610d1b838661108d565b90506000610d2986866110ce565b9050610d3581836110ac565b9695505050505050565b6001600160a01b0382166000908152600160205260408120548015610437576001600160a01b03808516600081815260026020908152604080832094881683529381528382205492825281905291909120548290610d9d908361108d565b61021191906110ac565b6040518060800160405280600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b80356001600160a01b0381168114610df857600080fd5b919050565b60008060008060808587031215610e1357600080fd5b8435935060208501359250610e2a60408601610de1565b9150610e3860608601610de1565b905092959194509250565b60008060008060808587031215610e5957600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215610e8857600080fd5b610e9183610de1565b946020939093013593505050565b60008060408385031215610eb257600080fd5b82359150610ec260208401610de1565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610ef457600080fd5b8235915060208084013567ffffffffffffffff80821115610f1457600080fd5b818601915086601f830112610f2857600080fd5b813581811115610f3a57610f3a610ecb565b8060051b604051601f19603f83011681018181108582111715610f5f57610f5f610ecb565b604052918252848201925083810185019189831115610f7d57600080fd5b938501935b82851015610fa257610f9385610de1565b84529385019392850192610f82565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b81811015610fea57835183529284019291840191600101610fce565b50909695505050505050565b6000806040838503121561100957600080fd5b61101283610de1565b9150610ec260208401610de1565b600080600080600060a0868803121561103857600080fd5b853594506020860135935061104f60408701610de1565b925061105d60608701610de1565b915061106b60808701610de1565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156110a7576110a7611077565b500290565b6000826110c957634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156110e1576110e1611077565b500190565b6000828210156110f8576110f8611077565b500390565b634e487b7160e01b600052603260045260246000fd5b60006001820161112557611125611077565b5060010190565b60006020828403121561113e57600080fd5b5051919050565b60006020828403121561115757600080fd5b8151801515811461116757600080fd5b939250505056fea26469706673582212202f9e708e00bd866e7cf23b6ba3f60c14a35e8f37578a633ff0500f3f4c9f6b4b64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b05e9e0f11610066578063b05e9e0f14610117578063d06ca61f1461012a578063d52bb6f41461014a578063d5855a0014610172578063eab90da6146101ab57600080fd5b80633b730df1146100a35780633f056cc6146100b857806347f62a9d146100cb5780634c9bd2cb146100f15780637921709314610104575b600080fd5b6100b66100b1366004610dfd565b6101be565b005b6100b66100c6366004610dfd565b6101da565b6100de6100d9366004610e43565b6101f0565b6040519081526020015b60405180910390f35b6100de6100ff366004610e43565b61021a565b6100b6610112366004610e75565b61023b565b6100b6610125366004610e9f565b61027f565b61013d610138366004610ee1565b6102b0565b6040516100e89190610fb2565b61015d610158366004610ff6565b61043e565b604080519283526020830191909152016100e8565b6100de610180366004610ff6565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6100b66101b9366004611020565b610460565b6101c98483836109c0565b6101d48382846109c0565b50505050565b6101e58483836109c0565b6101d4838284610b15565b6000816101fd848661108d565b61020791906110ac565b61021190866110ce565b95945050505050565b600081610227848661108d565b61023191906110ac565b61021190866110e6565b6001600160a01b03821660009081526020819052604090205461025f9082906110ce565b6001600160a01b0390921660009081526020819052604090209190915550565b6001600160a01b038116600090815260208190526040812080548492906102a79084906110e6565b90915550505050565b60606002825110156103095760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f50415448000060448201526064015b60405180910390fd5b815167ffffffffffffffff81111561032357610323610ecb565b60405190808252806020026020018201604052801561034c578160200160208202803683370190505b5090508281600081518110610363576103636110fd565b60200260200101818152505060005b6001835161038091906110e6565b811015610437576000806103d285848151811061039f5761039f6110fd565b6020026020010151868560016103b591906110ce565b815181106103c5576103c56110fd565b602002602001015161043e565b915091506103fa8484815181106103eb576103eb6110fd565b60200260200101518383610c43565b846104068560016110ce565b81518110610416576104166110fd565b6020026020010181815250505050808061042f90611113565b915050610372565b5092915050565b60008061044b8484610d3f565b6104558486610d3f565b909590945092505050565b841580159061046d575083155b8061048057508415801561048057508315155b6104eb5760405162461bcd60e51b815260206004820152603660248201527f41504d20737761703a20494e53554646494349454e545f4f55545055545f414d60448201527504f554e545f4f725f426f74685f6f7574707574203e360541b6064820152608401610300565b6000806104f8858561043e565b91509150818710801561050a57508086105b6105565760405162461bcd60e51b815260206004820181905260248201527f41504d20737761703a20494e53554646494349454e545f4c49515549444954596044820152606401610300565b61058f6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b856001600160a01b0316846001600160a01b0316141580156105c35750846001600160a01b0316846001600160a01b031614155b6106065760405162461bcd60e51b815260206004820152601460248201527341504d20737761703a20494e56414c49445f544f60601b6044820152606401610300565b6040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa15801561064a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066e919061112c565b81526040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa1580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d8919061112c565b6020808301919091526001600160a01b0387166000908152908190526040902054815161070590856110ce565b61070f91906110e6565b6040808301919091526001600160a01b03861660009081526020818152919020549082015161073e90846110ce565b61074891906110e6565b606082015261075788846110e6565b816040015111610768576000610781565b61077288846110e6565b816040015161078191906110e6565b608082015261079087836110e6565b8160600151116107a15760006107ba565b6107ab87836110e6565b81606001516107ba91906110e6565b60a082015260808101511515806107d5575060008160a00151115b61082d5760405162461bcd60e51b815260206004820152602360248201527f41504d20737761703a20494e53554646494349454e545f494e5055545f414d4f60448201526215539560ea1b6064820152608401610300565b610837828461108d565b8160600151826040015161084b919061108d565b10156108875760405162461bcd60e51b815260206004820152600b60248201526a41504d20737761703a204b60a81b6044820152606401610300565b87600003610925578615610910576040516323b872dd60e01b81523060048201526001600160a01b038581166024830152604482018990528616906323b872dd906064016020604051808303816000875af11580156108ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090e9190611145565b505b61092081608001518888886101da565b6109b6565b87156109a6576040516323b872dd60e01b81523060048201526001600160a01b038581166024830152604482018a90528716906323b872dd906064016020604051808303816000875af1158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a49190611145565b505b6109b68160a001518987896101da565b5050505050505050565b6109c8610da7565b8381526001600160a01b03808416604080840182905291841660608401526000908152602081905220548015610aa5576001600160a01b038085166000908152600260209081526040808320878516845282528083205486820151909416835260019091528120548451909190610a4290849084876101f0565b6001600160a01b038089166000908152600260209081526040808320938b16835292905220819055905080610a7784846110e6565b610a8191906110ce565b6040808701516001600160a01b031660009081526001602052205550610ae2915050565b6001600160a01b03808516600090815260026020908152604080832087851684528252808320899055855186820151909416835260019091529020555b8151610aee90826110ce565b6040928301516001600160a01b031660009081526020819052929092209190915550505050565b610b1d610da7565b8381526001600160a01b03808416604080840182905291841660608401526000908152602081905220548015610bfa576001600160a01b038085166000908152600260209081526040808320878516845282528083205486820151909416835260019091528120548451909190610b97908490848761021a565b6001600160a01b038089166000908152600260209081526040808320938b16835292905220819055905080610bcc84846110e6565b610bd691906110ce565b6040808701516001600160a01b031660009081526001602052205550610c37915050565b6001600160a01b03808516600090815260026020908152604080832087851684528252808320899055855186820151909416835260019091529020555b8151610aee90826110e6565b6000808411610ca55760405162461bcd60e51b815260206004820152602860248201527f4465626f6e644c6962726172793a20494e53554646494349454e545f494e50556044820152671517d05353d5539560c21b6064820152608401610300565b600083118015610cb55750600082115b610d0f5760405162461bcd60e51b815260206004820152602560248201527f4465626f6e644c6962726172793a20494e53554646494349454e545f4c495155604482015264494449545960d81b6064820152608401610300565b6000610d1b838661108d565b90506000610d2986866110ce565b9050610d3581836110ac565b9695505050505050565b6001600160a01b0382166000908152600160205260408120548015610437576001600160a01b03808516600081815260026020908152604080832094881683529381528382205492825281905291909120548290610d9d908361108d565b61021191906110ac565b6040518060800160405280600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b80356001600160a01b0381168114610df857600080fd5b919050565b60008060008060808587031215610e1357600080fd5b8435935060208501359250610e2a60408601610de1565b9150610e3860608601610de1565b905092959194509250565b60008060008060808587031215610e5957600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215610e8857600080fd5b610e9183610de1565b946020939093013593505050565b60008060408385031215610eb257600080fd5b82359150610ec260208401610de1565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610ef457600080fd5b8235915060208084013567ffffffffffffffff80821115610f1457600080fd5b818601915086601f830112610f2857600080fd5b813581811115610f3a57610f3a610ecb565b8060051b604051601f19603f83011681018181108582111715610f5f57610f5f610ecb565b604052918252848201925083810185019189831115610f7d57600080fd5b938501935b82851015610fa257610f9385610de1565b84529385019392850192610f82565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b81811015610fea57835183529284019291840191600101610fce565b50909695505050505050565b6000806040838503121561100957600080fd5b61101283610de1565b9150610ec260208401610de1565b600080600080600060a0868803121561103857600080fd5b853594506020860135935061104f60408701610de1565b925061105d60608701610de1565b915061106b60808701610de1565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156110a7576110a7611077565b500290565b6000826110c957634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156110e1576110e1611077565b500190565b6000828210156110f8576110f8611077565b500390565b634e487b7160e01b600052603260045260246000fd5b60006001820161112557611125611077565b5060010190565b60006020828403121561113e57600080fd5b5051919050565b60006020828403121561115757600080fd5b8151801515811461116757600080fd5b939250505056fea26469706673582212202f9e708e00bd866e7cf23b6ba3f60c14a35e8f37578a633ff0500f3f4c9f6b4b64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2492,
        "contract": "contracts/Debond-v0/contracts/APM.sol:APM",
        "label": "totalReserve",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2496,
        "contract": "contracts/Debond-v0/contracts/APM.sol:APM",
        "label": "totalVlp",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2502,
        "contract": "contracts/Debond-v0/contracts/APM.sol:APM",
        "label": "vlp",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}