{
  "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_debondDataAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_debondBondAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "AuctionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "BidWinner",
          "type": "address"
        }
      ],
      "name": "AuctionCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "AuctionStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BidSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonceId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDbitAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDbitAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum Exchange.AuctionState",
          "name": "auctionState",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "curvingPrice",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "successfulBidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "finalPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionId",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionId",
          "type": "uint256"
        }
      ],
      "name": "cancelAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonceId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDbitAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDbitAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "auctionDuration",
          "type": "uint256"
        }
      ],
      "name": "createSecondaryMarketAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "auctionPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "auctions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d57894b8e7672737636abc344c8e1d440f129c2503379d6cc162d2534b041ab",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "transactionIndex": 0,
    "gasUsed": "1452924",
    "logsBloom": "0x
    "blockHash": "0x873a706bea9cfea2622e1a2c5c751e668df4cd5f3707472286e34ec3c21bd74f",
    "transactionHash": "0x3d57894b8e7672737636abc344c8e1d440f129c2503379d6cc162d2534b041ab",
    "logs": [],
    "blockNumber": 9,
    "cumulativeGasUsed": "1452924",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "numDeployments": 1,
  "solcInputHash": "38817cb41b79540a5b058d9672f7da4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_debondDataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_debondBondAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"BidWinner\",\"type\":\"address\"}],\"name\":\"AuctionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDbitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDbitAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Exchange.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"curvingPrice\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"successfulBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"finalPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDbitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDbitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"name\":\"createSecondaryMarketAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"auctions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Debond-v0/contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Debond-v0/contracts/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: apache 2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IDebondBond.sol\\\";\\nimport \\\"./interfaces/IData.sol\\\";\\n\\ncontract Exchange is AccessControl, ReentrancyGuard {\\n\\n    using SafeERC20 for IERC20;\\n    using Counters for Counters.Counter;\\n\\n    enum AuctionState {\\n        Started,\\n        Completed,\\n        Expired,\\n        Cancelled\\n    }\\n\\n    struct Auction {\\n        uint id;\\n        address owner;\\n        uint256 startingTime;\\n        uint256 endingTime;\\n        uint256 duration;\\n        uint256 classId;\\n        uint256 nonceId;\\n        uint256 amount;\\n        uint256 maxDbitAmount;\\n        uint256 minDbitAmount;\\n        AuctionState auctionState;\\n        bool curvingPrice;\\n        address successfulBidder;\\n        uint256 finalPrice;\\n    }\\n\\n    address bondData;\\n    address debondBondAddress;\\n    address currency;\\n    mapping(uint256 => Auction) public auctions;\\n    uint[] auctionsCollection;\\n\\n    uint256 constant MAX_AUCTION_DURATION = 30 days;\\n    uint256 constant MIN_AUCTION_DURATION = 3600;\\n\\n    Counters.Counter private idCounter;\\n\\n    // events for the auctions\\n\\n    event AuctionStarted(uint256 _auctionId, address issuer);\\n    event AuctionCancelled(uint256 _auctionId, address issuer, uint256 time);\\n    event AuctionCompleted(uint256 _auctionId, address BidWinner);\\n    event BidSubmitted(address indexed sender, uint256 amount);\\n\\n    constructor(\\n        address _debondDataAddress,\\n        address _debondBondAddress,\\n        address _currency\\n    )  {\\n        bondData = _debondDataAddress;\\n        debondBondAddress = _debondBondAddress;\\n        currency = _currency;\\n        //   curvingPriceParam = 10;\\n\\n    }\\n\\n    modifier onlyAuctionOwner(uint256 _auctionId) {\\n        require(\\n            msg.sender == auctions[_auctionId].owner,\\n            \\\"Exchange: Caller is not the auction owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function createSecondaryMarketAuction(uint256 classId, uint256 nonceId, uint256 amount, uint256 minDbitAmount, uint256 maxDbitAmount, uint256 auctionDuration) external {\\n\\n        // validation steps\\n        require(auctionDuration <= MAX_AUCTION_DURATION, \\\"Exchange: Max Duration Exceeded\\\");\\n        require(auctionDuration > MIN_AUCTION_DURATION, \\\"Exchange: Min Duration not reached\\\");\\n        require(minDbitAmount < maxDbitAmount, \\\"Exchange: min Dbit Amount Should be less than max dbit amount\\\");\\n        require(minDbitAmount > 0, \\\"Exchange: min Dbit Amount Should be greater 0\\\");\\n\\n        IDebondBond(debondBondAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            classId,\\n            nonceId,\\n            amount\\n        );\\n\\n        (,IData.InterestRateType interestRateType,,) = IData(bondData).getClassFromId(classId);\\n\\n        // adding the first object in the auction\\n        Auction storage auction = auctions[idCounter._value];\\n        auction.id = idCounter._value;\\n        auction.owner = msg.sender;\\n        auction.maxDbitAmount = maxDbitAmount;\\n        auction.duration = auctionDuration;\\n        auction.startingTime = block.timestamp;\\n        auction.classId = classId;\\n        auction.nonceId = nonceId;\\n        auction.amount = amount;\\n        auction.auctionState = AuctionState.Started;\\n        auction.curvingPrice = (interestRateType == (IData.InterestRateType.FloatingRate)) ? true : false ;\\n\\n\\n        auctionsCollection.push(auction.id);\\n        // increment the id\\n        idCounter.increment();\\n\\n        emit AuctionStarted(auction.id, auction.owner);\\n    }\\n\\n    function bid(uint256 _auctionId) nonReentrant() external {\\n        require(msg.sender != auctions[_auctionId].owner, \\\"Exchange: bidder should not be the auction owner\\\");\\n        checkIfExpired(_auctionId);\\n        Auction storage auction = auctions[_auctionId];\\n        require(\\n            auction.auctionState == AuctionState.Started,\\n            \\\"bid is completed already\\\"\\n        );\\n        address bidder = msg.sender;\\n        uint finalPrice = currentPrice(_auctionId);\\n\\n        // 1.get his D/BIT first\\n        IERC20(currency).transferFrom(bidder, address(this), finalPrice);\\n\\n        // 2.transfer him the bonds\\n        IDebondBond(debondBondAddress).transferFrom(address(this), bidder, auction.classId, auction.nonceId, auction.amount);\\n\\n        // 3.change the state\\n        auction.successfulBidder = bidder;\\n        auction.endingTime = block.timestamp;\\n        auction.finalPrice = finalPrice;\\n        auction.auctionState = AuctionState.Completed;\\n\\n        emit AuctionCompleted(_auctionId, bidder);\\n    }\\n\\n    function cancelAuction(uint256 _auctionId) external onlyAuctionOwner(_auctionId) {\\n        checkIfExpired(_auctionId);\\n        Auction storage auction = auctions[_auctionId];\\n        require(auction.auctionState == AuctionState.Started, \\\"auction already finished\\\");\\n\\n        IDebondBond(debondBondAddress).transferFrom(\\n            address(this),\\n            auction.owner,\\n            auction.classId,\\n            auction.nonceId,\\n            auction.amount\\n        );\\n\\n        auction.auctionState = AuctionState.Cancelled;\\n        auction.endingTime = block.timestamp;\\n        emit AuctionCancelled(_auctionId, msg.sender, block.timestamp);\\n    }\\n\\n    function getAuctionIds() external view returns(uint[] memory auctions) {\\n        return auctionsCollection;\\n    }\\n\\n    function currentPrice(uint256 auctionId) public view returns (uint256 auctionPrice) {\\n\\n        Auction memory auctionObject = auctions[auctionId];\\n        uint256 time_passed = block.timestamp - auctionObject.startingTime;\\n        require(\\n            time_passed < auctionObject.duration,\\n            \\\"auction ended,equal to faceValue\\\"\\n        );\\n        if (!auctionObject.curvingPrice) {\\n            // for fixed rate , there will be using the straight line fixed price decreasing mechanism.\\n            auctionPrice = auctionObject.maxDbitAmount - (auctionObject.maxDbitAmount - auctionObject.minDbitAmount) * time_passed / auctionObject.duration;\\n\\n        }\\n        // else  if  its the floating rate, there will be decreasing parabolic curve as function of\\n        else {\\n            auctionPrice = auctionObject.maxDbitAmount - ((auctionObject.maxDbitAmount - auctionObject.minDbitAmount)/(auctionObject.duration**2)) * ((block.timestamp - auctionObject.startingTime)**2);\\n        }\\n    }\\n\\n    function checkIfExpired(uint auctionId) private {\\n        Auction storage auction = auctions[auctionId];\\n        if(block.timestamp >= auction.startingTime + auction.duration) {\\n            auctions[auctionId].auctionState = AuctionState.Expired;\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5a7ffd5bfc0c8af7664036e5c1b85e32bc26390c3b0984bc3042b892653ebdbe\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/interfaces/IData.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\ninterface IData {\\n\\n    enum InterestRateType {FixedRate, FloatingRate}\\n\\n    function addClass(uint classId, string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp) external;\\n\\n    function updatePurchasableClass(uint debondClassId, uint purchaseClassId, bool purchasable) external;\\n\\n    function canPurchase(uint debondClassId , uint purchaseClassId) external view returns (bool);\\n\\n    function getClassFromId(uint classId) external view returns(string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp);\\n\\n    function getLastNonceCreated(uint classId) external view returns(uint nonceId, uint createdAt);\\n\\n    function updateLastNonce(uint classId, uint nonceId, uint createdAt) external;\\n}\\n\",\"keccak256\":\"0x1e7a987cf8f11f6c8670ea6136e90af6dcfb718fb1acc03c2380bb02d68519de\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/interfaces/IDebondBond.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\nimport \\\"./IERC3475.sol\\\";\\nimport \\\"./IData.sol\\\";\\n\\n\\ninterface IDebondBond is IERC3475 {\\n\\n    function isActive() external returns (bool);\\n\\n    function bondAmountDue(address tokenAddress, IData.InterestRateType interestRateType) external view returns (uint);\\n\\n    function createNonce(uint256 classId, uint256 nonceId, uint256 maturityTime, uint256 liqT) external;\\n\\n    function createClass(uint256 classId, string memory symbol, IData.InterestRateType interestRateType, address tokenAddress, uint256 periodTimestamp) external;\\n\\n    function classExists(uint256 classId) external view returns (bool);\\n\\n    function nonceExists(uint256 classId, uint256 nonceId) external view returns (bool);\\n\\n    function bondDetails(uint256 classId, uint256 nonceId) external view returns (string memory _symbol, IData.InterestRateType _interestRateType, address _tokenAddress, uint256 _periodTimestamp, uint256 _maturityDate, uint256 _issuanceDate);\\n\\n\\n\\n}\\n\\n\",\"keccak256\":\"0x7a3b976ce5643f7fd1be0fa4ff66f1f8cada9b4a9e8804b64a0684ecbc9dd270\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/interfaces/IERC3475.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: MIT\\n\\ninterface IERC3475 {\\n    // WRITE\\n\\n    /**\\n     * @dev allows the transfer of a bond type from an address to another.\\n     * @param from argument is the address of the holder whose balance about to decrees.\\n     * @param to argument is the address of the recipient whose balance is about to increased.\\n     * @param classId is the classId of bond, the first bond class created will be 0, and so on.\\n     * @param nonceId is the nonceId of the given bond class. This param is for distinctions of the issuing conditions of the bond.\\n     * @param amount is the amount of the bond, that will be transferred from \\\"_from\\\" address to \\\"_to\\\" address.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev  allows issuing any number of bond types to an address.\\n     * The calling of this function needs to be restricted to bond issuer contract.\\n     * @param to is the address to which the bond will be issued.\\n     * @param classId is the classId of the bond, the first bond class created will be 0, and so on.\\n     * @param nonceId is the nonceId of the given bond class. This param is for distinctions of the issuing conditions of the bond.\\n     * @param amount is the amount of the bond, that \\\"to\\\" address will receive.\\n     */\\n    function issue(\\n        address to,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev  allows redemption of any number of bond types from an address.\\n     * The calling of this function needs to be restricted to bond issuer contract.\\n     * @param from is the address from which the bond will be redeemed.\\n     * @param classId is the class nonce of bond, the first bond class created will be 0, and so on.\\n     * @param nonceId is the nonce of the given bond class. This param is for distinctions of the issuing conditions of the bond.\\n     * @param amount is the amount of the bond, that \\\"from\\\" address will redeem.\\n     */\\n    function redeem(\\n        address from,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev  allows the transfer of any number of bond types from an address to another.\\n     * The calling of this function needs to be restricted to bond issuer contract.\\n     * @param from argument is the address of the holder whose balance about to decrees.\\n     * @param classId is the class nonce of bond, the first bond class created will be 0, and so on.\\n     * @param nonceId is the nonce of the given bond class. This param is for distinctions of the issuing conditions of the bond.\\n     * @param amount is the amount of the bond, that will be transferred from \\\"_from\\\"address to \\\"_to\\\" address.\\n     */\\n    function burn(\\n        address from,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev Allows spender to withdraw from your account multiple times, up to the amount.\\n     * @notice If this function is called again it overwrites the current allowance with amount.\\n     * @param spender is the address the caller approve for his bonds\\n     * @param classId is the classId nonce of bond, the first bond class created will be 0, and so on.\\n     * @param nonceId is the nonceId of the given bond class. This param is for distinctions of the issuing conditions of the bond.\\n     * @param amount is the amount of the bond that the spender is approved for.\\n     */\\n    function approve(\\n        address spender,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\n     * @dev MUST emit the ApprovalForAll event on success.\\n     * @param operator  Address to add to the set of authorized operators\\n     * @param classId is the classId nonce of bond, the first bond class created will be 0, and so on.\\n     * @param approved  True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalFor(\\n        address operator,\\n        uint256 classId,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @dev Allows spender to withdraw bonds from your account multiple times, up to the amount.\\n     * @notice If this function is called again it overwrites the current allowance with amount.\\n     * @param spender is the address the caller approve for his bonds.\\n     * @param classIds is the list of classIds of bond.\\n     * @param nonceIds is the list of nonceIds of the given bond class.\\n     * @param amounts is the list of amounts of the bond that the spender is approved for.\\n     */\\n    function batchApprove(\\n        address spender,\\n        uint256[] calldata classIds,\\n        uint256[] calldata nonceIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    // READ\\n\\n    /**\\n     * @dev Returns the total supply of the bond in question\\n     */\\n    function totalSupply(uint256 classId, uint256 nonceId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the redeemed supply of the bond in question\\n     */\\n    function redeemedSupply(uint256 classId, uint256 nonceId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the active supply of the bond in question\\n     */\\n    function activeSupply(uint256 classId, uint256 nonceId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the burned supply of the bond in question\\n     */\\n    function burnedSupply(uint256 classId, uint256 nonceId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the balance of the giving bond classId and bond nonce\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 classId,\\n        uint256 nonceId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the symbol of the giving bond classId\\n     */\\n    function symbol(uint256 classId) external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the informations for the class of given classId\\n     * @notice Every bond contract can have their own list of class informations\\n     */\\n    function classInfos(uint256 classId)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns the information description for a given class info\\n     * @notice Every bond contract can have their own list of class informations\\n     */\\n    function classInfoDescription(uint256 classInfo)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @dev Returns the information description for a given nonce info\\n     * @notice Every bond contract can have their own list of nonce informations\\n     */\\n    function nonceInfoDescription(uint256 nonceInfo)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @dev Returns the informations for the nonce of given classId and nonceId\\n     * @notice Every bond contract can have their own list. But the first uint256 in the list MUST be the UTC time code of the issuing time.\\n     */\\n    function nonceInfos(uint256 classId, uint256 nonceId)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev  allows anyone to check if a bond is redeemable.\\n     * @notice the conditions of redemption can be specified with one or several internal functions.\\n     */\\n    function isRedeemable(uint256 classId, uint256 nonceId)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice  Returns the amount which spender is still allowed to withdraw from owner.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender,\\n        uint256 classId,\\n        uint256 nonceId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Queries the approval status of an operator for a given owner.\\n     * @return True if the operator is approved, false if not\\n     */\\n    function isApprovedFor(\\n        address owner,\\n        address operator,\\n        uint256 classId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice MUST trigger when tokens are transferred, including zero value transfers.\\n     */\\n    event Transfer(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice MUST trigger when tokens are issued\\n     */\\n    event Issue(\\n        address indexed _operator,\\n        address indexed _to,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice MUST trigger when tokens are redeemed\\n     */\\n    event Redeem(\\n        address indexed _operator,\\n        address indexed _from,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice MUST trigger when tokens are burned\\n     */\\n    event Burn(\\n        address indexed _operator,\\n        address indexed _from,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev MUST emit when approval for a second party/operator address to manage all bonds from a classId given for an owner address is enabled or disabled (absence of an event assumes disabled).\\n     */\\n    event ApprovalFor(\\n        address indexed _owner,\\n        address indexed _operator,\\n        uint256 classId,\\n        bool _approved\\n    );\\n}\\n\",\"keccak256\":\"0xcc7b271d4501f92e5d9d056bcf6e83865d0f0c2f44c32cb7ce01e6d048cc1961\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200189638038062001896833981016040819052620000349162000098565b60018055600280546001600160a01b039485166001600160a01b031991821617909155600380549385169382169390931790925560048054919093169116179055620000e2565b80516001600160a01b03811681146200009357600080fd5b919050565b600080600060608486031215620000ae57600080fd5b620000b9846200007b565b9250620000c9602085016200007b565b9150620000d9604085016200007b565b90509250925092565b6117a480620000f26000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063571a26a01161008c57806396b5a7551161006657806396b5a7551461024e578063a217fddf14610261578063c9d1cab314610269578063d547741f1461027c57600080fd5b8063571a26a01461017d5780637a3c4c171461022857806391d148541461023b57600080fd5b806301ffc9a7146100d45780631094db1b146100fc578063248a9ca3146101115780632f2ff15d1461014257806336568abe14610157578063454a2ab31461016a575b600080fd5b6100e76100e23660046111c1565b61028f565b60405190151581526020015b60405180910390f35b6101046102c6565b6040516100f391906111eb565b61013461011f36600461122f565b60009081526020819052604090206001015490565b6040519081526020016100f3565b610155610150366004611260565b61031e565b005b610155610165366004611260565b610349565b61015561017836600461122f565b6103cc565b61020e61018b36600461122f565b600560208190526000918252604090912080546001820154600283015460038401546004850154958501546006860154600787015460088801546009890154600a8a0154600b909a0154989a6001600160a01b039889169a9799969890979596949593949293919260ff808416936101008104909116926201000090910416908e565b6040516100f39e9d9c9b9a999897969594939291906112a6565b61013461023636600461122f565b6106a8565b6100e7610249366004611260565b6108c4565b61015561025c36600461122f565b6108ed565b610134600081565b61015561027736600461134d565b610ac4565b61015561028a366004611260565b610e64565b60006001600160e01b03198216637965db0b60e01b14806102c057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600680548060200260200160405190810160405280929190818152602001828054801561031457602002820191906000526020600020905b815481526020019060010190808311610300575b5050505050905090565b60008281526020819052604090206001015461033a8133610e8a565b6103448383610eee565b505050565b6001600160a01b03811633146103be5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6103c88282610f72565b5050565b60026001540361041e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103b5565b60026001908155600082815260056020526040902001546001600160a01b031633036104a55760405162461bcd60e51b815260206004820152603060248201527f45786368616e67653a206269646465722073686f756c64206e6f74206265207460448201526f34329030bab1ba34b7b71037bbb732b960811b60648201526084016103b5565b6104ae81610fd7565b600081815260056020526040812090600a82015460ff1660038111156104d6576104d6611290565b146105235760405162461bcd60e51b815260206004820152601860248201527f62696420697320636f6d706c6574656420616c7265616479000000000000000060448201526064016103b5565b33600061052f846106a8565b600480546040516323b872dd60e01b81526001600160a01b03868116938201939093523060248201526044810184905292935016906323b872dd906064016020604051808303816000875af115801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b09190611390565b50600354600584015460068501546007860154604051632576a9e160e11b81526001600160a01b0390941693634aed53c2936105f293309389936004016113b2565b600060405180830381600087803b15801561060c57600080fd5b505af1158015610620573d6000803e3d6000fd5b50505050600a83018054426003860155600b850183905561ff01600160b01b03191660ff19620100006001600160a01b03861690810291909116919091176001179091556040805186815260208101929092527f97938efcbc8c10b93e3a3da45c828766c118bd266b0b535bf5a776e87c9a83ad910160405180910390a15050600180555050565b600081815260056020818152604080842081516101c0810183528154815260018201546001600160a01b0316938101939093526002810154918301919091526003808201546060840152600482015460808401529281015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009810154610120830152600a810154849361014084019160ff169081111561074f5761074f611290565b600381111561076057610760611290565b8152600a820154610100810460ff16151560208301526201000090046001600160a01b0316604080830191909152600b909201546060909101528101519091506000906107ad90426113f9565b9050816080015181106108025760405162461bcd60e51b815260206004820181905260248201527f61756374696f6e20656e6465642c657175616c20746f206661636556616c756560448201526064016103b5565b8161016001516108535781608001518183610120015184610100015161082891906113f9565b6108329190611410565b61083c919061142f565b82610100015161084c91906113f9565b92506108bd565b600282604001514261086591906113f9565b61086f9190611535565b600283608001516108809190611535565b83610120015184610100015161089691906113f9565b6108a0919061142f565b6108aa9190611410565b8261010001516108ba91906113f9565b92505b5050919050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526005602052604090206001015481906001600160a01b0316331461096a5760405162461bcd60e51b815260206004820152602960248201527f45786368616e67653a2043616c6c6572206973206e6f7420746865206175637460448201526834b7b71037bbb732b960b91b60648201526084016103b5565b61097382610fd7565b600082815260056020526040812090600a82015460ff16600381111561099b5761099b611290565b146109e85760405162461bcd60e51b815260206004820152601860248201527f61756374696f6e20616c72656164792066696e6973686564000000000000000060448201526064016103b5565b6003546001820154600583015460068401546007850154604051632576a9e160e11b81526001600160a01b0395861695634aed53c295610a33953095929091169390926004016113b2565b600060405180830381600087803b158015610a4d57600080fd5b505af1158015610a61573d6000803e3d6000fd5b50505050600a8101805460ff191660039081179091554290820181905560408051858152336020820152908101919091527f6a3d5a07d548e27ae884a742682e9b929c0a0e4040990bc28c04637c5c0771049060600160405180910390a1505050565b62278d00811115610b175760405162461bcd60e51b815260206004820152601f60248201527f45786368616e67653a204d6178204475726174696f6e2045786365656465640060448201526064016103b5565b610e108111610b735760405162461bcd60e51b815260206004820152602260248201527f45786368616e67653a204d696e204475726174696f6e206e6f74207265616368604482015261195960f21b60648201526084016103b5565b818310610be85760405162461bcd60e51b815260206004820152603d60248201527f45786368616e67653a206d696e204462697420416d6f756e742053686f756c6460448201527f206265206c657373207468616e206d6178206462697420616d6f756e7400000060648201526084016103b5565b60008311610c4e5760405162461bcd60e51b815260206004820152602d60248201527f45786368616e67653a206d696e204462697420416d6f756e742053686f756c6460448201526c02062652067726561746572203609c1b60648201526084016103b5565b600354604051632576a9e160e11b81526001600160a01b0390911690634aed53c290610c8690339030908b908b908b906004016113b2565b600060405180830381600087803b158015610ca057600080fd5b505af1158015610cb4573d6000803e3d6000fd5b50506002546040516305d42cc560e31b8152600481018a9052600093506001600160a01b039091169150632ea1662890602401600060405180830381865afa158015610d04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d2c91908101906115a9565b5050600780546000818152600560208190526040909120918255600180830180546001600160a01b0319163317905560088301899055600483018890554260028401559082018c9055600682018b9055918101899055600a8101805460ff191690559193509091508281811115610da557610da5611290565b14610db1576000610db4565b60015b600a820180549115156101000261ff00199092169190911790558054600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0155610e11600780546001019055565b80546001820154604080519283526001600160a01b0390911660208301527f16da476d7265fc95576888b93de4fa4849d6cea1228235887f569c6530ddfec1910160405180910390a15050505050505050565b600082815260208190526040902060010154610e808133610e8a565b6103448383610f72565b610e9482826108c4565b6103c857610eac816001600160a01b0316601461101e565b610eb783602061101e565b604051602001610ec8929190611681565b60408051601f198184030181529082905262461bcd60e51b82526103b5916004016116f6565b610ef882826108c4565b6103c8576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610f2e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610f7c82826108c4565b156103c8576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081815260056020526040902060048101546002820154610ff99190611729565b42106103c857506000908152600560205260409020600a01805460ff19166002179055565b6060600061102d836002611410565b611038906002611729565b67ffffffffffffffff81111561105057611050611544565b6040519080825280601f01601f19166020018201604052801561107a576020820181803683370190505b509050600360fc1b8160008151811061109557611095611741565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106110c4576110c4611741565b60200101906001600160f81b031916908160001a90535060006110e8846002611410565b6110f3906001611729565b90505b600181111561116b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061112757611127611741565b1a60f81b82828151811061113d5761113d611741565b60200101906001600160f81b031916908160001a90535060049490941c9361116481611757565b90506110f6565b5083156111ba5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103b5565b9392505050565b6000602082840312156111d357600080fd5b81356001600160e01b0319811681146111ba57600080fd5b6020808252825182820181905260009190848201906040850190845b8181101561122357835183529284019291840191600101611207565b50909695505050505050565b60006020828403121561124157600080fd5b5035919050565b6001600160a01b038116811461125d57600080fd5b50565b6000806040838503121561127357600080fd5b82359150602083013561128581611248565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b60006101c0820190508f825260018060a01b038f1660208301528d60408301528c60608301528b60808301528a60a08301528960c08301528860e083015287610100830152866101208301526004861061131057634e487b7160e01b600052602160045260246000fd5b8561014083015261132661016083018615159052565b6001600160a01b03939093166101808201526101a001529c9b505050505050505050505050565b60008060008060008060c0878903121561136657600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000602082840312156113a257600080fd5b815180151581146111ba57600080fd5b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b634e487b7160e01b600052601160045260246000fd5b60008282101561140b5761140b6113e3565b500390565b600081600019048311821515161561142a5761142a6113e3565b500290565b60008261144c57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561148c578160001904821115611472576114726113e3565b8085161561147f57918102915b93841c9390800290611456565b509250929050565b6000826114a3575060016102c0565b816114b0575060006102c0565b81600181146114c657600281146114d0576114ec565b60019150506102c0565b60ff8411156114e1576114e16113e3565b50506001821b6102c0565b5060208310610133831016604e8410600b841016171561150f575081810a6102c0565b6115198383611451565b806000190482111561152d5761152d6113e3565b029392505050565b60006111ba60ff841683611494565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561157557818101518382015260200161155d565b83811115611584576000848401525b50505050565b80516002811061159957600080fd5b919050565b805161159981611248565b600080600080608085870312156115bf57600080fd5b845167ffffffffffffffff808211156115d757600080fd5b818701915087601f8301126115eb57600080fd5b8151818111156115fd576115fd611544565b604051601f8201601f19908116603f0116810190838211818310171561162557611625611544565b816040528281528a602084870101111561163e57600080fd5b61164f83602083016020880161155a565b80985050505050506116636020860161158a565b92506116716040860161159e565b6060959095015193969295505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516116b981601785016020880161155a565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516116ea81602884016020880161155a565b01602801949350505050565b602081526000825180602084015261171581604085016020870161155a565b601f01601f19169190910160400192915050565b6000821982111561173c5761173c6113e3565b500190565b634e487b7160e01b600052603260045260246000fd5b600081611766576117666113e3565b50600019019056fea26469706673582212205a9770a58623dbfa18c8dd61e036ac25946be9e10837f494273eaf358871a9ac64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063571a26a01161008c57806396b5a7551161006657806396b5a7551461024e578063a217fddf14610261578063c9d1cab314610269578063d547741f1461027c57600080fd5b8063571a26a01461017d5780637a3c4c171461022857806391d148541461023b57600080fd5b806301ffc9a7146100d45780631094db1b146100fc578063248a9ca3146101115780632f2ff15d1461014257806336568abe14610157578063454a2ab31461016a575b600080fd5b6100e76100e23660046111c1565b61028f565b60405190151581526020015b60405180910390f35b6101046102c6565b6040516100f391906111eb565b61013461011f36600461122f565b60009081526020819052604090206001015490565b6040519081526020016100f3565b610155610150366004611260565b61031e565b005b610155610165366004611260565b610349565b61015561017836600461122f565b6103cc565b61020e61018b36600461122f565b600560208190526000918252604090912080546001820154600283015460038401546004850154958501546006860154600787015460088801546009890154600a8a0154600b909a0154989a6001600160a01b039889169a9799969890979596949593949293919260ff808416936101008104909116926201000090910416908e565b6040516100f39e9d9c9b9a999897969594939291906112a6565b61013461023636600461122f565b6106a8565b6100e7610249366004611260565b6108c4565b61015561025c36600461122f565b6108ed565b610134600081565b61015561027736600461134d565b610ac4565b61015561028a366004611260565b610e64565b60006001600160e01b03198216637965db0b60e01b14806102c057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600680548060200260200160405190810160405280929190818152602001828054801561031457602002820191906000526020600020905b815481526020019060010190808311610300575b5050505050905090565b60008281526020819052604090206001015461033a8133610e8a565b6103448383610eee565b505050565b6001600160a01b03811633146103be5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6103c88282610f72565b5050565b60026001540361041e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103b5565b60026001908155600082815260056020526040902001546001600160a01b031633036104a55760405162461bcd60e51b815260206004820152603060248201527f45786368616e67653a206269646465722073686f756c64206e6f74206265207460448201526f34329030bab1ba34b7b71037bbb732b960811b60648201526084016103b5565b6104ae81610fd7565b600081815260056020526040812090600a82015460ff1660038111156104d6576104d6611290565b146105235760405162461bcd60e51b815260206004820152601860248201527f62696420697320636f6d706c6574656420616c7265616479000000000000000060448201526064016103b5565b33600061052f846106a8565b600480546040516323b872dd60e01b81526001600160a01b03868116938201939093523060248201526044810184905292935016906323b872dd906064016020604051808303816000875af115801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b09190611390565b50600354600584015460068501546007860154604051632576a9e160e11b81526001600160a01b0390941693634aed53c2936105f293309389936004016113b2565b600060405180830381600087803b15801561060c57600080fd5b505af1158015610620573d6000803e3d6000fd5b50505050600a83018054426003860155600b850183905561ff01600160b01b03191660ff19620100006001600160a01b03861690810291909116919091176001179091556040805186815260208101929092527f97938efcbc8c10b93e3a3da45c828766c118bd266b0b535bf5a776e87c9a83ad910160405180910390a15050600180555050565b600081815260056020818152604080842081516101c0810183528154815260018201546001600160a01b0316938101939093526002810154918301919091526003808201546060840152600482015460808401529281015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009810154610120830152600a810154849361014084019160ff169081111561074f5761074f611290565b600381111561076057610760611290565b8152600a820154610100810460ff16151560208301526201000090046001600160a01b0316604080830191909152600b909201546060909101528101519091506000906107ad90426113f9565b9050816080015181106108025760405162461bcd60e51b815260206004820181905260248201527f61756374696f6e20656e6465642c657175616c20746f206661636556616c756560448201526064016103b5565b8161016001516108535781608001518183610120015184610100015161082891906113f9565b6108329190611410565b61083c919061142f565b82610100015161084c91906113f9565b92506108bd565b600282604001514261086591906113f9565b61086f9190611535565b600283608001516108809190611535565b83610120015184610100015161089691906113f9565b6108a0919061142f565b6108aa9190611410565b8261010001516108ba91906113f9565b92505b5050919050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526005602052604090206001015481906001600160a01b0316331461096a5760405162461bcd60e51b815260206004820152602960248201527f45786368616e67653a2043616c6c6572206973206e6f7420746865206175637460448201526834b7b71037bbb732b960b91b60648201526084016103b5565b61097382610fd7565b600082815260056020526040812090600a82015460ff16600381111561099b5761099b611290565b146109e85760405162461bcd60e51b815260206004820152601860248201527f61756374696f6e20616c72656164792066696e6973686564000000000000000060448201526064016103b5565b6003546001820154600583015460068401546007850154604051632576a9e160e11b81526001600160a01b0395861695634aed53c295610a33953095929091169390926004016113b2565b600060405180830381600087803b158015610a4d57600080fd5b505af1158015610a61573d6000803e3d6000fd5b50505050600a8101805460ff191660039081179091554290820181905560408051858152336020820152908101919091527f6a3d5a07d548e27ae884a742682e9b929c0a0e4040990bc28c04637c5c0771049060600160405180910390a1505050565b62278d00811115610b175760405162461bcd60e51b815260206004820152601f60248201527f45786368616e67653a204d6178204475726174696f6e2045786365656465640060448201526064016103b5565b610e108111610b735760405162461bcd60e51b815260206004820152602260248201527f45786368616e67653a204d696e204475726174696f6e206e6f74207265616368604482015261195960f21b60648201526084016103b5565b818310610be85760405162461bcd60e51b815260206004820152603d60248201527f45786368616e67653a206d696e204462697420416d6f756e742053686f756c6460448201527f206265206c657373207468616e206d6178206462697420616d6f756e7400000060648201526084016103b5565b60008311610c4e5760405162461bcd60e51b815260206004820152602d60248201527f45786368616e67653a206d696e204462697420416d6f756e742053686f756c6460448201526c02062652067726561746572203609c1b60648201526084016103b5565b600354604051632576a9e160e11b81526001600160a01b0390911690634aed53c290610c8690339030908b908b908b906004016113b2565b600060405180830381600087803b158015610ca057600080fd5b505af1158015610cb4573d6000803e3d6000fd5b50506002546040516305d42cc560e31b8152600481018a9052600093506001600160a01b039091169150632ea1662890602401600060405180830381865afa158015610d04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d2c91908101906115a9565b5050600780546000818152600560208190526040909120918255600180830180546001600160a01b0319163317905560088301899055600483018890554260028401559082018c9055600682018b9055918101899055600a8101805460ff191690559193509091508281811115610da557610da5611290565b14610db1576000610db4565b60015b600a820180549115156101000261ff00199092169190911790558054600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0155610e11600780546001019055565b80546001820154604080519283526001600160a01b0390911660208301527f16da476d7265fc95576888b93de4fa4849d6cea1228235887f569c6530ddfec1910160405180910390a15050505050505050565b600082815260208190526040902060010154610e808133610e8a565b6103448383610f72565b610e9482826108c4565b6103c857610eac816001600160a01b0316601461101e565b610eb783602061101e565b604051602001610ec8929190611681565b60408051601f198184030181529082905262461bcd60e51b82526103b5916004016116f6565b610ef882826108c4565b6103c8576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610f2e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610f7c82826108c4565b156103c8576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081815260056020526040902060048101546002820154610ff99190611729565b42106103c857506000908152600560205260409020600a01805460ff19166002179055565b6060600061102d836002611410565b611038906002611729565b67ffffffffffffffff81111561105057611050611544565b6040519080825280601f01601f19166020018201604052801561107a576020820181803683370190505b509050600360fc1b8160008151811061109557611095611741565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106110c4576110c4611741565b60200101906001600160f81b031916908160001a90535060006110e8846002611410565b6110f3906001611729565b90505b600181111561116b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061112757611127611741565b1a60f81b82828151811061113d5761113d611741565b60200101906001600160f81b031916908160001a90535060049490941c9361116481611757565b90506110f6565b5083156111ba5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103b5565b9392505050565b6000602082840312156111d357600080fd5b81356001600160e01b0319811681146111ba57600080fd5b6020808252825182820181905260009190848201906040850190845b8181101561122357835183529284019291840191600101611207565b50909695505050505050565b60006020828403121561124157600080fd5b5035919050565b6001600160a01b038116811461125d57600080fd5b50565b6000806040838503121561127357600080fd5b82359150602083013561128581611248565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b60006101c0820190508f825260018060a01b038f1660208301528d60408301528c60608301528b60808301528a60a08301528960c08301528860e083015287610100830152866101208301526004861061131057634e487b7160e01b600052602160045260246000fd5b8561014083015261132661016083018615159052565b6001600160a01b03939093166101808201526101a001529c9b505050505050505050505050565b60008060008060008060c0878903121561136657600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000602082840312156113a257600080fd5b815180151581146111ba57600080fd5b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b634e487b7160e01b600052601160045260246000fd5b60008282101561140b5761140b6113e3565b500390565b600081600019048311821515161561142a5761142a6113e3565b500290565b60008261144c57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561148c578160001904821115611472576114726113e3565b8085161561147f57918102915b93841c9390800290611456565b509250929050565b6000826114a3575060016102c0565b816114b0575060006102c0565b81600181146114c657600281146114d0576114ec565b60019150506102c0565b60ff8411156114e1576114e16113e3565b50506001821b6102c0565b5060208310610133831016604e8410600b841016171561150f575081810a6102c0565b6115198383611451565b806000190482111561152d5761152d6113e3565b029392505050565b60006111ba60ff841683611494565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561157557818101518382015260200161155d565b83811115611584576000848401525b50505050565b80516002811061159957600080fd5b919050565b805161159981611248565b600080600080608085870312156115bf57600080fd5b845167ffffffffffffffff808211156115d757600080fd5b818701915087601f8301126115eb57600080fd5b8151818111156115fd576115fd611544565b604051601f8201601f19908116603f0116810190838211818310171561162557611625611544565b816040528281528a602084870101111561163e57600080fd5b61164f83602083016020880161155a565b80985050505050506116636020860161158a565b92506116716040860161159e565b6060959095015193969295505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516116b981601785016020880161155a565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516116ea81602884016020880161155a565b01602801949350505050565b602081526000825180602084015261171581604085016020870161155a565b601f01601f19169190910160400192915050565b6000821982111561173c5761173c6113e3565b500190565b634e487b7160e01b600052603260045260246000fd5b600081611766576117666113e3565b50600019019056fea26469706673582212205a9770a58623dbfa18c8dd61e036ac25946be9e10837f494273eaf358871a9ac64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 497,
        "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6736,
        "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
        "label": "bondData",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6738,
        "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
        "label": "debondBondAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6740,
        "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
        "label": "currency",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6745,
        "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
        "label": "auctions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Auction)6734_storage)"
      },
      {
        "astId": 6748,
        "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
        "label": "auctionsCollection",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6757,
        "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
        "label": "idCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)1764_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(AuctionState)6704": {
        "encoding": "inplace",
        "label": "enum Exchange.AuctionState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_struct(Auction)6734_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Exchange.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)6734_storage"
      },
      "t_struct(Auction)6734_storage": {
        "encoding": "inplace",
        "label": "struct Exchange.Auction",
        "members": [
          {
            "astId": 6706,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6708,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6710,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "startingTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6712,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "endingTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6714,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "duration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6716,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "classId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6718,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "nonceId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6720,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "amount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6722,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "maxDbitAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6724,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "minDbitAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 6727,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "auctionState",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(AuctionState)6704"
          },
          {
            "astId": 6729,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "curvingPrice",
            "offset": 1,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 6731,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "successfulBidder",
            "offset": 2,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 6733,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "finalPrice",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Counter)1764_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1763,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/Debond-v0/contracts/Exchange.sol:Exchange",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}