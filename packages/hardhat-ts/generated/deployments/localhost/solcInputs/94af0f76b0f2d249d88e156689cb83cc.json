{
  "language": "Solidity",
  "sources": {
    "contracts/Debond-v0/contracts/APM.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport \"./interfaces/IAPM.sol\";\nimport \"./libraries/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\ncontract APM is IAPM {\n    using SafeMath for uint256; //check this, maybe prbmath, see with cedric \n\n    mapping(address => uint256) internal totalReserve;\n    mapping(address => uint256) internal totalVlp; //Vlp : virtual liquidity pool\n    //mapping(address => mapping( address => Pair) ) pairs;\n    mapping(address => mapping( address => uint) ) vlp;\n\n\n    struct UpdateData { //to avoid stack too deep error\n        uint amountA;\n        uint amountB;\n        address tokenA;\n        address tokenB;\n    }\n\n    function getReservesOneToken(\n        address tokenA, //token we want to know reserve\n        address tokenB //pool associated\n    ) private view returns (uint reserveA) {\n        uint totalVlpA = totalVlp[tokenA]; //gas saving\n        if( totalVlpA != 0){\n            uint vlpA = vlp[tokenA][tokenB];\n            reserveA = vlpA * totalReserve[tokenA] / totalVlpA; //use mulDiv?\n        }\n    }\n    function getReserves(\n        address tokenA,\n        address tokenB\n    ) public override view returns (uint reserveA, uint reserveB) {\n        (reserveA, reserveB) = (getReservesOneToken(tokenA, tokenB), getReservesOneToken(tokenB, tokenA) );\n    }\n    function updateTotalReserve(address tokenAddress, uint amount) public {\n            totalReserve[tokenAddress] = totalReserve[tokenAddress] + amount;\n    }\n    function getVlps(address tokenA, address tokenB) public view returns (uint vlpA) {\n        vlpA = vlp[tokenA][tokenB];\n    }\n    function updateWhenAddLiquidityOneToken(\n        uint amountA,\n        address tokenA,\n        address tokenB) private { \n            \n        //require(msg.sender == bankAddress, \"not authorized\");\n\n        UpdateData memory updateData;\n        updateData.amountA = amountA;\n        updateData.tokenA = tokenA;\n        updateData.tokenB = tokenB;\n\n        uint totalReserveA = totalReserve[updateData.tokenA];//gas saving\n\n        if(totalReserveA != 0){\n            //update Vlp\n            uint oldVlpA = vlp[tokenA][tokenB];  //for update total vlp\n            uint totalVlpA = totalVlp[updateData.tokenA]; //save gas\n\n            uint vlpA = amountToAddVlp(oldVlpA, updateData.amountA, totalVlpA, totalReserveA);\n            vlp[tokenA][tokenB] = vlpA;\n\n            //update total vlp\n            totalVlp[updateData.tokenA] = totalVlpA - oldVlpA + vlpA;\n        }\n        else {\n            vlp[tokenA][tokenB] = amountA;\n            totalVlp[updateData.tokenA] = updateData.amountA;\n        }\n        totalReserve[updateData.tokenA] = totalReserveA + updateData.amountA;\n    }\n    function updateWhenAddLiquidity(\n        uint amountA,\n        uint amountB,\n        address tokenA,\n        address tokenB) external { //TODO : restrict update functions for bank only, using assert/require and not modifiers\n        updateWhenAddLiquidityOneToken(amountA, tokenA, tokenB);\n        updateWhenAddLiquidityOneToken(amountB, tokenB, tokenA);\n    }\n    function updateWhenRemoveLiquidityOneToken(\n        uint amountA,\n        address tokenA,\n        address tokenB) private { \n\n        //require(msg.sender == bankAddress, \"not authorized\");\n\n        UpdateData memory updateData;\n        updateData.amountA = amountA;\n        updateData.tokenA = tokenA;\n        updateData.tokenB = tokenB;\n\n        uint totalReserveA = totalReserve[updateData.tokenA];//gas saving\n\n        if(totalReserveA != 0){\n            //update Vlp\n            uint oldVlpA = vlp[tokenA][tokenB];  //for update total vlp\n            uint totalVlpA = totalVlp[updateData.tokenA]; //save gas\n\n            uint vlpA = amountToRemoveVlp(oldVlpA, updateData.amountA, totalVlpA, totalReserveA);\n            vlp[tokenA][tokenB] = vlpA;\n\n            //update total vlp\n            totalVlp[updateData.tokenA] = totalVlpA - oldVlpA + vlpA;\n        }\n        else {\n            vlp[tokenA][tokenB] = amountA;\n            totalVlp[updateData.tokenA] = updateData.amountA;\n        }\n        totalReserve[updateData.tokenA] = totalReserveA - updateData.amountA;\n    }\n    function updateWhenRemoveLiquidity(\n        uint amount, //amountA is the amount of tokenA removed in total pool reserve ( so not the total amount of tokenA in total pool reserve)\n        address token) external {\n        //require(msg.sender == bankAddress, \"not authorized\");\n\n        totalReserve[token] -= amount;\n    }\n    function updateWhenSwap(\n        uint amountAAdded, //amountA is the amount of tokenA swapped in this pool ( so not the total amount of tokenA in this pool after the swap)\n        uint amountBWithdrawn,\n        address tokenA,\n        address tokenB) public { \n        //require(msg.sender == bankAddress or APM, \"not authorized\");\n\n        updateWhenAddLiquidityOneToken(amountAAdded, tokenA, tokenB);\n        updateWhenRemoveLiquidityOneToken(amountBWithdrawn, tokenB, tokenA);\n    }\n    function amountToAddVlp(uint oldVlp, uint amount, uint totalVlpToken, uint totalReserveToken) public pure returns (uint newVlp) {\n        newVlp = oldVlp + amount * totalVlpToken / totalReserveToken;\n    }\n    function amountToRemoveVlp(uint oldVlp, uint amount, uint totalVlpToken, uint totalReserveToken) public pure returns (uint newVlp) {\n        newVlp = oldVlp - amount * totalVlpToken / totalReserveToken;\n    }\n    struct SwapData { //to avoid stack too deep error\n        uint totalReserve0;\n        uint totalReserve1;\n        uint currentReserve0;\n        uint currentReserve1;\n        uint amount0In;\n        uint amount1In;\n    }\n    \n    function swap(uint amount0Out, uint amount1Out,address token0, address token1, address to) external { //no need to have both amount >0, there is always one equals to 0 (according to yu).\n        require( (amount0Out != 0 && amount1Out == 0)|| (amount0Out == 0 && amount1Out != 0), 'APM swap: INSUFFICIENT_OUTPUT_AMOUNT_Or_Both_output >0');\n        (uint _reserve0, uint _reserve1) = getReserves(token0, token1); // gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'APM swap: INSUFFICIENT_LIQUIDITY');\n\n        SwapData memory swapData;\n        require(to != token0 && to != token1, 'APM swap: INVALID_TO'); // do we really need this?\n        swapData.totalReserve0 = IERC20(token0).balanceOf(address(this));\n        swapData.totalReserve1 = IERC20(token1).balanceOf(address(this));\n        swapData.currentReserve0 = _reserve0 + swapData.totalReserve0 - totalReserve[token0]; // should be >= 0\n        swapData.currentReserve1 = _reserve1 + swapData.totalReserve1 - totalReserve[token1];\n\n        swapData.amount0In = swapData.currentReserve0 > _reserve0 - amount0Out ? swapData.currentReserve0 - (_reserve0 - amount0Out) : 0;\n        swapData.amount1In = swapData.currentReserve1 > _reserve1 - amount1Out ? swapData.currentReserve1 - (_reserve1 - amount1Out) : 0;\n        require(swapData.amount0In > 0 || swapData.amount1In > 0, 'APM swap: INSUFFICIENT_INPUT_AMOUNT');\n        require(swapData.currentReserve0 * swapData.currentReserve1 >= _reserve0 * _reserve1, 'APM swap: K');\n        if (amount0Out == 0) {\n            if (amount1Out != 0) IERC20(token1).transferFrom(address(this), to, amount1Out); //use of != because uint, cheaper than >\n            updateWhenSwap(swapData.amount0In, amount1Out, token0, token1);\n        }\n        else{\n            if (amount0Out != 0) IERC20(token0).transferFrom(address(this), to, amount0Out);\n            updateWhenSwap(swapData.amount1In, amount0Out, token1, token0);\n        }\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'DebondLibrary: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'DebondLibrary: INSUFFICIENT_LIQUIDITY');\n        uint numerator = amountIn * reserveOut;\n        uint denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }\n    \n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n\n"
    },
    "contracts/Debond-v0/contracts/interfaces/IAPM.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\ninterface IAPM {\n\n    function getReserves(address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\n\n    function updateWhenAddLiquidity(\n        uint _amountA, \n        uint _amountB,\n        address _tokenA,\n        address _tokenB) external;\n\n    function updateWhenRemoveLiquidity(\n        uint amount, \n        address token) external;\n\n    function updateWhenSwap(\n        uint amountAAdded, \n        uint amountBWithdrawn,\n        address _tokenA,\n        address _tokenB) external;\n\n    function swap(uint amount0Out, uint amount1Out,address token0, address token1, address to) external;\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n\n    function updateTotalReserve(address tokenAddress, uint amount) external;\n}\n"
    },
    "contracts/Debond-v0/contracts/libraries/SafeMath.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n// DappHub (https://github.com/dapphub/ds-math)\nlibrary SafeMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul0(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n        return x <= y ? x : y;\n    }\n\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    function ln(uint256 x) public pure returns (uint256 result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 196205294292027477728.\n        unchecked {\n            result = (log2(x) * 1e18) / 1_442695040888963407;\n        }\n    }\n\n    function pow(uint256 x, uint256 y) public pure returns (uint256 result) {\n        if (x == 0) {\n            result = y == 0 ? 1e18 : uint256(0);\n        } else {\n            result = exp2(mul2(log2(x), y));\n        }\n    }\n\n    function mul2(uint256 x, uint256 y) public pure returns (uint256 result) {\n        result = mulDivFixedPoint(x, y);\n    }\n\n    function mulDivFixedPoint(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        uint256 prod0;\n        uint256 prod1;\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        if (prod1 >= 1e18) {\n            revert();\n        }\n\n        uint256 remainder;\n        uint256 roundUpUnit;\n        uint256 SCALE = 1e18;\n        uint256 SCALE_LPOTD = 262144;\n        uint256 SCALE_INVERSE = 78156646155174841979727994598816262306175212592076161876661_508869554232690281;\n\n        assembly {\n            remainder := mulmod(x, y, SCALE)\n            roundUpUnit := gt(remainder, 499999999999999999)\n        }\n\n        if (prod1 == 0) {\n            unchecked {\n                result = (prod0 / 1e18) + roundUpUnit;\n                return result;\n            }\n        }\n\n        assembly {\n            result := add(\n                mul(\n                    or(\n                        div(sub(prod0, remainder), SCALE_LPOTD),\n                        mul(\n                            sub(prod1, gt(remainder, prod0)),\n                            add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1)\n                        )\n                    ),\n                    SCALE_INVERSE\n                ),\n                roundUpUnit\n            )\n        }\n    }\n\n    function exp2(uint256 x) public pure returns (uint256 result) {\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n        if (x >= 192e18) {\n            revert();\n        }\n\n        unchecked {\n            // Convert x to the 192.64-bit fixed-point format.\n            uint256 x192x64 = (x << 64) / 1e18;\n\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\n            result = exp2p(x192x64);\n        }\n    }\n\n    function log2(uint256 x) public pure returns (uint256 result) {\n        if (x < 1e18) {\n            revert();\n        }\n        unchecked {\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = mostSignificantBit(x / 1e18);\n\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255 and SCALE is 1e18.\n            result = n * 1e18;\n\n            // This is y = x * 2^(-n).\n            uint256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == 1e18) {\n                return result;\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (uint256 delta = 5e17; delta > 0; delta >>= 1) {\n                y = (y * y) / 1e18;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * 1e18) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    result += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n        }\n    }\n\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        if (x >= 2**128) {\n            x >>= 128;\n            msb += 128;\n        }\n        if (x >= 2**64) {\n            x >>= 64;\n            msb += 64;\n        }\n        if (x >= 2**32) {\n            x >>= 32;\n            msb += 32;\n        }\n        if (x >= 2**16) {\n            x >>= 16;\n            msb += 16;\n        }\n        if (x >= 2**8) {\n            x >>= 8;\n            msb += 8;\n        }\n        if (x >= 2**4) {\n            x >>= 4;\n            msb += 4;\n        }\n        if (x >= 2**2) {\n            x >>= 2;\n            msb += 2;\n        }\n        if (x >= 2**1) {\n            // No need to shift x any more.\n            msb += 1;\n        }\n    }\n\n    function exp2p(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // Start from 0.5 in the 192.64-bit fixed-point format.\n            result = 0x800000000000000000000000000000000000000000000000;\n\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\n            if (x & 0x8000000000000000 > 0) {\n                result = (result * 0x16A09E667F3BCC909) >> 64;\n            }\n            if (x & 0x4000000000000000 > 0) {\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\n            }\n            if (x & 0x2000000000000000 > 0) {\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\n            }\n            if (x & 0x1000000000000000 > 0) {\n                result = (result * 0x10B5586CF9890F62A) >> 64;\n            }\n            if (x & 0x800000000000000 > 0) {\n                result = (result * 0x1059B0D31585743AE) >> 64;\n            }\n            if (x & 0x400000000000000 > 0) {\n                result = (result * 0x102C9A3E778060EE7) >> 64;\n            }\n            if (x & 0x200000000000000 > 0) {\n                result = (result * 0x10163DA9FB33356D8) >> 64;\n            }\n            if (x & 0x100000000000000 > 0) {\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\n            }\n            if (x & 0x80000000000000 > 0) {\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\n            }\n            if (x & 0x40000000000000 > 0) {\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\n            }\n            if (x & 0x20000000000000 > 0) {\n                result = (result * 0x100162F3904051FA1) >> 64;\n            }\n            if (x & 0x10000000000000 > 0) {\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\n            }\n            if (x & 0x8000000000000 > 0) {\n                result = (result * 0x100058BA01FB9F96D) >> 64;\n            }\n            if (x & 0x4000000000000 > 0) {\n                result = (result * 0x10002C5CC37DA9492) >> 64;\n            }\n            if (x & 0x2000000000000 > 0) {\n                result = (result * 0x1000162E525EE0547) >> 64;\n            }\n            if (x & 0x1000000000000 > 0) {\n                result = (result * 0x10000B17255775C04) >> 64;\n            }\n            if (x & 0x800000000000 > 0) {\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\n            }\n            if (x & 0x400000000000 > 0) {\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\n            }\n            if (x & 0x200000000000 > 0) {\n                result = (result * 0x10000162E43F4F831) >> 64;\n            }\n            if (x & 0x100000000000 > 0) {\n                result = (result * 0x100000B1721BCFC9A) >> 64;\n            }\n            if (x & 0x80000000000 > 0) {\n                result = (result * 0x10000058B90CF1E6E) >> 64;\n            }\n            if (x & 0x40000000000 > 0) {\n                result = (result * 0x1000002C5C863B73F) >> 64;\n            }\n            if (x & 0x20000000000 > 0) {\n                result = (result * 0x100000162E430E5A2) >> 64;\n            }\n            if (x & 0x10000000000 > 0) {\n                result = (result * 0x1000000B172183551) >> 64;\n            }\n            if (x & 0x8000000000 > 0) {\n                result = (result * 0x100000058B90C0B49) >> 64;\n            }\n            if (x & 0x4000000000 > 0) {\n                result = (result * 0x10000002C5C8601CC) >> 64;\n            }\n            if (x & 0x2000000000 > 0) {\n                result = (result * 0x1000000162E42FFF0) >> 64;\n            }\n            if (x & 0x1000000000 > 0) {\n                result = (result * 0x10000000B17217FBB) >> 64;\n            }\n            if (x & 0x800000000 > 0) {\n                result = (result * 0x1000000058B90BFCE) >> 64;\n            }\n            if (x & 0x400000000 > 0) {\n                result = (result * 0x100000002C5C85FE3) >> 64;\n            }\n            if (x & 0x200000000 > 0) {\n                result = (result * 0x10000000162E42FF1) >> 64;\n            }\n            if (x & 0x100000000 > 0) {\n                result = (result * 0x100000000B17217F8) >> 64;\n            }\n            if (x & 0x80000000 > 0) {\n                result = (result * 0x10000000058B90BFC) >> 64;\n            }\n            if (x & 0x40000000 > 0) {\n                result = (result * 0x1000000002C5C85FE) >> 64;\n            }\n            if (x & 0x20000000 > 0) {\n                result = (result * 0x100000000162E42FF) >> 64;\n            }\n            if (x & 0x10000000 > 0) {\n                result = (result * 0x1000000000B17217F) >> 64;\n            }\n            if (x & 0x8000000 > 0) {\n                result = (result * 0x100000000058B90C0) >> 64;\n            }\n            if (x & 0x4000000 > 0) {\n                result = (result * 0x10000000002C5C860) >> 64;\n            }\n            if (x & 0x2000000 > 0) {\n                result = (result * 0x1000000000162E430) >> 64;\n            }\n            if (x & 0x1000000 > 0) {\n                result = (result * 0x10000000000B17218) >> 64;\n            }\n            if (x & 0x800000 > 0) {\n                result = (result * 0x1000000000058B90C) >> 64;\n            }\n            if (x & 0x400000 > 0) {\n                result = (result * 0x100000000002C5C86) >> 64;\n            }\n            if (x & 0x200000 > 0) {\n                result = (result * 0x10000000000162E43) >> 64;\n            }\n            if (x & 0x100000 > 0) {\n                result = (result * 0x100000000000B1721) >> 64;\n            }\n            if (x & 0x80000 > 0) {\n                result = (result * 0x10000000000058B91) >> 64;\n            }\n            if (x & 0x40000 > 0) {\n                result = (result * 0x1000000000002C5C8) >> 64;\n            }\n            if (x & 0x20000 > 0) {\n                result = (result * 0x100000000000162E4) >> 64;\n            }\n            if (x & 0x10000 > 0) {\n                result = (result * 0x1000000000000B172) >> 64;\n            }\n            if (x & 0x8000 > 0) {\n                result = (result * 0x100000000000058B9) >> 64;\n            }\n            if (x & 0x4000 > 0) {\n                result = (result * 0x10000000000002C5D) >> 64;\n            }\n            if (x & 0x2000 > 0) {\n                result = (result * 0x1000000000000162E) >> 64;\n            }\n            if (x & 0x1000 > 0) {\n                result = (result * 0x10000000000000B17) >> 64;\n            }\n            if (x & 0x800 > 0) {\n                result = (result * 0x1000000000000058C) >> 64;\n            }\n            if (x & 0x400 > 0) {\n                result = (result * 0x100000000000002C6) >> 64;\n            }\n            if (x & 0x200 > 0) {\n                result = (result * 0x10000000000000163) >> 64;\n            }\n            if (x & 0x100 > 0) {\n                result = (result * 0x100000000000000B1) >> 64;\n            }\n            if (x & 0x80 > 0) {\n                result = (result * 0x10000000000000059) >> 64;\n            }\n            if (x & 0x40 > 0) {\n                result = (result * 0x1000000000000002C) >> 64;\n            }\n            if (x & 0x20 > 0) {\n                result = (result * 0x10000000000000016) >> 64;\n            }\n            if (x & 0x10 > 0) {\n                result = (result * 0x1000000000000000B) >> 64;\n            }\n            if (x & 0x8 > 0) {\n                result = (result * 0x10000000000000006) >> 64;\n            }\n            if (x & 0x4 > 0) {\n                result = (result * 0x10000000000000003) >> 64;\n            }\n            if (x & 0x2 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n            if (x & 0x1 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n\n            // We're doing two things at the same time:\n            //\n            //   1. Multiply the result by 2^n + 1, where \"2^n\" is the integer part and the one is added to account for\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\n            //      rather than 192.\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\n            //\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \"ip\" is the integer part \"2^n\".\n            result *= 1e18;\n            result >>= (191 - (x >> 64));\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/Debond-v0/contracts/Bank2.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n\n\nimport './APM.sol';\nimport './DebondData.sol';\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IAPM.sol\";\nimport \"./interfaces/IData.sol\";\nimport \"./interfaces/IDebondBond.sol\";\nimport \"./interfaces/IDebondToken.sol\";\nimport \"./libraries/CDP.sol\";\nimport \"./libraries/PRBMathSD59x18.sol\";\n\n\ncontract Bank2 {\n\n    using CDP for uint256;\n    using SafeERC20 for IERC20;\n    using PRBMathSD59x18 for uint256;\n    IAPM apm;\n    IData debondData;\n    IDebondBond bond;\n    enum PurchaseMethod {Buying, Staking}\n    uint public constant BASE_TIMESTAMP = 1646089200; // 2022-03-01 00:00\n    uint public constant DIFF_TIME_NEW_NONCE = 24 * 3600; // every 24h we crate a new nonce.\n    uint public constant BENCHMARK_RATE_DECIMAL_18 = 5 * 10**16;\n    address DBITAddress;\n\n    constructor(\n        address apmAddress,\n        address dataAddress,\n        address bondAddress,\n        address _DBITAddress\n    ) {\n        apm = IAPM(apmAddress);\n        debondData = IData(dataAddress);\n        bond = IDebondBond(bondAddress);\n        DBITAddress = _DBITAddress;\n    }\n\n    modifier ensure(uint deadline) {\n        require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');\n        _;\n    }\n\n\n    function USDToDbitToMint(uint amountUSDDecimal8) public view returns (uint) {\n        uint DBITtotalSupply = IERC20(DBITAddress).totalSupply();\n        return amountUSDDecimal8 * CDP.BondExchangeRate(DBITtotalSupply);\n    }\n\n}\n"
    },
    "contracts/Debond-v0/contracts/DebondData.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n\nimport './interfaces/IData.sol';\nimport './libraries/CDP.sol';\n\n\ncontract DebondData is IData {\n    uint public constant SIX_M_PERIOD = 0; // 1 min period for tests\n\n    struct Class {\n        uint id;\n        bool exists;\n        string symbol;\n        InterestRateType interestRateType;\n        address tokenAddress;\n        uint periodTimestamp;\n        uint lastNonceIdCreated;\n        uint lastNonceIdCreatedTimestamp;\n    }\n\n    mapping(uint => Class) classes; // mapping from classId to class\n    // data to be exclusively for the front end (for now)\n    mapping(uint => uint[]) public purchasableClassesCollection;//from a debond class given return purchasable class ids associated\n    mapping(uint => mapping(uint => bool)) public purchasableClasses; //from a debond class given return purchasable class ids associated\n    uint[] debondClasses; // return collection of class that client can purchase (debond classes)\n\n    constructor(\n        address DBIT,\n        address USDC,\n        address USDT,\n        address DAI\n    ) {\n\n        addClass(0, \"D/BIT\", InterestRateType.FixedRate, DBIT, SIX_M_PERIOD);\n        addClass(1, \"USDC\", InterestRateType.FixedRate, USDC, SIX_M_PERIOD);\n        addClass(2, \"USDT\", InterestRateType.FixedRate, USDT, SIX_M_PERIOD);\n        addClass(3, \"DAI\", InterestRateType.FixedRate, DAI, SIX_M_PERIOD);\n\n        addClass(4, \"D/BIT\", InterestRateType.FloatingRate, DBIT, SIX_M_PERIOD);\n        addClass(5, \"USDC\", InterestRateType.FloatingRate, USDC, SIX_M_PERIOD);\n        addClass(6, \"USDT\", InterestRateType.FloatingRate, USDT, SIX_M_PERIOD);\n        addClass(7, \"DAI\", InterestRateType.FloatingRate, DAI, SIX_M_PERIOD);\n\n        debondClasses.push(0);\n        debondClasses.push(4);\n\n        assignClass(0, 1);\n        assignClass(0, 2);\n        assignClass(0, 3);\n        assignClass(4, 5);\n        assignClass(4, 6);\n        assignClass(4, 7);\n\n    }\n\n    /**\n     * @notice this method should only be called by the governance contract TODO Only Governance\n     */\n    function addClass(uint classId, string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp) public override {\n        Class storage class = classes[classId];\n        require(!class.exists, \"DebondData: cannot add an existing classId\");\n        class.id = classId;\n        class.exists = true;\n        class.symbol = symbol;\n        class.interestRateType = interestRateType;\n        class.tokenAddress = tokenAddress;\n        class.periodTimestamp = periodTimestamp;\n\n        // should maybe add an event\n    }\n\n    // TODO Only Governance\n    function updatePurchasableClass (uint debondClassId, uint purchaseClassId, bool purchasable) external override {\n        purchasableClasses[debondClassId][purchaseClassId] = purchasable;\n    }\n\n    function canPurchase(uint debondClassId, uint purchaseClassId) public view returns (bool) {\n        return purchasableClasses[debondClassId][purchaseClassId];\n    }\n\n    function getClassFromId(\n        uint classId\n    ) external view returns(string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp) {\n        Class storage class = classes[classId];\n        symbol = class.symbol;\n        periodTimestamp = class.periodTimestamp;\n        tokenAddress = class.tokenAddress;\n        interestRateType = class.interestRateType;\n        return (symbol, interestRateType, tokenAddress, periodTimestamp);\n    }\n\n    // TODO Only Bank\n    function getLastNonceCreated(uint classId) external view returns(uint nonceId, uint createdAt) {\n        Class storage class = classes[classId];\n        require(class.exists, \"Debond Data: class id given not found\");\n        nonceId = class.lastNonceIdCreated;\n        createdAt = class.lastNonceIdCreatedTimestamp;\n        return (nonceId, createdAt);\n    }\n\n    // TODO Only Bank\n    function updateLastNonce(uint classId, uint nonceId, uint createdAt) external {\n        Class storage class = classes[classId];\n        require(class.exists, \"Debond Data: class id given not found\");\n        class.lastNonceIdCreated = nonceId;\n        class.lastNonceIdCreatedTimestamp = createdAt;\n    }\n\n    function allDebondClasses() external view returns (uint[] memory) {\n        return debondClasses;\n    }\n\n    function getPurchasableClasses(uint debondClassId) external view returns (uint[] memory) {\n        return purchasableClassesCollection[debondClassId];\n    }\n\n    function isPurchasableClass(uint debondClassId, uint purchasableQueryClassId) external view returns (bool) {\n        return purchasableClasses[debondClassId][purchasableQueryClassId];\n    }\n\n    function assignClass(uint debondClass, uint purchaseClass) private {\n        purchasableClassesCollection[debondClass].push(purchaseClass);\n        purchasableClasses[debondClass][purchaseClass] = true;\n    }\n\n\n\n\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/Debond-v0/contracts/interfaces/IData.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\ninterface IData {\n\n    enum InterestRateType {FixedRate, FloatingRate}\n\n    function addClass(uint classId, string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp) external;\n\n    function updatePurchasableClass(uint debondClassId, uint purchaseClassId, bool purchasable) external;\n\n    function canPurchase(uint debondClassId , uint purchaseClassId) external view returns (bool);\n\n    function getClassFromId(uint classId) external view returns(string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp);\n\n    function getLastNonceCreated(uint classId) external view returns(uint nonceId, uint createdAt);\n\n    function updateLastNonce(uint classId, uint nonceId, uint createdAt) external;\n}\n"
    },
    "contracts/Debond-v0/contracts/interfaces/IDebondBond.sol": {
      "content": "pragma solidity 0.8.13;\n\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport \"./IERC3475.sol\";\nimport \"./IData.sol\";\n\n\ninterface IDebondBond is IERC3475 {\n\n    function isActive() external returns (bool);\n\n    function bondAmountDue(address tokenAddress, IData.InterestRateType interestRateType) external view returns (uint);\n\n    function createNonce(uint256 classId, uint256 nonceId, uint256 maturityTime, uint256 liqT) external;\n\n    function createClass(uint256 classId, string memory symbol, IData.InterestRateType interestRateType, address tokenAddress, uint256 periodTimestamp) external;\n\n    function classExists(uint256 classId) external view returns (bool);\n\n    function nonceExists(uint256 classId, uint256 nonceId) external view returns (bool);\n\n    function bondDetails(uint256 classId, uint256 nonceId) external view returns (string memory _symbol, IData.InterestRateType _interestRateType, address _tokenAddress, uint256 _periodTimestamp, uint256 _maturityDate, uint256 _issuanceDate);\n\n\n\n}\n\n"
    },
    "contracts/Debond-v0/contracts/interfaces/IDebondToken.sol": {
      "content": "pragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\ninterface IDebondToken is IERC20 {\n    function mint(address _to, uint256 _amount) external;\n}\n"
    },
    "contracts/Debond-v0/contracts/libraries/CDP.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: apache 2.0\n\nimport \"./SafeMath.sol\";\n/**\nfunctions for determining the amount of DBIT to be mint and pricing \n*/ \nlibrary CDP {\n using SafeMath for uint256;\n\n  function BondExchangeRate(uint256 _dbitTotalSupply) public pure returns (uint256 amount_bond) {\n\n             amount_bond = SafeMath.ln(_dbitTotalSupply * 1e13);\n\n    }\n\n    /**\n    * @dev convert a given amount of DBIT in USD and trhen this amount of USD in DBIT\n    * @param _amountToken the amount of token\n    * @param amountDBIT The amount of DBIT returned\n    */\n    function _conversionTokenToDBIT(uint256 _amountToken) internal pure returns(uint256 amountDBIT) {\n        // This must be done later when the oracle will be implemented\n        // Convert _amoutToken to USD and calculate how much DBIT we can buy with this amount of USD\n        // For now we suppose both tokens are tading at 1:1\n\n        amountDBIT = _amountToken;\n    }\n\n    /**\n    * @dev given the amount of tokens, returns the amout of DBIT to mint\n    * @param _amountToken the amount of token\n    * @param _dbitTotalSupply the total supply of DBIT\n    * @param amountDBIT The amount of DBIT to mint\n    */\n    function amountOfDBIT(uint256 _amountToken, uint256 _dbitTotalSupply) external pure returns(uint256 amountDBIT) {\n        require(_amountToken > 0, \"Debond: Provide some tokens\");\n\n        uint256 tokenToDBIT = _conversionTokenToDBIT(_amountToken);\n        uint256 rate = BondExchangeRate(_dbitTotalSupply);\n\n        amountDBIT = tokenToDBIT * rate;\n    }\n\n    function _amountOfDebondToMint(uint256 _dbitIn) internal pure returns (uint256 amountDBIT) {\n        // todo: mock token contract.\n        uint256 dbitMaxSupply = 10000;\n        uint256 dbitTotalSupply = 1000000;\n\n        require(_dbitIn > 0, \"SigmoidBank/NULL_VALUE\");\n        require(dbitTotalSupply.add(_dbitIn) <= dbitMaxSupply, \"insufficient value\");\n        // amount of of DBIT to mint\n        amountDBIT = _dbitIn * 10;\n    }\n\n    \n//    function _dbitUSDPrice() internal  returns(uint256) {\n//        return 100;\n//    }\n    \n    \n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'DebondLibrary: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'DebondLibrary: ZERO_ADDRESS');\n    }\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) internal pure returns (uint256 amountB) { /// use uint?? int256???\n        require(amountA > 0, 'DebondLibrary: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'DebondLibrary: INSUFFICIENT_LIQUIDITY');\n        //amountB = amountA.mul(reserveB) / reserveA;\n        amountB =  amountA * reserveB / reserveA;\n\n    }\n}\n\n"
    },
    "contracts/Debond-v0/contracts/libraries/PRBMathSD59x18.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\nimport \"./PRBMath.sol\";\n\n/// @title PRBMathSD59x18\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\nlibrary PRBMathSD59x18 {\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\n    int256 internal constant LOG2_E = 1_442695040888963407;\n\n    /// @dev Half the SCALE number.\n    int256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MAX_SD59x18 =\n    57896044618658097711785492504343953926634992332820282019728_792003956564819967;\n\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MAX_WHOLE_SD59x18 =\n    57896044618658097711785492504343953926634992332820282019728_000000000000000000;\n\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MIN_SD59x18 =\n    -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\n\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MIN_WHOLE_SD59x18 =\n    -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\n\n    /// @dev How many trailing decimals can be represented.\n    int256 internal constant SCALE = 1e18;\n\n    /// INTERNAL FUNCTIONS ///\n\n    /// @notice Calculate the absolute value of x.\n    ///\n    /// @dev Requirements:\n    /// - x must be greater than MIN_SD59x18.\n    ///\n    /// @param x The number to calculate the absolute value for.\n    /// @param result The absolute value of x.\n    function abs(int256 x) internal pure returns (int256 result) {\n    unchecked {\n        if (x == MIN_SD59x18) {\n            revert PRBMathSD59x18__AbsInputTooSmall();\n        }\n        result = x < 0 ? -x : x;\n    }\n    }\n\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\n        // The operations can never overflow.\n    unchecked {\n        int256 sum = (x >> 1) + (y >> 1);\n        if (sum < 0) {\n            // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\n            // right rounds down to infinity.\n            assembly {\n                result := add(sum, and(or(x, y), 1))\n            }\n        } else {\n            // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\n            // remainder gets truncated twice.\n            result = sum + (x & y & 1);\n        }\n    }\n    }\n\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\n    function ceil(int256 x) internal pure returns (int256 result) {\n        if (x > MAX_WHOLE_SD59x18) {\n            revert PRBMathSD59x18__CeilOverflow(x);\n        }\n    unchecked {\n        int256 remainder = x % SCALE;\n        if (remainder == 0) {\n            result = x;\n        } else {\n            // Solidity uses C fmod style, which returns a modulus with the same sign as x.\n            result = x - remainder;\n            if (x > 0) {\n                result += SCALE;\n            }\n        }\n    }\n    }\n\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\n    ///\n    /// @dev Variant of \"mulDiv\" that works with signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - All from \"PRBMath.mulDiv\".\n    /// - None of the inputs can be MIN_SD59x18.\n    /// - The denominator cannot be zero.\n    /// - The result must fit within int256.\n    ///\n    /// Caveats:\n    /// - All from \"PRBMath.mulDiv\".\n    ///\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\n            revert PRBMathSD59x18__DivInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x and y.\n        uint256 ax;\n        uint256 ay;\n    unchecked {\n        ax = x < 0 ? uint256(-x) : uint256(x);\n        ay = y < 0 ? uint256(-y) : uint256(y);\n    }\n\n        // Compute the absolute value of (x*SCALE)÷y. The result must fit within int256.\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\n        if (rAbs > uint256(MAX_SD59x18)) {\n            revert PRBMathSD59x18__DivOverflow(rAbs);\n        }\n\n        // Get the signs of x and y.\n        uint256 sx;\n        uint256 sy;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n        }\n\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\n        // should be positive. Otherwise, it should be negative.\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\n    function e() internal pure returns (int256 result) {\n        result = 2_718281828459045235;\n    }\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 133.084258667509499441.\n    ///\n    /// Caveats:\n    /// - All from \"exp2\".\n    /// - For any x less than -41.446531673892822322, the result is zero.\n    ///\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function exp(int256 x) internal pure returns (int256 result) {\n        // Without this check, the value passed to \"exp2\" would be less than -59.794705707972522261.\n        if (x < -41_446531673892822322) {\n            return 0;\n        }\n\n        // Without this check, the value passed to \"exp2\" would be greater than 192.\n        if (x >= 133_084258667509499441) {\n            revert PRBMathSD59x18__ExpInputTooBig(x);\n        }\n\n        // Do the fixed-point multiplication inline to save gas.\n    unchecked {\n        int256 doubleScaleProduct = x * LOG2_E;\n        result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\n    }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 192 or less.\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - For any x less than -59.794705707972522261, the result is zero.\n    ///\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function exp2(int256 x) internal pure returns (int256 result) {\n        // This works because 2^(-x) = 1/2^x.\n        if (x < 0) {\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\n            if (x < -59_794705707972522261) {\n                return 0;\n            }\n\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\n        unchecked {\n            result = 1e36 / exp2(-x);\n        }\n        } else {\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n            if (x >= 192e18) {\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\n            }\n\n        unchecked {\n            // Convert x to the 192.64-bit fixed-point format.\n            uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\n\n            // Safe to convert the result to int256 directly because the maximum input allowed is 192.\n            result = int256(PRBMath.exp2(x192x64));\n        }\n        }\n    }\n\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\n    function floor(int256 x) internal pure returns (int256 result) {\n        if (x < MIN_WHOLE_SD59x18) {\n            revert PRBMathSD59x18__FloorUnderflow(x);\n        }\n    unchecked {\n        int256 remainder = x % SCALE;\n        if (remainder == 0) {\n            result = x;\n        } else {\n            // Solidity uses C fmod style, which returns a modulus with the same sign as x.\n            result = x - remainder;\n            if (x < 0) {\n                result -= SCALE;\n            }\n        }\n    }\n    }\n\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\n    /// of the radix point for negative numbers.\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\n    function frac(int256 x) internal pure returns (int256 result) {\n    unchecked {\n        result = x % SCALE;\n    }\n    }\n\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\n    ///\n    /// @dev Requirements:\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\n    ///\n    /// @param x The basic integer to convert.\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\n    function fromInt(int256 x) internal pure returns (int256 result) {\n    unchecked {\n        if (x < MIN_SD59x18 / SCALE) {\n            revert PRBMathSD59x18__FromIntUnderflow(x);\n        }\n        if (x > MAX_SD59x18 / SCALE) {\n            revert PRBMathSD59x18__FromIntOverflow(x);\n        }\n        result = x * SCALE;\n    }\n    }\n\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\n    ///\n    /// @dev Requirements:\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\n    /// - x * y cannot be negative.\n    ///\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n    unchecked {\n        // Checking for overflow this way is faster than letting Solidity do it.\n        int256 xy = x * y;\n        if (xy / x != y) {\n            revert PRBMathSD59x18__GmOverflow(x, y);\n        }\n\n        // The product cannot be negative.\n        if (xy < 0) {\n            revert PRBMathSD59x18__GmNegativeProduct(x, y);\n        }\n\n        // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\n        // during multiplication. See the comments within the \"sqrt\" function.\n        result = int256(PRBMath.sqrt(uint256(xy)));\n    }\n    }\n\n    /// @notice Calculates 1 / x, rounding toward zero.\n    ///\n    /// @dev Requirements:\n    /// - x cannot be zero.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\n    function inv(int256 x) internal pure returns (int256 result) {\n    unchecked {\n        // 1e36 is SCALE * SCALE.\n        result = 1e36 / x;\n    }\n    }\n\n    /// @notice Calculates the natural logarithm of x.\n    ///\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\n    function ln(int256 x) internal pure returns (int256 result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 195205294292027477728.\n    unchecked {\n        result = (log2(x) * SCALE) / LOG2_E;\n    }\n    }\n\n    /// @notice Calculates the common logarithm of x.\n    ///\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\n    function log10(int256 x) internal pure returns (int256 result) {\n        if (x <= 0) {\n            revert PRBMathSD59x18__LogInputTooSmall(x);\n        }\n\n        // Note that the \"mul\" in this block is the assembly mul operation, not the \"mul\" function defined in this contract.\n        // prettier-ignore\n        assembly {\n            switch x\n            case 1 { result := mul(SCALE, sub(0, 18)) }\n            case 10 { result := mul(SCALE, sub(1, 18)) }\n            case 100 { result := mul(SCALE, sub(2, 18)) }\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\n            case 1000000000000000000 { result := 0 }\n            case 10000000000000000000 { result := SCALE }\n            case 100000000000000000000 { result := mul(SCALE, 2) }\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\n            default {\n                result := MAX_SD59x18\n            }\n        }\n\n        if (result == MAX_SD59x18) {\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\n        unchecked {\n            result = (log2(x) * SCALE) / 3_321928094887362347;\n        }\n        }\n    }\n\n    /// @notice Calculates the binary logarithm of x.\n    ///\n    /// @dev Based on the iterative approximation algorithm.\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n    ///\n    /// Requirements:\n    /// - x must be greater than zero.\n    ///\n    /// Caveats:\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\n    function log2(int256 x) internal pure returns (int256 result) {\n        if (x <= 0) {\n            revert PRBMathSD59x18__LogInputTooSmall(x);\n        }\n    unchecked {\n        // This works because log2(x) = -log2(1/x).\n        int256 sign;\n        if (x >= SCALE) {\n            sign = 1;\n        } else {\n            sign = -1;\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\n            assembly {\n                x := div(1000000000000000000000000000000000000, x)\n            }\n        }\n\n        // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n        uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\n\n        // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\n        // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\n        result = int256(n) * SCALE;\n\n        // This is y = x * 2^(-n).\n        int256 y = x >> n;\n\n        // If y = 1, the fractional part is zero.\n        if (y == SCALE) {\n            return result * sign;\n        }\n\n        // Calculate the fractional part via the iterative approximation.\n        // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n        for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\n            y = (y * y) / SCALE;\n\n            // Is y^2 > 2 and so in the range [2,4)?\n            if (y >= 2 * SCALE) {\n                // Add the 2^(-m) factor to the logarithm.\n                result += delta;\n\n                // Corresponds to z/2 on Wikipedia.\n                y >>= 1;\n            }\n        }\n        result *= sign;\n    }\n    }\n\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\n    /// fixed-point number.\n    ///\n    /// @dev Variant of \"mulDiv\" that works with signed numbers and employs constant folding, i.e. the denominator is\n    /// always 1e18.\n    ///\n    /// Requirements:\n    /// - All from \"PRBMath.mulDivFixedPoint\".\n    /// - None of the inputs can be MIN_SD59x18\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    ///\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\n            revert PRBMathSD59x18__MulInputTooSmall();\n        }\n\n    unchecked {\n        uint256 ax;\n        uint256 ay;\n        ax = x < 0 ? uint256(-x) : uint256(x);\n        ay = y < 0 ? uint256(-y) : uint256(y);\n\n        uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\n        if (rAbs > uint256(MAX_SD59x18)) {\n            revert PRBMathSD59x18__MulOverflow(rAbs);\n        }\n\n        uint256 sx;\n        uint256 sy;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n        }\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\n    }\n    }\n\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\n    function pi() internal pure returns (int256 result) {\n        result = 3_141592653589793238;\n    }\n\n    /// @notice Raises x to the power of y.\n    ///\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\n    ///\n    /// Requirements:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - z cannot be zero.\n    ///\n    /// Caveats:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == 0) {\n            result = y == 0 ? SCALE : int256(0);\n        } else {\n            result = exp2(mul(log2(x), y));\n        }\n    }\n\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\n    /// famous algorithm \"exponentiation by squaring\".\n    ///\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    ///\n    /// Requirements:\n    /// - All from \"abs\" and \"PRBMath.mulDivFixedPoint\".\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - All from \"PRBMath.mulDivFixedPoint\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\n    /// @param y The exponent as an uint256.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\n        uint256 xAbs = uint256(abs(x));\n\n        // Calculate the first iteration of the loop in advance.\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\n\n        // Equivalent to \"for(y /= 2; y > 0; y /= 2)\" but faster.\n        uint256 yAux = y;\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\n\n            // Equivalent to \"y % 2 == 1\" but faster.\n            if (yAux & 1 > 0) {\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\n            }\n        }\n\n        // The result must fit within the 59.18-decimal fixed-point representation.\n        if (rAbs > uint256(MAX_SD59x18)) {\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\n        }\n\n        // Is the base negative and the exponent an odd number?\n        bool isNegative = x < 0 && y & 1 == 1;\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\n    function scale() internal pure returns (int256 result) {\n        result = SCALE;\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Requirements:\n    /// - x cannot be negative.\n    /// - x must be less than MAX_SD59x18 / SCALE.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\n    /// @return result The result as a signed 59.18-decimal fixed-point .\n    function sqrt(int256 x) internal pure returns (int256 result) {\n    unchecked {\n        if (x < 0) {\n            revert PRBMathSD59x18__SqrtNegativeInput(x);\n        }\n        if (x > MAX_SD59x18 / SCALE) {\n            revert PRBMathSD59x18__SqrtOverflow(x);\n        }\n        // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\n        // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\n        result = int256(PRBMath.sqrt(uint256(x * SCALE)));\n    }\n    }\n\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\n    /// @return result The same number in basic integer form.\n    function toInt(int256 x) internal pure returns (int256 result) {\n    unchecked {\n        result = x / SCALE;\n    }\n    }\n\n\n\n    function sigmoid(int256 _x , int256 _c) internal pure returns (int256 result) {\n        if(_x == 0) {\n            result = 0;\n        }\n        else if(_x == 1) {\n            result = 1;\n        }\n        else{\n            int256 temp1;\n            int256 temp2;\n\n            assembly{\n                temp1 := sub(_c,1000000000000000000)\n                temp2 := sub(_x,1000000000000000000)\n            }\n\n            temp1 = mul(temp1, _x);\n            temp2 = mul(temp2 ,_c);\n\n            temp1 = inv(temp1);\n            temp2 = inv(temp2);\n\n            temp1 = exp2(temp1); //because temp1 = exp2(mul(temp2,log2(2)), with log2(2)=1\n            temp2 = exp2(temp2);\n\n            result = div(temp1, temp1 + temp2);\n        }\n    }\n\n\n    function fib(uint n) public pure returns(uint a) {\n        if (n == 0) {\n            return 0;\n        }\n        uint h = n / 2;\n        uint mask = 1;\n        // find highest set bit in n\n        while(mask <= h) {\n            mask <<= 1;\n        }\n        mask >>= 1;\n        a = 1;\n        uint b = 1;\n        uint c;\n        while(mask > 0) {\n            c = a * a+b * b;\n            if (n & mask > 0) {\n                b = b * (b + 2 * a);\n                a = c;\n            } else {\n                a = a * (2 * b - a);\n                b = c;\n            }\n            mask >>= 1;\n        }\n        return a;\n    }\n\n}\n\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Debond-v0/contracts/interfaces/IERC3475.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: MIT\n\ninterface IERC3475 {\n    // WRITE\n\n    /**\n     * @dev allows the transfer of a bond type from an address to another.\n     * @param from argument is the address of the holder whose balance about to decrees.\n     * @param to argument is the address of the recipient whose balance is about to increased.\n     * @param classId is the classId of bond, the first bond class created will be 0, and so on.\n     * @param nonceId is the nonceId of the given bond class. This param is for distinctions of the issuing conditions of the bond.\n     * @param amount is the amount of the bond, that will be transferred from \"_from\" address to \"_to\" address.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 classId,\n        uint256 nonceId,\n        uint256 amount\n    ) external;\n\n    /**\n     * @dev  allows issuing any number of bond types to an address.\n     * The calling of this function needs to be restricted to bond issuer contract.\n     * @param to is the address to which the bond will be issued.\n     * @param classId is the classId of the bond, the first bond class created will be 0, and so on.\n     * @param nonceId is the nonceId of the given bond class. This param is for distinctions of the issuing conditions of the bond.\n     * @param amount is the amount of the bond, that \"to\" address will receive.\n     */\n    function issue(\n        address to,\n        uint256 classId,\n        uint256 nonceId,\n        uint256 amount\n    ) external;\n\n    /**\n     * @dev  allows redemption of any number of bond types from an address.\n     * The calling of this function needs to be restricted to bond issuer contract.\n     * @param from is the address from which the bond will be redeemed.\n     * @param classId is the class nonce of bond, the first bond class created will be 0, and so on.\n     * @param nonceId is the nonce of the given bond class. This param is for distinctions of the issuing conditions of the bond.\n     * @param amount is the amount of the bond, that \"from\" address will redeem.\n     */\n    function redeem(\n        address from,\n        uint256 classId,\n        uint256 nonceId,\n        uint256 amount\n    ) external;\n\n    /**\n     * @dev  allows the transfer of any number of bond types from an address to another.\n     * The calling of this function needs to be restricted to bond issuer contract.\n     * @param from argument is the address of the holder whose balance about to decrees.\n     * @param classId is the class nonce of bond, the first bond class created will be 0, and so on.\n     * @param nonceId is the nonce of the given bond class. This param is for distinctions of the issuing conditions of the bond.\n     * @param amount is the amount of the bond, that will be transferred from \"_from\"address to \"_to\" address.\n     */\n    function burn(\n        address from,\n        uint256 classId,\n        uint256 nonceId,\n        uint256 amount\n    ) external;\n\n    /**\n     * @dev Allows spender to withdraw from your account multiple times, up to the amount.\n     * @notice If this function is called again it overwrites the current allowance with amount.\n     * @param spender is the address the caller approve for his bonds\n     * @param classId is the classId nonce of bond, the first bond class created will be 0, and so on.\n     * @param nonceId is the nonceId of the given bond class. This param is for distinctions of the issuing conditions of the bond.\n     * @param amount is the amount of the bond that the spender is approved for.\n     */\n    function approve(\n        address spender,\n        uint256 classId,\n        uint256 nonceId,\n        uint256 amount\n    ) external;\n\n    /**\n     * @notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\n     * @dev MUST emit the ApprovalForAll event on success.\n     * @param operator  Address to add to the set of authorized operators\n     * @param classId is the classId nonce of bond, the first bond class created will be 0, and so on.\n     * @param approved  True if the operator is approved, false to revoke approval\n     */\n    function setApprovalFor(\n        address operator,\n        uint256 classId,\n        bool approved\n    ) external;\n\n    /**\n     * @dev Allows spender to withdraw bonds from your account multiple times, up to the amount.\n     * @notice If this function is called again it overwrites the current allowance with amount.\n     * @param spender is the address the caller approve for his bonds.\n     * @param classIds is the list of classIds of bond.\n     * @param nonceIds is the list of nonceIds of the given bond class.\n     * @param amounts is the list of amounts of the bond that the spender is approved for.\n     */\n    function batchApprove(\n        address spender,\n        uint256[] calldata classIds,\n        uint256[] calldata nonceIds,\n        uint256[] calldata amounts\n    ) external;\n\n    // READ\n\n    /**\n     * @dev Returns the total supply of the bond in question\n     */\n    function totalSupply(uint256 classId, uint256 nonceId)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Returns the redeemed supply of the bond in question\n     */\n    function redeemedSupply(uint256 classId, uint256 nonceId)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Returns the active supply of the bond in question\n     */\n    function activeSupply(uint256 classId, uint256 nonceId)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Returns the burned supply of the bond in question\n     */\n    function burnedSupply(uint256 classId, uint256 nonceId)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Returns the balance of the giving bond classId and bond nonce\n     */\n    function balanceOf(\n        address account,\n        uint256 classId,\n        uint256 nonceId\n    ) external view returns (uint256);\n\n    /**\n     * @dev Returns the symbol of the giving bond classId\n     */\n    function symbol(uint256 classId) external view returns (string memory);\n\n    /**\n     * @dev Returns the informations for the class of given classId\n     * @notice Every bond contract can have their own list of class informations\n     */\n    function classInfos(uint256 classId)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Returns the information description for a given class info\n     * @notice Every bond contract can have their own list of class informations\n     */\n    function classInfoDescription(uint256 classInfo)\n        external\n        view\n        returns (string memory);\n\n    /**\n     * @dev Returns the information description for a given nonce info\n     * @notice Every bond contract can have their own list of nonce informations\n     */\n    function nonceInfoDescription(uint256 nonceInfo)\n        external\n        view\n        returns (string memory);\n\n    /**\n     * @dev Returns the informations for the nonce of given classId and nonceId\n     * @notice Every bond contract can have their own list. But the first uint256 in the list MUST be the UTC time code of the issuing time.\n     */\n    function nonceInfos(uint256 classId, uint256 nonceId)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev  allows anyone to check if a bond is redeemable.\n     * @notice the conditions of redemption can be specified with one or several internal functions.\n     */\n    function isRedeemable(uint256 classId, uint256 nonceId)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @notice  Returns the amount which spender is still allowed to withdraw from owner.\n     */\n    function allowance(\n        address owner,\n        address spender,\n        uint256 classId,\n        uint256 nonceId\n    ) external view returns (uint256);\n\n    /**\n     * @notice Queries the approval status of an operator for a given owner.\n     * @return True if the operator is approved, false if not\n     */\n    function isApprovedFor(\n        address owner,\n        address operator,\n        uint256 classId\n    ) external view returns (bool);\n\n    /**\n     * @notice MUST trigger when tokens are transferred, including zero value transfers.\n     */\n    event Transfer(\n        address indexed _operator,\n        address indexed _from,\n        address indexed _to,\n        uint256 classId,\n        uint256 nonceId,\n        uint256 amount\n    );\n\n    /**\n     * @notice MUST trigger when tokens are issued\n     */\n    event Issue(\n        address indexed _operator,\n        address indexed _to,\n        uint256 classId,\n        uint256 nonceId,\n        uint256 amount\n    );\n\n    /**\n     * @notice MUST trigger when tokens are redeemed\n     */\n    event Redeem(\n        address indexed _operator,\n        address indexed _from,\n        uint256 classId,\n        uint256 nonceId,\n        uint256 amount\n    );\n\n    /**\n     * @notice MUST trigger when tokens are burned\n     */\n    event Burn(\n        address indexed _operator,\n        address indexed _from,\n        uint256 classId,\n        uint256 nonceId,\n        uint256 amount\n    );\n\n    /**\n     * @dev MUST emit when approval for a second party/operator address to manage all bonds from a classId given for an owner address is enabled or disabled (absence of an event assumes disabled).\n     */\n    event ApprovalFor(\n        address indexed _owner,\n        address indexed _operator,\n        uint256 classId,\n        bool _approved\n    );\n}\n"
    },
    "contracts/Debond-v0/contracts/libraries/PRBMath.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\n/// @notice Emitted when the result overflows uint256.\n    error PRBMath__MulDivFixedPointOverflow(uint256 prod1);\n\n/// @notice Emitted when the result overflows uint256.\n    error PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\n\n/// @notice Emitted when one of the inputs is type(int256).min.\n    error PRBMath__MulDivSignedInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows int256.\n    error PRBMath__MulDivSignedOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is MIN_SD59x18.\n    error PRBMathSD59x18__AbsInputTooSmall();\n\n/// @notice Emitted when ceiling a number overflows SD59x18.\n    error PRBMathSD59x18__CeilOverflow(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\n    error PRBMathSD59x18__DivInputTooSmall();\n\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\n    error PRBMathSD59x18__DivOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\n    error PRBMathSD59x18__ExpInputTooBig(int256 x);\n\n/// @notice Emitted when the input is greater than 192.\n    error PRBMathSD59x18__Exp2InputTooBig(int256 x);\n\n/// @notice Emitted when flooring a number underflows SD59x18.\n    error PRBMathSD59x18__FloorUnderflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\n    error PRBMathSD59x18__FromIntOverflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\n    error PRBMathSD59x18__FromIntUnderflow(int256 x);\n\n/// @notice Emitted when the product of the inputs is negative.\n    error PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\n\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\n    error PRBMathSD59x18__GmOverflow(int256 x, int256 y);\n\n/// @notice Emitted when the input is less than or equal to zero.\n    error PRBMathSD59x18__LogInputTooSmall(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\n    error PRBMathSD59x18__MulInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\n    error PRBMathSD59x18__MulOverflow(uint256 rAbs);\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\n    error PRBMathSD59x18__PowuOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is negative.\n    error PRBMathSD59x18__SqrtNegativeInput(int256 x);\n\n/// @notice Emitted when the calculating the square root overflows SD59x18.\n    error PRBMathSD59x18__SqrtOverflow(int256 x);\n\n/// @notice Emitted when addition overflows UD60x18.\n    error PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when ceiling a number overflows UD60x18.\n    error PRBMathUD60x18__CeilOverflow(uint256 x);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\n    error PRBMathUD60x18__ExpInputTooBig(uint256 x);\n\n/// @notice Emitted when the input is greater than 192.\n    error PRBMathUD60x18__Exp2InputTooBig(uint256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\n    error PRBMathUD60x18__FromUintOverflow(uint256 x);\n\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\n    error PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when the input is less than 1.\n    error PRBMathUD60x18__LogInputTooSmall(uint256 x);\n\n/// @notice Emitted when the calculating the square root overflows UD60x18.\n    error PRBMathUD60x18__SqrtOverflow(uint256 x);\n\n/// @notice Emitted when subtraction underflows UD60x18.\n    error PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\n\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\nlibrary PRBMath {\n    /// STRUCTS ///\n\n    struct SD59x18 {\n        int256 value;\n    }\n\n    struct UD60x18 {\n        uint256 value;\n    }\n\n    /// STORAGE ///\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @dev Largest power of two divisor of SCALE.\n    uint256 internal constant SCALE_LPOTD = 262144;\n\n    /// @dev SCALE inverted mod 2^256.\n    uint256 internal constant SCALE_INVERSE =\n    78156646155174841979727994598816262306175212592076161876661_508869554232690281;\n\n    /// FUNCTIONS ///\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    /// @dev Has to use 192.64-bit fixed-point numbers.\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n    unchecked {\n        // Start from 0.5 in the 192.64-bit fixed-point format.\n        result = 0x800000000000000000000000000000000000000000000000;\n\n        // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\n        // because the initial result is 2^191 and all magic factors are less than 2^65.\n        if (x & 0x8000000000000000 > 0) {\n            result = (result * 0x16A09E667F3BCC909) >> 64;\n        }\n        if (x & 0x4000000000000000 > 0) {\n            result = (result * 0x1306FE0A31B7152DF) >> 64;\n        }\n        if (x & 0x2000000000000000 > 0) {\n            result = (result * 0x1172B83C7D517ADCE) >> 64;\n        }\n        if (x & 0x1000000000000000 > 0) {\n            result = (result * 0x10B5586CF9890F62A) >> 64;\n        }\n        if (x & 0x800000000000000 > 0) {\n            result = (result * 0x1059B0D31585743AE) >> 64;\n        }\n        if (x & 0x400000000000000 > 0) {\n            result = (result * 0x102C9A3E778060EE7) >> 64;\n        }\n        if (x & 0x200000000000000 > 0) {\n            result = (result * 0x10163DA9FB33356D8) >> 64;\n        }\n        if (x & 0x100000000000000 > 0) {\n            result = (result * 0x100B1AFA5ABCBED61) >> 64;\n        }\n        if (x & 0x80000000000000 > 0) {\n            result = (result * 0x10058C86DA1C09EA2) >> 64;\n        }\n        if (x & 0x40000000000000 > 0) {\n            result = (result * 0x1002C605E2E8CEC50) >> 64;\n        }\n        if (x & 0x20000000000000 > 0) {\n            result = (result * 0x100162F3904051FA1) >> 64;\n        }\n        if (x & 0x10000000000000 > 0) {\n            result = (result * 0x1000B175EFFDC76BA) >> 64;\n        }\n        if (x & 0x8000000000000 > 0) {\n            result = (result * 0x100058BA01FB9F96D) >> 64;\n        }\n        if (x & 0x4000000000000 > 0) {\n            result = (result * 0x10002C5CC37DA9492) >> 64;\n        }\n        if (x & 0x2000000000000 > 0) {\n            result = (result * 0x1000162E525EE0547) >> 64;\n        }\n        if (x & 0x1000000000000 > 0) {\n            result = (result * 0x10000B17255775C04) >> 64;\n        }\n        if (x & 0x800000000000 > 0) {\n            result = (result * 0x1000058B91B5BC9AE) >> 64;\n        }\n        if (x & 0x400000000000 > 0) {\n            result = (result * 0x100002C5C89D5EC6D) >> 64;\n        }\n        if (x & 0x200000000000 > 0) {\n            result = (result * 0x10000162E43F4F831) >> 64;\n        }\n        if (x & 0x100000000000 > 0) {\n            result = (result * 0x100000B1721BCFC9A) >> 64;\n        }\n        if (x & 0x80000000000 > 0) {\n            result = (result * 0x10000058B90CF1E6E) >> 64;\n        }\n        if (x & 0x40000000000 > 0) {\n            result = (result * 0x1000002C5C863B73F) >> 64;\n        }\n        if (x & 0x20000000000 > 0) {\n            result = (result * 0x100000162E430E5A2) >> 64;\n        }\n        if (x & 0x10000000000 > 0) {\n            result = (result * 0x1000000B172183551) >> 64;\n        }\n        if (x & 0x8000000000 > 0) {\n            result = (result * 0x100000058B90C0B49) >> 64;\n        }\n        if (x & 0x4000000000 > 0) {\n            result = (result * 0x10000002C5C8601CC) >> 64;\n        }\n        if (x & 0x2000000000 > 0) {\n            result = (result * 0x1000000162E42FFF0) >> 64;\n        }\n        if (x & 0x1000000000 > 0) {\n            result = (result * 0x10000000B17217FBB) >> 64;\n        }\n        if (x & 0x800000000 > 0) {\n            result = (result * 0x1000000058B90BFCE) >> 64;\n        }\n        if (x & 0x400000000 > 0) {\n            result = (result * 0x100000002C5C85FE3) >> 64;\n        }\n        if (x & 0x200000000 > 0) {\n            result = (result * 0x10000000162E42FF1) >> 64;\n        }\n        if (x & 0x100000000 > 0) {\n            result = (result * 0x100000000B17217F8) >> 64;\n        }\n        if (x & 0x80000000 > 0) {\n            result = (result * 0x10000000058B90BFC) >> 64;\n        }\n        if (x & 0x40000000 > 0) {\n            result = (result * 0x1000000002C5C85FE) >> 64;\n        }\n        if (x & 0x20000000 > 0) {\n            result = (result * 0x100000000162E42FF) >> 64;\n        }\n        if (x & 0x10000000 > 0) {\n            result = (result * 0x1000000000B17217F) >> 64;\n        }\n        if (x & 0x8000000 > 0) {\n            result = (result * 0x100000000058B90C0) >> 64;\n        }\n        if (x & 0x4000000 > 0) {\n            result = (result * 0x10000000002C5C860) >> 64;\n        }\n        if (x & 0x2000000 > 0) {\n            result = (result * 0x1000000000162E430) >> 64;\n        }\n        if (x & 0x1000000 > 0) {\n            result = (result * 0x10000000000B17218) >> 64;\n        }\n        if (x & 0x800000 > 0) {\n            result = (result * 0x1000000000058B90C) >> 64;\n        }\n        if (x & 0x400000 > 0) {\n            result = (result * 0x100000000002C5C86) >> 64;\n        }\n        if (x & 0x200000 > 0) {\n            result = (result * 0x10000000000162E43) >> 64;\n        }\n        if (x & 0x100000 > 0) {\n            result = (result * 0x100000000000B1721) >> 64;\n        }\n        if (x & 0x80000 > 0) {\n            result = (result * 0x10000000000058B91) >> 64;\n        }\n        if (x & 0x40000 > 0) {\n            result = (result * 0x1000000000002C5C8) >> 64;\n        }\n        if (x & 0x20000 > 0) {\n            result = (result * 0x100000000000162E4) >> 64;\n        }\n        if (x & 0x10000 > 0) {\n            result = (result * 0x1000000000000B172) >> 64;\n        }\n        if (x & 0x8000 > 0) {\n            result = (result * 0x100000000000058B9) >> 64;\n        }\n        if (x & 0x4000 > 0) {\n            result = (result * 0x10000000000002C5D) >> 64;\n        }\n        if (x & 0x2000 > 0) {\n            result = (result * 0x1000000000000162E) >> 64;\n        }\n        if (x & 0x1000 > 0) {\n            result = (result * 0x10000000000000B17) >> 64;\n        }\n        if (x & 0x800 > 0) {\n            result = (result * 0x1000000000000058C) >> 64;\n        }\n        if (x & 0x400 > 0) {\n            result = (result * 0x100000000000002C6) >> 64;\n        }\n        if (x & 0x200 > 0) {\n            result = (result * 0x10000000000000163) >> 64;\n        }\n        if (x & 0x100 > 0) {\n            result = (result * 0x100000000000000B1) >> 64;\n        }\n        if (x & 0x80 > 0) {\n            result = (result * 0x10000000000000059) >> 64;\n        }\n        if (x & 0x40 > 0) {\n            result = (result * 0x1000000000000002C) >> 64;\n        }\n        if (x & 0x20 > 0) {\n            result = (result * 0x10000000000000016) >> 64;\n        }\n        if (x & 0x10 > 0) {\n            result = (result * 0x1000000000000000B) >> 64;\n        }\n        if (x & 0x8 > 0) {\n            result = (result * 0x10000000000000006) >> 64;\n        }\n        if (x & 0x4 > 0) {\n            result = (result * 0x10000000000000003) >> 64;\n        }\n        if (x & 0x2 > 0) {\n            result = (result * 0x10000000000000001) >> 64;\n        }\n        if (x & 0x1 > 0) {\n            result = (result * 0x10000000000000001) >> 64;\n        }\n\n        // We're doing two things at the same time:\n        //\n        //   1. Multiply the result by 2^n + 1, where \"2^n\" is the integer part and the one is added to account for\n        //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\n        //      rather than 192.\n        //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\n        //\n        // This works because 2^(191-ip) = 2^ip / 2^191, where \"ip\" is the integer part \"2^n\".\n        result *= SCALE;\n        result >>= (191 - (x >> 64));\n    }\n    }\n\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\n    /// @dev See the note on msb in the \"Find First Set\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\n    /// @param x The uint256 number for which to find the index of the most significant bit.\n    /// @return msb The index of the most significant bit as an uint256.\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        if (x >= 2**128) {\n            x >>= 128;\n            msb += 128;\n        }\n        if (x >= 2**64) {\n            x >>= 64;\n            msb += 64;\n        }\n        if (x >= 2**32) {\n            x >>= 32;\n            msb += 32;\n        }\n        if (x >= 2**16) {\n            x >>= 16;\n            msb += 16;\n        }\n        if (x >= 2**8) {\n            x >>= 8;\n            msb += 8;\n        }\n        if (x >= 2**4) {\n            x >>= 4;\n            msb += 4;\n        }\n        if (x >= 2**2) {\n            x >>= 2;\n            msb += 2;\n        }\n        if (x >= 2**1) {\n            // No need to shift x any more.\n            msb += 1;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The multiplicand as an uint256.\n    /// @param y The multiplier as an uint256.\n    /// @param denominator The divisor as an uint256.\n    /// @return result The result as an uint256.\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n        unchecked {\n            result = prod0 / denominator;\n        }\n            return result;\n        }\n\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        if (prod1 >= denominator) {\n            revert PRBMath__MulDivOverflow(prod1, denominator);\n        }\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n        // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n\n        // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n    unchecked {\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 lpotdod = denominator & (~denominator + 1);\n        assembly {\n        // Divide denominator by lpotdod.\n            denominator := div(denominator, lpotdod)\n\n        // Divide [prod1 prod0] by lpotdod.\n            prod0 := div(prod0, lpotdod)\n\n        // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\n            lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n        }\n\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * lpotdod;\n\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n    }\n\n    /// @notice Calculates floor(x*y÷1e18) with full precision.\n    ///\n    /// @dev Variant of \"mulDiv\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\n    /// being rounded to 1e-18.  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717.\n    ///\n    /// Requirements:\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\n    ///     1. x * y = type(uint256).max * SCALE\n    ///     2. (x * y) % SCALE >= SCALE / 2\n    ///\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        uint256 prod0;\n        uint256 prod1;\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        if (prod1 >= SCALE) {\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\n        }\n\n        uint256 remainder;\n        uint256 roundUpUnit;\n        assembly {\n            remainder := mulmod(x, y, SCALE)\n            roundUpUnit := gt(remainder, 499999999999999999)\n        }\n\n        if (prod1 == 0) {\n        unchecked {\n            result = (prod0 / SCALE) + roundUpUnit;\n            return result;\n        }\n        }\n\n        assembly {\n            result := add(\n            mul(\n            or(\n            div(sub(prod0, remainder), SCALE_LPOTD),\n            mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\n            ),\n            SCALE_INVERSE\n            ),\n            roundUpUnit\n            )\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev An extension of \"mulDiv\" for signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - None of the inputs can be type(int256).min.\n    /// - The result must fit within int256.\n    ///\n    /// @param x The multiplicand as an int256.\n    /// @param y The multiplier as an int256.\n    /// @param denominator The divisor as an int256.\n    /// @return result The result as an int256.\n    function mulDivSigned(\n        int256 x,\n        int256 y,\n        int256 denominator\n    ) internal pure returns (int256 result) {\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\n            revert PRBMath__MulDivSignedInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x, y and the denominator.\n        uint256 ax;\n        uint256 ay;\n        uint256 ad;\n    unchecked {\n        ax = x < 0 ? uint256(-x) : uint256(x);\n        ay = y < 0 ? uint256(-y) : uint256(y);\n        ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\n    }\n\n        // Compute the absolute value of (x*y)÷denominator. The result must fit within int256.\n        uint256 rAbs = mulDiv(ax, ay, ad);\n        if (rAbs > uint256(type(int256).max)) {\n            revert PRBMath__MulDivSignedOverflow(rAbs);\n        }\n\n        // Get the signs of x, y and the denominator.\n        uint256 sx;\n        uint256 sy;\n        uint256 sd;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n            sd := sgt(denominator, sub(0, 1))\n        }\n\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\n        // If yes, the result should be negative.\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The uint256 number for which to calculate the square root.\n    /// @return result The result as an uint256.\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\n        uint256 xAux = uint256(x);\n        result = 1;\n        if (xAux >= 0x100000000000000000000000000000000) {\n            xAux >>= 128;\n            result <<= 64;\n        }\n        if (xAux >= 0x10000000000000000) {\n            xAux >>= 64;\n            result <<= 32;\n        }\n        if (xAux >= 0x100000000) {\n            xAux >>= 32;\n            result <<= 16;\n        }\n        if (xAux >= 0x10000) {\n            xAux >>= 16;\n            result <<= 8;\n        }\n        if (xAux >= 0x100) {\n            xAux >>= 8;\n            result <<= 4;\n        }\n        if (xAux >= 0x10) {\n            xAux >>= 4;\n            result <<= 2;\n        }\n        if (xAux >= 0x8) {\n            result <<= 1;\n        }\n\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\n    unchecked {\n        result = (result + x / result) >> 1;\n        result = (result + x / result) >> 1;\n        result = (result + x / result) >> 1;\n        result = (result + x / result) >> 1;\n        result = (result + x / result) >> 1;\n        result = (result + x / result) >> 1;\n        result = (result + x / result) >> 1; // Seven iterations should be enough\n        uint256 roundedDownResult = x / result;\n        return result >= roundedDownResult ? roundedDownResult : result;\n    }\n    }\n\n\n}\n"
    },
    "contracts/Debond-v0/contracts/Bank.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n\n\nimport './APM.sol';\nimport './DebondData.sol';\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IAPM.sol\";\nimport \"./interfaces/IData.sol\";\nimport \"./interfaces/IDebondBond.sol\";\nimport \"./interfaces/IDebondToken.sol\";\nimport \"./libraries/CDP.sol\";\nimport \"./libraries/PRBMathSD59x18.sol\";\n\n\ncontract Bank {\n\n    using CDP for uint256;\n    using SafeERC20 for IERC20;\n    using PRBMathSD59x18 for uint256;\n\n\n    IAPM apm;\n    IData debondData;\n    IDebondBond bond;\n    enum PurchaseMethod {Buying, Staking}\n    uint public constant BASE_TIMESTAMP = 1646089200; // 2022-03-01 00:00\n    uint public constant DIFF_TIME_NEW_NONCE = 24 * 3600; // every 24h we crate a new nonce.\n    uint public constant BENCHMARK_RATE_DECIMAL_18 = 5 * 10**16;\n    address DBITAddress;\n\n    constructor(\n        address apmAddress,\n        address dataAddress,\n        address bondAddress,\n        address _DBITAddress\n    ) {\n        apm = IAPM(apmAddress);\n        debondData = IData(dataAddress);\n        bond = IDebondBond(bondAddress);\n        DBITAddress = _DBITAddress;\n    }\n\n    modifier ensure(uint deadline) {\n        require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');\n        _;\n    }\n\n    // **** BUY BONDS ****\n\n    function buyBond(\n        uint _purchaseClassId, // token added\n        uint _debondClassId, // token to mint\n        uint _purchaseTokenAmount,\n        uint _debondTokenMinAmount, //should be changed to interest min amount\n        PurchaseMethod purchaseMethod\n    ) external {\n\n        uint purchaseClassId = _purchaseClassId;\n        uint debondClassId = _debondClassId;\n        uint purchaseTokenAmount = _purchaseTokenAmount;\n        uint debondTokenMinAmount = _debondTokenMinAmount;\n\n        require(debondData.canPurchase(debondClassId, purchaseClassId), \"Pair not Allowed\");\n\n\n        (,,address purchaseTokenAddress,) = debondData.getClassFromId(purchaseClassId);\n        (,IData.InterestRateType interestRateType ,address debondTokenAddress,) = debondData.getClassFromId(debondClassId);\n\n        uint amountBToMint = calculateDebondTokenToMint(\n//            purchaseTokenAddress,\n//            debondTokenAddress,\n            purchaseTokenAmount\n        );\n\n//        require(debondTokenMinAmount <= amountBToMint, \"Not enough debond token in minting calculation\");\n\n\n        IERC20(purchaseTokenAddress).transferFrom(msg.sender, address(apm), purchaseTokenAmount);\n        //see uniswap : transferhelper,ierc202\n        IDebondToken(debondTokenAddress).mint(address(apm), 2*amountBToMint); // One time for pool with tokenA, one time got pool with dgov\n        // be aware that tokenB is a DebondToken, maybe add it to the class model\n        //amountDgov = cdp_DGOV(amountBToMint)                               TODO \n        //IDebondToken(dGOVTokenAddress).mint(address(apm), amountDgov );    TODO \n\n        apm.updateWhenAddLiquidity(purchaseTokenAmount, amountBToMint,  purchaseTokenAddress,  debondTokenAddress);\n        //apm.updateWhenAddLiquidity(amountBToMint, amountDgov,  debondTokenAddress, dgovTokenAddress);   TODO \n\n        (uint fixedRate, uint floatingRate) = interestRate(purchaseClassId, debondClassId, purchaseTokenAmount, purchaseMethod);\n        if (purchaseMethod == PurchaseMethod.Staking) {\n            issueBonds(msg.sender, purchaseClassId, purchaseTokenAmount);\n            (uint reserveA, uint reserveB) = apm.getReserves(purchaseTokenAddress, debondTokenAddress);\n            //if reserve == 0 : use cdp price instead of quote? See with yu\n            //do we have to handle the case where reserve = 0? or when deploying, we put some liquidity?\n            uint amount = CDP.quote(purchaseTokenAmount, reserveA, reserveB);\n            uint rate = interestRateType == IData.InterestRateType.FixedRate ? fixedRate : floatingRate;\n            issueBonds(msg.sender, debondClassId, amount * rate / 10**18);\n        }\n        else if (purchaseMethod == PurchaseMethod.Buying) {\n            (uint reserveA, uint reserveB) = apm.getReserves(purchaseTokenAddress, debondTokenAddress);\n            uint amount = CDP.quote(purchaseTokenAmount, reserveA, reserveB);\n            uint rate = interestRateType == IData.InterestRateType.FixedRate ? fixedRate : floatingRate;\n            issueBonds(msg.sender, debondClassId, amount + amount * rate / 10**18); // here the interest calculation is hardcoded. require the interest is enough high\n        }\n\n\n    }\n\n    // **** REDEEM BONDS ****\n\n    function redeemBonds(\n        uint classId,\n        uint nonceId,\n        uint amount\n        //uint amountMin?\n    ) external {\n        IDebondBond(address(bond)).redeem(msg.sender, classId, nonceId, amount);\n\t    //require(redeemable) is already done in redeem function for liquidity, but still has to be done for time redemption\n\n        (, IData.InterestRateType interestRateType ,address TokenAddress,) = debondData.getClassFromId(classId);\n        //require(reserves[TokenAddress]>amountIn);\n\n\n\n        if(interestRateType == IData.InterestRateType.FixedRate) {\n            (,,,,,uint maturityDate) = bond.bondDetails( classId, nonceId);\n            require(block.timestamp>maturityDate);\n            IERC20(TokenAddress).transferFrom(address(apm), msg.sender, amount);\n            apm.updateTotalReserve(TokenAddress, amount);\n\n\n        }\n        else if (interestRateType == IData.InterestRateType.FloatingRate){\n            //to be implemented later\n        }\n\n        //how do we know if we have to burn (or put in reserves) dbit or dbgt?\n\n\n\t    //APM.removeLiquidity(tokenAddress, amountIn);\n//        apm.updaReserveAfterRemovingLiquidity(tokenAddress, amountIn);\n        //emit\n\n    }\n\n    // **** Swaps ****\n\n    function swap(address tokenIn, address tokenOut, uint amountIn, uint amountOutMin) public {\n        //if (tokenIn == dbitAddress){\n\n        //}\n\n    }\n\n    // **** SWAP ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(uint[] memory amounts, address[] memory path, address to) internal virtual {\n        for (uint i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            uint amountOut = amounts[i + 1];\n            (uint amount0Out, uint amount1Out) = (uint(0), amountOut);\n            apm.swap(\n                amount0Out, amount1Out, input, output, to\n            );\n        }\n    }\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path\n    ) public returns (uint[] memory amounts) {\n        amounts = apm.getAmountsOut(amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n    \n        IERC20(path[0]).transferFrom(msg.sender, address(apm), amounts[0]);\n        _swap(amounts, path, msg.sender); //msg.sender?\n    }\n\n     \n\n\n\n\n\n\n\n    // TODO External to the Bank maybe\n    function calculateDebondTokenToMint(\n//        address purchaseTokenAddress, // token added\n//        address debondTokenAddress, //token minted\n        uint purchaseTokenAmount\n    ) internal pure returns (uint) {\n        return purchaseTokenAmount;\n    }\n\n\n    function issueBonds(address to, uint256 classId, uint256 amount) private {\n        uint timestampToCheck = block.timestamp;\n        (uint lastNonceId, uint createdAt) = debondData.getLastNonceCreated(classId);\n        createdAt = createdAt == 0 ? BASE_TIMESTAMP : createdAt;\n        if ((timestampToCheck - createdAt) >= DIFF_TIME_NEW_NONCE) {\n            createNewNonce(classId, lastNonceId, timestampToCheck);\n            (uint nonceId,) = debondData.getLastNonceCreated(classId);\n            bond.issue(to, classId, nonceId, amount);\n            return;\n        }\n\n        uint tDay = (timestampToCheck - BASE_TIMESTAMP) % DIFF_TIME_NEW_NONCE;\n        if ((tDay + (timestampToCheck - createdAt)) >= DIFF_TIME_NEW_NONCE) {\n            createNewNonce(classId, lastNonceId, timestampToCheck);\n            (uint nonceId,) = debondData.getLastNonceCreated(classId);\n            bond.issue(to, classId, nonceId, amount);\n            return;\n        }\n    }\n\n    function createNewNonce(uint classId, uint lastNonceId, uint creationTimestamp) private {\n        uint _newNonceId = ++lastNonceId;\n        (,,, uint period) = debondData.getClassFromId(classId);\n        bond.createNonce(classId, _newNonceId, creationTimestamp + period, 500);\n        debondData.updateLastNonce(classId, _newNonceId, creationTimestamp);\n        //here 500 is liquidity info hard coded for now\n    }\n\n    function interestRate(\n        uint _purchaseTokenClassId,\n        uint _debondTokenClassId,\n        uint _purchaseTokenAmount,\n        PurchaseMethod purchaseMethod\n    ) public view returns (uint fixRate, uint floatRate) {\n        uint purchaseTokenClassId = _purchaseTokenClassId;\n        uint debondTokenClassId = _debondTokenClassId;\n        uint purchaseTokenAmount = _purchaseTokenAmount;\n\n        uint fixRateSupply = 0;\n        uint floatRateSupply = 0;\n\n        (,IData.InterestRateType interestRateType, address purchaseTokenAddress,) = debondData.getClassFromId(purchaseTokenClassId); // address of the purchase token\n\n\n        // staking collateral for bonds\n        if (purchaseMethod == PurchaseMethod.Staking) {\n            fixRateSupply = bond.bondAmountDue(purchaseTokenAddress, IData.InterestRateType.FixedRate);// we get the fix rate bonds supply\n            floatRateSupply = bond.bondAmountDue(purchaseTokenAddress, IData.InterestRateType.FloatingRate);// we get the float rate bonds supply\n\n            // we had the client amount to the according bond balance to calculate interest rate after deposit\n            if (purchaseTokenAmount > 0 && interestRateType == IData.InterestRateType.FixedRate) {\n                fixRateSupply += purchaseTokenAmount;\n            }\n            if (purchaseTokenAmount > 0 && interestRateType == IData.InterestRateType.FloatingRate) {\n                floatRateSupply += purchaseTokenAmount;\n            }\n\n        }\n        // buying Bonds\n        else if (purchaseMethod == PurchaseMethod.Buying) {\n\n            (,,address debondTokenAddress,) = debondData.getClassFromId(debondTokenClassId); // address of D/BIT\n\n\n            uint debondTokenAmount = getDebondTokenAmountFrom(purchaseTokenAddress, purchaseTokenAmount);\n\n            fixRateSupply = bond.bondAmountDue(debondTokenAddress, IData.InterestRateType.FixedRate);\n            floatRateSupply = bond.bondAmountDue(debondTokenAddress, IData.InterestRateType.FloatingRate);\n\n            if (interestRateType == IData.InterestRateType.FixedRate) {\n                fixRateSupply += debondTokenAmount;\n            }\n            if (interestRateType == IData.InterestRateType.FloatingRate) {\n                floatRateSupply += debondTokenAmount;\n            }\n        }\n\n        if (fixRateSupply == 0 || floatRateSupply == 0) {\n            fixRate = 2 * BENCHMARK_RATE_DECIMAL_18 / 3;\n            floatRate = 2 * fixRate;\n        } else {\n            int sigmoidCParam = PRBMathSD59x18.inv(3);\n            uint x = uint(PRBMathSD59x18.div(int(fixRateSupply), int(floatRateSupply + fixRateSupply)));\n            floatRate = (2 * BENCHMARK_RATE_DECIMAL_18 * uint(PRBMathSD59x18.sigmoid(int(x), sigmoidCParam)) / 1e18);\n            fixRate = 2 * BENCHMARK_RATE_DECIMAL_18 - floatRate;\n        }\n    }\n\n    function getDebondTokenAmountFrom(address tokenAddress, uint tokenAmount) public view returns (uint) {\n        // TODO we need to call oracle to get USDAmount from tokenAddress and tokenAmount\n        uint USDAmountDecimal8 = tokenAmount; // Here we simulate that 1 token = $1\n        return USDToDbitToMint(USDAmountDecimal8);\n\n    }\n\n    function USDToDbitToMint(uint amountUSDDecimal8) public view returns (uint) {\n        uint DBITtotalSupply = IERC20(DBITAddress).totalSupply();\n        return amountUSDDecimal8 * CDP.BondExchangeRate(DBITtotalSupply);\n    }\n\n}\n"
    },
    "contracts/Debond-v0/contracts/test/FakeProposal.sol": {
      "content": "// pragma solidity ^0.8.9;\nimport \"../interfaces/IData.sol\";\n\ncontract Proposal {\n    address public _vetoOperator;\n    address public governance;\n    address public dataAddress;\n\n    constructor(\n        address veto,\n        address governanceAddress,\n        address _dataAddress\n    ) {\n        _vetoOperator = veto;\n        governance = governanceAddress;\n        dataAddress = _dataAddress;\n    }\n\n    modifier onlyGovContract() {\n        require(msg.sender == _vetoOperator, \"ERR_ONLY_ADMIN\");\n        _;\n    }\n\n    function addNewClass(\n        uint256 newClassId,\n        string memory _symbol,\n        IData.InterestRateType interestRateType,\n        address tokenAddress,\n        uint256 periodTimestamp\n    ) public onlyGovContract {\n        IData(dataAddress).addClass(\n            newClassId,\n            _symbol,\n            interestRateType,\n            tokenAddress,\n            periodTimestamp\n        );\n    }\n}\n"
    },
    "contracts/Debond-v0/contracts/Exchange.sol": {
      "content": "// SPDX-License-Identifier: apache 2.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IDebondBond.sol\";\nimport \"./interfaces/IData.sol\";\n\ncontract Exchange is AccessControl, ReentrancyGuard {\n\n    using SafeERC20 for IERC20;\n    using Counters for Counters.Counter;\n\n    enum AuctionState {\n        Started,\n        Completed,\n        Expired,\n        Cancelled\n    }\n\n    struct Auction {\n        uint id;\n        address owner;\n        uint256 startingTime;\n        uint256 endingTime;\n        uint256 duration;\n        uint256 classId;\n        uint256 nonceId;\n        uint256 amount;\n        uint256 maxDbitAmount;\n        uint256 minDbitAmount;\n        AuctionState auctionState;\n        bool curvingPrice;\n        address successfulBidder;\n        uint256 finalPrice;\n    }\n\n    address bondData;\n    address debondBondAddress;\n    address currency;\n    mapping(uint256 => Auction) public auctions;\n    uint[] auctionsCollection;\n\n    uint256 constant MAX_AUCTION_DURATION = 30 days;\n    uint256 constant MIN_AUCTION_DURATION = 3600;\n\n    Counters.Counter private idCounter;\n\n    // events for the auctions\n\n    event AuctionStarted(uint256 _auctionId, address issuer);\n    event AuctionCancelled(uint256 _auctionId, address issuer, uint256 time);\n    event AuctionCompleted(uint256 _auctionId, address BidWinner);\n    event BidSubmitted(address indexed sender, uint256 amount);\n\n    constructor(\n        address _debondDataAddress,\n        address _debondBondAddress,\n        address _currency\n    )  {\n        bondData = _debondDataAddress;\n        debondBondAddress = _debondBondAddress;\n        currency = _currency;\n        //   curvingPriceParam = 10;\n\n    }\n\n    modifier onlyAuctionOwner(uint256 _auctionId) {\n        require(\n            msg.sender == auctions[_auctionId].owner,\n            \"Exchange: Caller is not the auction owner\"\n        );\n        _;\n    }\n\n    function createSecondaryMarketAuction(uint256 classId, uint256 nonceId, uint256 amount, uint256 minDbitAmount, uint256 maxDbitAmount, uint256 auctionDuration) external {\n\n        // validation steps\n        require(auctionDuration <= MAX_AUCTION_DURATION, \"Exchange: Max Duration Exceeded\");\n        require(auctionDuration > MIN_AUCTION_DURATION, \"Exchange: Min Duration not reached\");\n        require(minDbitAmount < maxDbitAmount, \"Exchange: min Dbit Amount Should be less than max dbit amount\");\n        require(minDbitAmount > 0, \"Exchange: min Dbit Amount Should be greater 0\");\n\n        IDebondBond(debondBondAddress).transferFrom(\n            msg.sender,\n            address(this),\n            classId,\n            nonceId,\n            amount\n        );\n\n        (,IData.InterestRateType interestRateType,,) = IData(bondData).getClassFromId(classId);\n\n        // adding the first object in the auction\n        Auction storage auction = auctions[idCounter._value];\n        auction.id = idCounter._value;\n        auction.owner = msg.sender;\n        auction.maxDbitAmount = maxDbitAmount;\n        auction.duration = auctionDuration;\n        auction.startingTime = block.timestamp;\n        auction.classId = classId;\n        auction.nonceId = nonceId;\n        auction.amount = amount;\n        auction.auctionState = AuctionState.Started;\n        auction.curvingPrice = (interestRateType == (IData.InterestRateType.FloatingRate)) ? true : false ;\n\n\n        auctionsCollection.push(auction.id);\n        // increment the id\n        idCounter.increment();\n\n        emit AuctionStarted(auction.id, auction.owner);\n    }\n\n    function bid(uint256 _auctionId) nonReentrant() external {\n        require(msg.sender != auctions[_auctionId].owner, \"Exchange: bidder should not be the auction owner\");\n        checkIfExpired(_auctionId);\n        Auction storage auction = auctions[_auctionId];\n        require(\n            auction.auctionState == AuctionState.Started,\n            \"bid is completed already\"\n        );\n        address bidder = msg.sender;\n        uint finalPrice = currentPrice(_auctionId);\n\n        // 1.get his D/BIT first\n        IERC20(currency).transferFrom(bidder, address(this), finalPrice);\n\n        // 2.transfer him the bonds\n        IDebondBond(debondBondAddress).transferFrom(address(this), bidder, auction.classId, auction.nonceId, auction.amount);\n\n        // 3.change the state\n        auction.successfulBidder = bidder;\n        auction.endingTime = block.timestamp;\n        auction.finalPrice = finalPrice;\n        auction.auctionState = AuctionState.Completed;\n\n        emit AuctionCompleted(_auctionId, bidder);\n    }\n\n    function cancelAuction(uint256 _auctionId) external onlyAuctionOwner(_auctionId) {\n        checkIfExpired(_auctionId);\n        Auction storage auction = auctions[_auctionId];\n        require(auction.auctionState == AuctionState.Started, \"auction already finished\");\n\n        IDebondBond(debondBondAddress).transferFrom(\n            address(this),\n            auction.owner,\n            auction.classId,\n            auction.nonceId,\n            auction.amount\n        );\n\n        auction.auctionState = AuctionState.Cancelled;\n        auction.endingTime = block.timestamp;\n        emit AuctionCancelled(_auctionId, msg.sender, block.timestamp);\n    }\n\n    function getAuctionIds() external view returns(uint[] memory auctions) {\n        return auctionsCollection;\n    }\n\n    function currentPrice(uint256 auctionId) public view returns (uint256 auctionPrice) {\n\n        Auction memory auctionObject = auctions[auctionId];\n        uint256 time_passed = block.timestamp - auctionObject.startingTime;\n        require(\n            time_passed < auctionObject.duration,\n            \"auction ended,equal to faceValue\"\n        );\n        if (!auctionObject.curvingPrice) {\n            // for fixed rate , there will be using the straight line fixed price decreasing mechanism.\n            auctionPrice = auctionObject.maxDbitAmount - (auctionObject.maxDbitAmount - auctionObject.minDbitAmount) * time_passed / auctionObject.duration;\n\n        }\n        // else  if  its the floating rate, there will be decreasing parabolic curve as function of \n        else {\n            auctionPrice = auctionObject.maxDbitAmount - ((auctionObject.maxDbitAmount - auctionObject.minDbitAmount)/(auctionObject.duration**2)) * ((block.timestamp - auctionObject.startingTime)**2); \n        }\n    }\n\n    function checkIfExpired(uint auctionId) private {\n        Auction storage auction = auctions[auctionId];\n        if(block.timestamp >= auction.startingTime + auction.duration) {\n            auctions[auctionId].auctionState = AuctionState.Expired;\n        }\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Debond-v0/contracts/DebondBond.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./interfaces/IDebondBond.sol\";\n\n\ncontract DebondBond is IDebondBond, AccessControl {\n\n    bytes32 public constant ISSUER_ROLE = keccak256(\"ISSUER_ROLE\");\n\n    /**\n    * @notice this Struct is representing the Nonce properties as an object\n    *         and can be retrieve by the nonceId (within a class)\n    */\n    struct Nonce {\n        uint256 id;\n        bool exists;\n        uint256 _activeSupply;\n        uint256 _burnedSupply;\n        uint256 _redeemedSupply;\n        uint256 maturityDate;\n        uint256 issuanceDate;\n        uint256 liqT;\n        uint256[] infos;\n        mapping(address => uint256) balances;\n        mapping(address => mapping(address => uint256)) allowances;\n        mapping(address => bool) hasBalance;\n    }\n\n    /**\n    * @notice this Struct is representing the Class properties as an object\n    *         and can be retrieve by the classId\n    */\n    struct Class {\n        uint256 id;\n        bool exists;\n        string symbol;\n        uint256[] infos;\n        IData.InterestRateType interestRateType;\n        address tokenAddress;\n        uint256 periodTimestamp;\n        mapping(address => mapping(address => bool)) operatorApprovals;\n        mapping(address => mapping(uint256 => bool)) noncesPerAddress;\n        mapping(address => uint256[]) noncesPerAddressArray;\n        uint256[] nonceIds;\n        mapping(uint256 => Nonce) nonces; // from nonceId given\n    }\n\n    mapping(uint256 => Class) internal classes; // from classId given\n    string[] public classInfoDescriptions; // mapping with class.infos\n    string[] public nonceInfoDescriptions; // mapping with nonce.infos\n    mapping(address => mapping(uint256 => bool)) classesPerAddress;\n    mapping(address => uint256[]) public classesPerAddressArray;\n\n    mapping(address => mapping(IData.InterestRateType => uint256)) bondsDue;\n\n\n    bool public _isActive;\n\n    constructor(\n        address DBIT,\n        address USDC,\n        address USDT,\n        address DAI\n    ) {\n        _isActive = true;\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        createClass(0, \"D/BIT\", IData.InterestRateType.FixedRate, DBIT, 60);\n        createClass(1, \"USDC\", IData.InterestRateType.FixedRate, USDC, 60);\n        createClass(2, \"USDT\", IData.InterestRateType.FixedRate, USDT, 60);\n        createClass(3, \"DAI\", IData.InterestRateType.FixedRate, DAI, 60);\n\n        createClass(4, \"D/BIT\", IData.InterestRateType.FloatingRate, DBIT, 60);\n        createClass(5, \"USDC\", IData.InterestRateType.FloatingRate, DAI, 60);\n        createClass(6, \"USDT\", IData.InterestRateType.FloatingRate, DAI, 60);\n        createClass(7, \"DAI\", IData.InterestRateType.FloatingRate, DAI, 60);\n    }\n\n\n    function isActive() external view returns (bool) {\n        return _isActive;\n    }\n\n    // WRITE\n\n    function transferFrom(address from, address to, uint256 classId, uint256 nonceId, uint256 amount) public virtual override {\n        require(msg.sender == from || isApprovedFor(from, msg.sender, classId), \"ERC3475: caller is not owner nor approved\");\n        _transferFrom(from, to, classId, nonceId, amount);\n        emit Transfer(msg.sender, from, to, classId, nonceId, amount);\n    }\n\n\n    function issue(address to, uint256 classId, uint256 nonceId, uint256 amount) external override onlyRole(ISSUER_ROLE) {\n        require(classExists(classId), \"ERC3475: only issue bond that has been created\");\n        require(nonceExists(classId, nonceId), \"ERC-3475: nonceId given not found!\");\n        require(to != address(0), \"ERC3475: can't transfer to the zero address\");\n        _issue(to, classId, nonceId, amount);\n\n        if(!classesPerAddress[to][classId]) {\n            classesPerAddressArray[to].push(classId);\n            classesPerAddress[to][classId] = true;\n        }\n\n        Class storage class = classes[classId];\n        if(!class.noncesPerAddress[to][nonceId]) {\n            class.noncesPerAddressArray[to].push(nonceId);\n            class.noncesPerAddress[to][nonceId] = true;\n        }\n\n        bondsDue[class.tokenAddress][class.interestRateType] += amount;\n        emit Issue(msg.sender, to, classId, nonceId, amount);\n    }\n\n    function classExists(uint256 classId) public view returns (bool) {\n        return classes[classId].exists;\n    }\n\n    function nonceExists(uint256 classId, uint256 nonceId) public view returns (bool) {\n        return classes[classId].nonces[nonceId].exists;\n    }\n\n    function createClass(uint256 classId, string memory _symbol, IData.InterestRateType interestRateType, address tokenAddress, uint256 periodTimestamp) public override {\n        require(!classExists(classId), \"ERC3475: cannot create a class that already exists\");\n        Class storage class = classes[classId];\n        class.id = classId;\n        class.exists = true;\n        class.symbol = _symbol;\n        class.interestRateType = interestRateType;\n        class.tokenAddress = tokenAddress;\n        class.periodTimestamp = periodTimestamp;\n    }\n\n    function createNonce(uint256 classId, uint256 nonceId, uint256 _maturityDate, uint256 liqT) external override onlyRole(ISSUER_ROLE) {\n        require(classExists(classId), \"ERC3475: only issue bond that has been created\");\n        Class storage class = classes[classId];\n\n        Nonce storage nonce = class.nonces[nonceId];\n        require(!nonce.exists, \"Error ERC-3475: nonceId exists!\");\n\n        nonce.id = nonceId;\n        nonce.exists = true;\n        nonce.maturityDate = _maturityDate;\n        nonce.issuanceDate = block.timestamp;\n        nonce.liqT = liqT;\n    }\n\n    function redeem(address from, uint256 classId, uint256 nonceId, uint256 amount) external override onlyRole(ISSUER_ROLE) {\n        require(nonceExists(classId, nonceId), \"ERC3475: given Nonce doesn't exist\");\n        require(from != address(0), \"ERC3475: can't transfer to the zero address\");\n        require(isRedeemable(classId, nonceId), \"Bond is not redeemable\");\n        _redeem(from, classId, nonceId, amount);\n        Class storage class = classes[classId];\n        bondsDue[class.tokenAddress][class.interestRateType] -= amount;\n        emit Redeem(msg.sender, from, classId, nonceId, amount);\n    }\n\n\n    function burn(address from, uint256 classId, uint256 nonceId, uint256 amount) external override onlyRole(ISSUER_ROLE) {\n        require(from != address(0), \"ERC3475: can't transfer to the zero address\");\n        _burn(from, classId, nonceId, amount);\n        Class storage class = classes[classId];\n        bondsDue[class.tokenAddress][class.interestRateType] -= amount;\n        emit Burn(msg.sender, from, classId, nonceId, amount);\n    }\n\n\n    function approve(address spender, uint256 classId, uint256 nonceId, uint256 amount) external override {\n        classes[classId].nonces[nonceId].allowances[msg.sender][spender] = amount;\n    }\n\n\n    function setApprovalFor(address operator, uint256 classId, bool approved) public override {\n        classes[classId].operatorApprovals[msg.sender][operator] = approved;\n        emit ApprovalFor(msg.sender, operator, classId, approved);\n    }\n\n\n    function batchApprove(address spender, uint256[] calldata classIds, uint256[] calldata nonceIds, uint256[] calldata amounts) external {\n        require(classIds.length == nonceIds.length && classIds.length == amounts.length, \"ERC3475 Input Error\");\n        for(uint256 i = 0; i < classIds.length; i++) {\n            classes[classIds[i]].nonces[nonceIds[i]].allowances[msg.sender][spender] = amounts[i];\n        }\n    }\n    // READS\n\n\n    function totalSupply(uint256 classId, uint256 nonceId) public override view returns (uint256) {\n        return classes[classId].nonces[nonceId]._activeSupply + classes[classId].nonces[nonceId]._redeemedSupply + classes[classId].nonces[nonceId]._burnedSupply;\n    }\n\n\n    function activeSupply(uint256 classId, uint256 nonceId) public override view returns (uint256) {\n        return classes[classId].nonces[nonceId]._activeSupply;\n    }\n\n\n    function burnedSupply(uint256 classId, uint256 nonceId) public override view returns (uint256) {\n        return classes[classId].nonces[nonceId]._burnedSupply;\n    }\n\n\n    function redeemedSupply(uint256 classId, uint256 nonceId) public override view returns (uint256) {\n        return classes[classId].nonces[nonceId]._burnedSupply;\n    }\n\n\n    function balanceOf(address account, uint256 classId, uint256 nonceId) public override view returns (uint256) {\n        require(account != address(0), \"ERC3475: balance query for the zero address\");\n\n        return classes[classId].nonces[nonceId].balances[account];\n    }\n\n\n    function symbol(uint256 classId) public view override returns (string memory) {\n        Class storage class = classes[classId];\n        return class.symbol;\n    }\n\n\n    function classInfos(uint256 classId) public view override returns (uint256[] memory) {\n        return classes[classId].infos;\n    }\n\n\n    function nonceInfos(uint256 classId, uint256 nonceId) public view override returns (uint256[] memory) {\n        return classes[classId].nonces[nonceId].infos;\n    }\n\n    function bondDetails(uint256 classId, uint256 nonceId) public view override returns (string memory _symbol, IData.InterestRateType _interestRateType, address _tokenAddress, uint256 _periodTimestamp, uint256 _issuanceDate, uint256 _maturityDate) {\n        Class storage class =  classes[classId];\n        Nonce storage nonce =  class.nonces[nonceId];\n\n        _symbol = class.symbol;\n        _interestRateType = class.interestRateType;\n        _tokenAddress = class.tokenAddress;\n        _periodTimestamp = class.periodTimestamp;\n        _issuanceDate = nonce.issuanceDate;\n        _maturityDate = nonce.maturityDate;\n\n        return (_symbol, _interestRateType, _tokenAddress, _periodTimestamp, _issuanceDate, _maturityDate);\n    }\n\n\n\n    function classInfoDescription(uint256 classInfo) external view returns (string memory) {\n        return classInfoDescriptions[classInfo];\n    }\n\n    function nonceInfoDescription(uint256 nonceInfo) external view returns (string memory) {\n        return nonceInfoDescriptions[nonceInfo];\n    }\n\n\n    function isRedeemable(uint256 classId, uint256 nonceId) public override view returns (bool) {\n        Class storage class = classes[classId];\n        if(class.interestRateType == IData.InterestRateType.FixedRate) {\n            return classes[classId].nonces[nonceId].maturityDate <= block.timestamp;\n        }\n\n        if(class.interestRateType == IData.InterestRateType.FloatingRate) {\n            return true;\n        }\n        return false;\n\n    }\n\n\n    function allowance(address owner, address spender, uint256 classId, uint256 nonceId) external view returns (uint256) {\n        return classes[classId].nonces[nonceId].allowances[owner][spender];\n    }\n\n\n    function isApprovedFor(address owner, address operator, uint256 classId) public view virtual override returns (bool) {\n        return classes[classId].operatorApprovals[owner][operator];\n    }\n\n    function bondAmountDue(address tokenAddress, IData.InterestRateType interestRateType) external view returns (uint256) {\n        return bondsDue[tokenAddress][interestRateType];\n    }\n\n    function getNoncesPerAddress(address addr, uint256 classId) public view returns (uint256[] memory) {\n        return classes[classId].noncesPerAddressArray[addr];\n    }\n\n    function batchActiveSupply(uint256 classId) public view returns (uint256) {\n        uint256 _batchActiveSupply;\n        uint256[] memory nonces = classes[classId].nonceIds;\n        // _lastBondNonces can be recovered from the last message of the nonceId\n        // @drisky we can indeed\n        for (uint256 i = 0; i <= nonces.length; i++) {\n            _batchActiveSupply += activeSupply(classId, nonces[i]);\n        }\n        return _batchActiveSupply;\n    }\n\n    function batchBurnedSupply(uint256 classId) public view returns (uint256) {\n        uint256 _batchBurnedSupply;\n        uint256[] memory nonces = classes[classId].nonceIds;\n\n        for (uint256 i = 0; i <= nonces.length; i++) {\n            _batchBurnedSupply += burnedSupply(classId, nonces[i]);\n        }\n        return _batchBurnedSupply;\n    }\n\n    function batchRedeemedSupply(uint256 classId) public view returns (uint256) {\n        uint256 _batchRedeemedSupply;\n        uint256[] memory nonces = classes[classId].nonceIds;\n\n        for (uint256 i = 0; i <= nonces.length; i++) {\n            _batchRedeemedSupply += redeemedSupply(classId, nonces[i]);\n        }\n        return _batchRedeemedSupply;\n    }\n\n    function batchTotalSupply(uint256 classId) public view returns (uint256) {\n        uint256 _batchTotalSupply;\n        uint256[] memory nonces = classes[classId].nonceIds;\n\n        for (uint256 i = 0; i <= nonces.length; i++) {\n            _batchTotalSupply += totalSupply(classId, nonces[i]);\n        }\n        return _batchTotalSupply;\n    }\n\n    function _transferFrom(address from, address to, uint256 classId, uint256 nonceId, uint256 amount) private {\n        require(from != address(0), \"ERC3475: can't transfer from the zero address\");\n        require(to != address(0), \"ERC3475: can't transfer to the zero address\");\n        require(classes[classId].nonces[nonceId].balances[from] >= amount, \"ERC3475: not enough bond to transfer\");\n        _transfer(from, to, classId, nonceId, amount);\n    }\n\n    function _transfer(address from, address to, uint256 classId, uint256 nonceId, uint256 amount) private {\n        require(from != to, \"ERC3475: can't transfer to the same address\");\n        classes[classId].nonces[nonceId].balances[from]-= amount;\n        classes[classId].nonces[nonceId].balances[to] += amount;\n    }\n\n    function _issue(address to, uint256 classId, uint256 nonceId, uint256 amount) private {\n        classes[classId].nonces[nonceId].balances[to] += amount;\n        classes[classId].nonces[nonceId]._activeSupply += amount;\n    }\n\n    function _redeem(address from, uint256 classId, uint256 nonceId, uint256 amount) private {\n        require(classes[classId].nonces[nonceId].balances[from] >= amount);\n        classes[classId].nonces[nonceId].balances[from] -= amount;\n        classes[classId].nonces[nonceId]._activeSupply -= amount;\n        classes[classId].nonces[nonceId]._redeemedSupply += amount;\n    }\n\n    function _burn(address from, uint256 classId, uint256 nonceId, uint256 amount) private {\n        require(classes[classId].nonces[nonceId].balances[from] >= amount);\n        classes[classId].nonces[nonceId].balances[from] -= amount;\n        classes[classId].nonces[nonceId]._activeSupply -= amount;\n        classes[classId].nonces[nonceId]._burnedSupply += amount;\n    }\n}\n"
    },
    "contracts/Debond-v0/contracts/test/DBIT.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\nimport \"../interfaces/IDebondToken.sol\";\nimport \"./FakeERC20.sol\";\n\n\ncontract DBIT is FakeERC20, IDebondToken, AccessControl {\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    constructor() ERC20(\"D/BIT TOKEN\", \"D/BIT\") {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function mint(address _to, uint256 _amount) external onlyRole(MINTER_ROLE) {\n        _mint(_to, _amount);\n    }\n\n\n}\n"
    },
    "contracts/Debond-v0/contracts/test/FakeERC20.sol": {
      "content": "pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract FakeERC20 is ERC20, Ownable {\n    // remove allowance check\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(from, to, amount);\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/Debond-v0/contracts/test/USDT.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: MIT\n\nimport \"./FakeERC20.sol\";\n\ncontract USDT is FakeERC20 {\n    constructor() ERC20(\"USDT Test\", \"USDT\") {}\n\n    function mint(address _to, uint256 _amount) external {\n        _mint(_to, _amount);\n    }\n}\n"
    },
    "contracts/Debond-v0/contracts/test/USDC.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: MIT\n\nimport \"./FakeERC20.sol\";\n\ncontract USDC is FakeERC20 {\n    constructor() ERC20(\"USDC Test\", \"USDC\") {}\n\n    function mint(address _to, uint256 _amount) external {\n        _mint(_to, _amount);\n    }\n}\n"
    },
    "contracts/Debond-v0/contracts/Tokens/VoteToken.sol": {
      "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@dGOV.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/IVoteToken.sol\";\n\ncontract VoteToken is ERC20, ReentrancyGuard {\n    address debondOperator;\n    address govAddress;\n    address stakingDGOV;\n\n    modifier onlyGov {\n        require(msg.sender == govAddress, \"Gov: not governance\");\n        _;\n    }\n\n    modifier onlyDebondOperator {\n        require(msg.sender == debondOperator, \"Gov: not governance\");\n        _;\n    }\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _debondOperator\n    ) ERC20(_name, _symbol) {\n        debondOperator = _debondOperator;\n    }\n\n    /**\n    * @dev transfer _amount vote tokens to `_to`\n    * @param _to adrress to send tokens to\n    * @param _amount the amount to transfer\n    */\n    function transfer(address _to, uint256 _amount) public override returns (bool) {\n        require(\n            _to == govAddress || _to == stakingDGOV,\n            \"VoteToken: can't transfer vote tokens\"\n        );\n\n        address owner = _msgSender();\n        _transfer(owner, _to, _amount);\n        return true;\n    }\n\n    /**\n    * @dev transfer _amount vote tokens from `_from` to `_to`\n    * @param _from the address from which tokens are transfered\n    * @param _to the address to which tokens are transfered\n    * @param _amount the amount to transfer\n    */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) public virtual override returns (bool) {\n        require(\n            _to == govAddress || _to == stakingDGOV,\n            \"VoteToken: can't transfer vote tokens\"\n        );\n\n        address spender = _msgSender();\n        _spendAllowance(_from, spender, _amount);\n        _transfer(_from, _to, _amount);\n        return true;\n    }\n\n    /**\n    * @dev mints vote tokens\n    * @param _user the user address\n    * @param _amount the amount of tokens to mint\n    */\n    function mintVoteToken(address _user, uint256 _amount) external nonReentrant() {\n        _mint(_user, _amount);\n    }\n\n    /**\n    * @dev burns vote tokens\n    * @param _user the user address\n    * @param _amount the amount of tokens to burn\n    */\n    function burnVoteToken(address _user, uint256 _amount) external nonReentrant() {\n        _burn(_user, _amount);\n    }\n\n    /**\n    * @dev set the governance contract address\n    * @param _governance governance contract address\n    */\n    function setGovernanceContract(address _governance) external onlyDebondOperator {\n        govAddress = _governance;\n    }\n\n    /**\n    * @dev get the governance contract address\n    * @param gov governance contract address\n    */\n    function getGovernanceContract() external view returns(address gov) {\n        gov = govAddress;\n    }\n\n    /**\n    * @dev set the stakingDGOV contract address\n    * @param _stakingDGOV stakingDGOV contract address\n    */\n    function setStakingDGOVContract(address _stakingDGOV) external {\n        stakingDGOV = _stakingDGOV;\n    }\n\n    /**\n    * @dev get the stakingDGOV contract address\n    * @param _stakingDGOV stakingDGOV contract address\n    */\n    function getStakingDGOVContract() external view returns(address _stakingDGOV) {\n        _stakingDGOV = stakingDGOV;\n    }\n}"
    },
    "contracts/Debond-v0/contracts/interfaces/IVoteToken.sol": {
      "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@dGOV.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\ninterface IVoteToken {\n    /**\n    * @dev mints  vote Token tokens to the address of a user\n    */\n    function mintVoteToken(address _user, uint256 _amount) external;\n\n    /**\n    * @dev burns vote Token tokens from the address of a user\n    */\n    function burnVoteToken(address _user, uint256 _amount) external;\n\n    /**\n    * @dev set the governance contract address\n    */\n    function setGovernanceContract(address _governance) external;\n\n    /**\n    * @dev set the stakingDGOV contract address\n    */\n    function setStakingDGOVContract(address _stakingSGOV) external;\n\n    /**\n    * @dev transfer _amount vote tokens to `_to`\n    */\n    function transfer(address _to, uint256 _amount) external returns (bool);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external returns (bool);\n}"
    },
    "contracts/Debond-v0/contracts/utils/StakingDGOV.sol": {
      "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@dGOV.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/IStakingDGOV.sol\";\nimport \"../interfaces/IVoteToken.sol\";\n\ncontract StakingDGOV is IStakingDGOV, ReentrancyGuard {\n    /**\n    * @dev structure that stores information on the stacked dGoV\n    */\n    struct StackedDGOV {\n        uint256 amountDGOV;\n        uint256 startTime;\n        uint256 duration;\n    }\n\n    address public dbit;\n    address public dGov;\n    address public voteToken;\n    address public debondOperator;\n    address public governance;\n\n    uint256 private interestRate;\n    uint256 constant private NUMBER_OF_SECONDS_IN_YEAR = 31536000;\n\n    mapping(address => StackedDGOV) public stackedDGOV;\n\n    modifier onlyGov {\n        require(msg.sender == governance, \"Gov: not governance\");\n        _;\n    }\n\n    modifier onlyDebondOperator {\n        require(msg.sender == debondOperator, \"Gov: not governance\");\n        _;\n    }\n\n    constructor (\n        address _dbit,\n        address _dGovToken,\n        address _voteToken,\n        address _debondOperator,\n        uint256 _interestRate\n    ) {\n        dbit = _dbit;\n        dGov = _dGovToken;\n        voteToken = _voteToken;\n        debondOperator = _debondOperator;\n        interestRate = _interestRate;\n    }\n\n    /**\n    * @dev stack dGoV tokens\n    * @param _staker the address of the staker\n    * @param _amount the amount of dGoV tokens to stak\n    * @param _duration the staking period\n    */\n    function stakeDgovToken(\n        address _staker,\n        uint256 _amount,\n        uint256 _duration\n    ) external onlyGov nonReentrant() {\n        IERC20 IdGov = IERC20(dGov);\n        IVoteToken Ivote = IVoteToken(voteToken);\n        \n        uint256 stakerBalance = IdGov.balanceOf(_staker);\n        require(_amount <= stakerBalance, \"Debond: not enough dGov\");\n\n        stackedDGOV[_staker].startTime = block.timestamp;\n        stackedDGOV[_staker].duration = _duration;\n        stackedDGOV[_staker].amountDGOV += _amount;\n\n        IdGov.transferFrom(_staker, address(this), _amount);\n        Ivote.mintVoteToken(_staker, _amount);\n\n        emit dgovStacked(_staker, _amount);\n    }\n\n    /**\n    * @dev unstack dGoV tokens\n    * @param _staker the address of the staker\n    * @param _to the address to send the dGoV to\n    * @param _amount the amount of dGoV tokens to unstak\n    */\n    function unstakeDgovToken(\n        address _staker,\n        address _to,\n        uint256 _amount\n    ) external onlyGov nonReentrant() {\n        StackedDGOV memory _stacked = stackedDGOV[_staker];\n        require(\n            block.timestamp >= _stacked.startTime + _stacked.duration,\n            \"Staking: still staking\"\n        );\n        require(_amount <= _stacked.amountDGOV, \"Staking: Not enough dGoV staked\");\n\n        // burn the vote tokens owned by the user\n        IVoteToken Ivote = IVoteToken(voteToken);\n        Ivote.burnVoteToken(_staker, _amount);\n\n        // transfer staked DGOV to the staker \n        IERC20 IdGov = IERC20(dGov);\n        IdGov.transfer(_to, _amount);\n\n        emit dgovUnstacked(_staker, _to, _amount);\n    }\n\n    /**\n    * @dev set the governance contract address\n    * @param _governance governance contract address\n    */\n    function setGovernanceContract(address _governance) external onlyDebondOperator {\n        governance = _governance;\n    }\n\n    /**\n    * @dev get the governance contract address\n    * @param gov governance contract address\n    */\n    function getGovernanceContract() external view returns(address gov) {\n        gov = governance;\n    }\n\n    /**\n    * @dev set the interest rate of DBIT to gain when unstaking dGoV\n    * @param _interest The new interest rate\n    */\n    function setInterestRate(uint256 _interest) external onlyDebondOperator {\n        interestRate = _interest;\n    }\n\n    /**\n    * @dev get the interest rate of DBIT to gain when unstaking dGoV\n    * @param _interestRate The interest rate\n    */\n    function getInterestRate() public view returns(uint256 _interestRate) {\n        _interestRate = interestRate;\n    }\n\n    /**\n    * @dev get the amount of dGoV staked by a user\n    * @param _user address of the user\n    * @param _stakedAmount amount of dGoV staked by the user\n    */\n    function getStakedDGOV(address _user) external view returns(uint256 _stakedAmount) {\n        _stakedAmount = stackedDGOV[_user].amountDGOV;\n    }\n\n    /**\n    * @dev set the DBIT contract address\n    * @param _dbit DBIT address\n    */\n    function setDBITContract(address _dbit) external {\n        dbit = _dbit;\n    }\n\n    /**\n    * @dev calculate the interest earned in DBIT\n    * @param _staker the address of the dGoV staker\n    * @param interest interest earned\n    */\n    function calculateInterestEarned(\n        address _staker\n    ) external view onlyGov returns(uint256 interest) {\n        StackedDGOV memory staked = stackedDGOV[_staker];\n        require(staked.amountDGOV > 0, \"Staking: no dGoV staked\");\n\n        uint256 _interestRate = getInterestRate();\n\n        interest = _interestRate * staked.duration / NUMBER_OF_SECONDS_IN_YEAR;\n    }\n\n    /**\n    * @dev Estimate how much Interest the user has gained since he staked dGoV\n    * @param _amount the amount of DBIT staked\n    * @param _duration staking duration to estimate interest from\n    * @param interest the estimated interest earned so far\n    */\n    function estimateInterestEarned(\n        uint256 _amount,\n        uint256 _duration\n    ) external view returns(uint256 interest) {\n        uint256 _interestRate = getInterestRate();\n        interest = _amount * (_interestRate * _duration / NUMBER_OF_SECONDS_IN_YEAR);\n    }\n\n    /**\n    * @dev update the stakedDGOV struct after a staker unstake dGoV\n    * @param _staker the address of the staker\n    * @param _amount the amount of dGoV token that have been unstake\n    * @param updated true if the struct has been updated, false otherwise\n    */\n    function updateStakedDGOV(\n        address _staker,\n        uint256 _amount\n    ) external onlyGov returns(bool updated) {\n        stackedDGOV[_staker].amountDGOV -= _amount;\n\n        updated = true;\n    }\n}"
    },
    "contracts/Debond-v0/contracts/interfaces/IStakingDGOV.sol": {
      "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@dGOV.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\ninterface IStakingDGOV {\n    /**\n    * @dev emitted when dGoV tokens are stacked\n    */\n    event dgovStacked(address _staker, uint256 _amount);\n\n    /**\n    * @dev emitted when dGoV tokens are unstacked\n    */\n    event dgovUnstacked(address _staker, address _to, uint256 _amount);\n\n    /**\n    * @dev stake dGoV tokens and receive staking tokens\n    */\n    function stakeDgovToken(address _staker, uint256 _amount, uint256 _duration) external;\n\n    /**\n    * @dev unstake dGoV tokens and burn staking tokens\n    */\n    function unstakeDgovToken(address _staker, address _to, uint256 _amount) external;\n\n    /**\n    * @dev set the governance contract address\n    * @param _governance contract address\n    */\n    function setGovernanceContract(address _governance) external;\n\n    /**\n    * @dev get the governance contract address\n    */\n    function getGovernanceContract() external view returns(address gov);\n\n    /**\n    * @dev get the amount of dGoV staked by a user\n    */\n    function getStakedDGOV(address _user) external view returns(uint256 _stakedAmount);\n\n    /**\n    * @dev set the DBIT interest rate APY\n    * @param _dbitInterest new interest rate\n    */\n    function setInterestRate(uint256 _dbitInterest) external;\n\n    /**\n    * @dev calculate the interest earned in DBIT\n    */\n    function calculateInterestEarned(address _staker) external view returns(uint256 interest);\n\n    /**\n    * @dev update the StakedDGOV struct when a user unstake their dGoV\n    */\n    function updateStakedDGOV(address _staker, uint256 _amount) external returns(bool updated);\n\n    /**\n    * @param _interestRate interest rate\n    */\n    function getInterestRate() external view returns(uint256 _interestRate);\n\n    /**\n    * @dev set the DBIT contract address\n    */\n    function setDBITContract(address _dbit) external;\n}"
    },
    "contracts/Debond-v0/contracts/Governance.sol": {
      "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@dGOV.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./utils/GovStorage.sol\";\nimport \"./interfaces/IVoteToken.sol\";\nimport \"./interfaces/IStakingDGOV.sol\";\nimport \"./interfaces/IGovernance.sol\";\n\ncontract Governance is GovStorage, IGovernance, ReentrancyGuard {\n    \n    constructor(\n        address _dbit,\n        address _dGoV,\n        address _stakingContract,\n        address _voteToken,\n        address _debondOperator,\n        uint256 _dbitAmountForVote\n    ) {\n        DBIT = _dbit;\n        dGoV = _dGoV;\n        voteToken = _voteToken;\n        stakingContract = _stakingContract;\n        _dbitAmountForOneVote = _dbitAmountForVote;\n        debondOperator = _debondOperator;\n    }\n\n    /**\n    * @dev sets the amount of DBIT to get for one vote token\n    * @param _dbitAmount DBIT amount\n    */\n    function setDBITAmountForOneVote(uint256 _dbitAmount) public onlyGov() {\n        _dbitAmountForOneVote = _dbitAmount;\n    }\n\n    /**\n    * @dev set the governance contract address\n    * @param _governanceAddress new governance contract address\n    */\n    function setGovernanceAddress(address _governanceAddress) external {\n        require(_governanceAddress != governance, \"Gov: same Gov. address\");\n\n        governance = _governanceAddress;\n    }\n\n    /**\n    * @dev set the Debond operator contract address\n    * @param _debondOperator new Debond operator address\n    */\n    function setDebonOperator(address _debondOperator) external {\n        require(_debondOperator != debondOperator, \"Gov: same Gov. address\");\n\n        debondOperator = _debondOperator;\n    }\n\n    /**\n    * @dev returns the amount of DBIT to get for one vote token\n    * @param dbitAmount DBIT amount\n    */\n    function getDBITAmountForOneVote() public view returns(uint256 dbitAmount) {\n        dbitAmount = _dbitAmountForOneVote;\n    }\n\n    /**\n    * @dev creates a proposal\n    * @param _class proposal class\n    * @param _endTime prosal end time\n    * @param _contractAddress the proposal contract address\n    */\n    function registerProposal(\n        uint128 _class,\n        address _owner, \n        uint256 _endTime,\n        uint256 _dbitRewards,\n        address _contractAddress,\n        bytes32 _proposalHash,\n        uint256[] memory _dbitDistributedPerDay\n    ) external onlyDebondOperator {\n        require(Address.isContract(_contractAddress), \"Gov: Proposal contract not valid\");\n\n        uint128 _nonce = _generateNewNonce(_class);\n\n        proposal[_class][_nonce].owner = _owner;\n        proposal[_class][_nonce].startTime = block.timestamp;\n        require(block.timestamp < _endTime, \"Gov: incorrect end time\");\n        proposal[_class][_nonce].endTime = _endTime;\n        proposal[_class][_nonce].dbitRewards = _dbitRewards;\n        proposal[_class][_nonce].contractAddress = _contractAddress;\n        proposal[_class][_nonce].proposalHash = _proposalHash;\n        proposal[_class][_nonce].status = ProposalStatus.Approved;\n        proposal[_class][_nonce].dbitDistributedPerDay = _dbitDistributedPerDay;\n\n        _zeroArray(_class, _nonce, _dbitDistributedPerDay);\n\n        emit proposalRegistered(_class, _nonce, _endTime, _contractAddress);\n    }\n\n    /**\n    * @dev revoke a proposal\n    * @param _class proposal class\n    * @param _nonce proposal nonce\n    */\n    function revokeProposal(\n        uint128 _class,\n        uint128 _nonce\n    ) external onlyDebondOperator onlyActiveProposal(_class, _nonce) {\n        proposal[_class][_nonce].status = ProposalStatus.Revoked;\n\n        emit proposalRevoked(_class, _nonce);\n    }\n\n    /**\n    * @dev pause a active proposal\n    * @param _class proposal class\n    * @param _nonce proposal nonce\n    */\n    function pauseProposal(\n        uint128 _class,\n        uint128 _nonce\n    ) external onlyDebondOperator onlyActiveProposal(_class, _nonce) {\n        proposal[_class][_nonce].status = ProposalStatus.Paused;\n\n        emit proposalPaused(_class, _nonce);\n    }\n\n    /**\n    * @dev unpause a active proposal\n    * @param _class proposal class\n    * @param _nonce proposal nonce\n    */\n    function unpauseProposal(\n        uint128 _class,\n        uint128 _nonce\n    ) external onlyDebondOperator onlyActiveProposal(_class, _nonce) {\n        proposal[_class][_nonce].status = ProposalStatus.Approved;\n\n        emit proposalPaused(_class, _nonce);\n    }\n\n    /**\n    * @dev revoke a proposal\n    * @param _class proposal class\n    * @param _nonce proposal nonce\n    * @param _userVote The voter vote: For or Against\n    * @param _amountVoteTokens amount of vote tokens\n    */\n    function vote(\n        address _voter,\n        uint128 _class,\n        uint128 _nonce,\n        address _proposalContractAddress,\n        VoteChoice _userVote,\n        uint256 _amountVoteTokens\n    ) external onlyActiveProposal(_class, _nonce) nonReentrant() returns(bool voted) {\n        // require the vote to be in progress\n        Proposal memory _proposal = proposal[_class][_nonce];\n        require(block.timestamp < _proposal.endTime, \"Gov: voting is over\");\n        // require the user has staked at least `_amountVoteTokens` dGoV tokens\n        IStakingDGOV _stakingContract = IStakingDGOV(stakingContract);\n        uint256 _amountStaked = _stakingContract.getStakedDGOV(_voter);\n        require(_amountVoteTokens <= _amountStaked, \"Gov: you need to stack dGoV tokens\");\n        \n        // require the user has enough vote tokens\n        IERC20 _voteTokenContract = IERC20(voteToken);\n        require(\n            _checkIfVoterHasEnoughVoteTokens(_voter, _amountVoteTokens),\n            \"Gov: not enough enough vote tokens\"\n        );\n\n        // require the user hasn't voted yet\n        require(_checkIfNotVoted(_class, _nonce, _proposalContractAddress), \"Gov: Already voted\");\n        \n        // LOCK THEM AND NOT TRANSFER\n        _voteTokenContract.transferFrom(_voter, address(this), _amountVoteTokens);\n\n        _vote(\n            _class,\n            _nonce,\n            _amountVoteTokens,\n            _proposalContractAddress,\n            _userVote,\n            _proposal\n        );\n                        \n        voted = true;\n\n        emit userVoted(_class, _nonce, _proposalContractAddress, _amountVoteTokens);\n    }\n\n    /**\n    * @dev redeem vote tokens and get dbit interest\n    * @param _voter the address of the voter\n    * @param _to address to send interest to\n    * @param _class proposal class\n    * @param _nonce proposal nonce\n    * @param _contractAddress proposal contract address\n    */\n    function redeemVoteTokenForDBIT(\n        address _voter,\n        address _to,\n        uint128 _class,\n        uint128 _nonce,\n        address _contractAddress\n    ) external nonReentrant() {\n        Proposal memory _proposal = proposal[_class][_nonce];\n        require(block.timestamp > _proposal.endTime, \"Gov: still voting\");\n\n        bytes32 _hash = _hashVote(_voter, _class, _nonce, _contractAddress);\n        Vote memory _userVote = votes[_hash];\n        require(_userVote.voted == true, \"Gov: you haven't voted\");\n        require(_userVote.amountTokens > 0, \"Gov: no tokens\");\n        require(_userVote.votingDay > 0, \"Gov: invalid vote\");\n\n        require(\n            _transferDBITInterest(\n                _voter,\n                _to,\n                _class,\n                _nonce,\n                _contractAddress\n            ),\n            \"Gov: cannot transfer DBIT interest\"\n        );\n\n        emit voteTokenRedeemed(_voter, _to, _class, _nonce, _contractAddress);\n    }\n\n    /**\n    * @dev stake DGOV tokens and gain DBIT interests\n    * @param _staker the address of the staker\n    * @param _amount the amount of DGOV to stake\n    * @param _duration the time the tokens wiull be staked\n    * @param staked true if tokens have been staked, false otherwise\n    */\n    function stakeDGOV(\n        address _staker,\n        uint256 _amount,\n        uint256 _duration\n    ) external returns(bool staked) {\n        IStakingDGOV IStaking = IStakingDGOV(stakingContract);\n        IStaking.stakeDgovToken(_staker, _amount, _duration);\n\n        staked = true;\n    }\n\n    /**\n    * @dev unstake DGOV tokens and gain DBIT interests\n    * @param _staker the address of the staker\n    * @param _amount the amount of DGOV to stake\n    * @param _to address to which DGOV tokens are sent back\n    * @param unstaked true if tokens have been staked, false otherwise\n    */\n    function unstakeDGOV(\n        address _staker,\n        address _to,\n        uint256 _amount\n    ) external returns(bool unstaked) {\n        IStakingDGOV IStaking = IStakingDGOV(stakingContract);\n        IStaking.unstakeDgovToken(_staker, _to, _amount);\n\n        // transfer the interest earned in DBIT to the staker\n        uint256 interest = IStaking.calculateInterestEarned(_staker);\n        require(IStaking.updateStakedDGOV(_staker, _amount), \"Gov: don't have enough DGOV\");\n        IERC20 Idbit = IERC20(DBIT);\n        Idbit.transfer(_to, _amount * interest);\n\n        unstaked = true;\n    }\n\n        /**\n    * @dev return a proposal\n    * @param _class proposal class\n    * @param _nonce proposal nonce\n    */\n    function getProposal(\n        uint128 _class,\n        uint128 _nonce\n    ) external view returns(Proposal memory _proposal) {\n        _proposal = proposal[_class][_nonce];\n    }\n\n    /**\n    * @dev return the array that contains number votes for each day\n    * @param _class proposal class\n    * @param _nonce proposal nonce\n    */\n    function getNumberOfVotePerDay(\n        uint128 _class,\n        uint128 _nonce\n    ) external view returns(uint256[] memory) {\n        return proposal[_class][_nonce].totalVoteTokensPerDay;\n    }\n\n    /**\n    * @dev Transfer DBIT interests earned by voting\n    * @param _voter the address of the voter\n    * @param _to the address to which to send interests\n    * @param _class proposal class\n    * @param _nonce proposal nonce\n    * @param _contractAddress proposal contract address\n    */\n    function _transferDBITInterest(\n        address _voter,\n        address _to,\n        uint128 _class,\n        uint128 _nonce,\n        address _contractAddress\n    ) internal returns(bool _transfered) {\n        Proposal memory _proposal = proposal[_class][_nonce];\n\n        uint256 proposalDurationInDay = _proposal.dbitDistributedPerDay.length;\n        uint256 numberOfDays = _getNumberOfDaysRewarded(_voter, _class, _nonce, _contractAddress);\n        require(numberOfDays <= proposalDurationInDay, \"Gov: Invalid vote\");\n\n        bytes32 _hash = _hashVote(_voter, _class, _nonce, _contractAddress);\n        Vote memory _userVote = votes[_hash];\n\n        uint256 _reward = 0;\n        for(uint256 i = proposalDurationInDay - numberOfDays; i < numberOfDays; i++) {\n            _reward += _proposal.dbitDistributedPerDay[i] / _proposal.totalVoteTokensPerDay[i];\n        }\n\n        _reward = _reward * _userVote.amountTokens;\n\n        // burn vote tokens owned by the user\n        votes[_hash].amountTokens = 0;\n        IVoteToken _voteTokenContract = IVoteToken(voteToken);\n        _voteTokenContract.burnVoteToken(_voter, _userVote.amountTokens);\n\n        // transfer DBIT interests to user\n        IERC20 _dbit = IERC20(DBIT);\n        _dbit.transferFrom(DBIT, _to, _reward);\n\n        _transfered = true;\n    }\n\n    /**\n    * @dev update the proiposal and vote struct\n    * @param _class proposal class\n    * @param _nonce proposal nonce\n    * @param _amount amount of vote tokens\n    * @param _contractAddress proposal contract address\n    * @param _userVote The user vote: For or Against\n    */\n    function _vote(\n        uint128 _class,\n        uint128 _nonce,\n        uint256 _amount,\n        address _contractAddress,\n        VoteChoice _userVote,\n        Proposal memory _proposal\n    ) internal {\n        bytes32 hash = _hashVote(msg.sender, _class, _nonce, _contractAddress);\n\n        uint256 forVotes = _proposal.forVotes;\n        uint256 againstVotes = _proposal.againstVotes;\n\n        if(_userVote == VoteChoice.For) {\n            proposal[_class][_nonce].forVotes = forVotes + _amount;\n            votes[hash].vote = _userVote;\n        } \n        \n        if(_userVote == VoteChoice.Against) {\n            proposal[_class][_nonce].againstVotes = againstVotes + _amount;\n            votes[hash].vote = _userVote;\n        }\n        \n        uint nbOfVoters = proposal[_class][_nonce].numberOfVoters;\n        proposal[_class][_nonce].numberOfVoters = nbOfVoters + 1;\n        _updateTotalVoteTokensPerDay(_class, _nonce, _amount);\n\n        votes[hash].class = _class;\n        votes[hash].nonce = _nonce;\n        votes[hash].contractAddress = _contractAddress;\n        votes[hash].voted = true;\n        votes[hash].amountTokens = _amount;\n        votes[hash].votingDay = _getVotingDay(_class, _nonce);\n    }\n\n    /**\n    * @dev check if a user has enough vote tokens to vote\n    * @param _voter the address of the voter\n    * @param _amountVoteTokens amount ofg tokens to vote with\n    * @param hasEnoughTokens true if the voter has enough vote tokens, false otherwise\n    */\n    function _checkIfVoterHasEnoughVoteTokens(\n        address _voter,\n        uint256 _amountVoteTokens\n    ) internal view returns(bool hasEnoughTokens) {\n        IERC20 _voteTokenContract = IERC20(voteToken);\n        uint256 voteTokens = _voteTokenContract.balanceOf(_voter);\n\n        hasEnoughTokens = _amountVoteTokens > 0 && _amountVoteTokens <= voteTokens;\n\n        require(\n            _amountVoteTokens > 0 &&\n            _amountVoteTokens <= voteTokens,\n            \"Gov: not enough enough vote tokens\"\n        );\n    }\n\n    /**\n    * @dev update the total vote tokens received for a proposal during 24 hours\n    * @param _class proposal class\n    * @param _nonce proposal nonce\n    * @param _amountVoteTokens amount of vote token to add\n    */\n    function _updateTotalVoteTokensPerDay(\n        uint128 _class,\n        uint128 _nonce,\n        uint256 _amountVoteTokens\n    ) internal {\n        uint256 day = _getVotingDay(_class, _nonce);\n\n        uint256 totalVoteTokensPerDay = proposal[_class][_nonce].totalVoteTokensPerDay[day];\n        proposal[_class][_nonce].totalVoteTokensPerDay[day] = totalVoteTokensPerDay + _amountVoteTokens;\n    }\n\n    /**\n    * @dev get the bnumber of days elapsed since the vote has started\n    * @param _class proposal class\n    * @param _nonce proposal nonce\n    * @param day the current voting day\n    */\n    function _getVotingDay(uint128 _class, uint128 _nonce) internal view returns(uint256 day) {\n        Proposal memory _proposal = proposal[_class][_nonce];\n\n        uint256 duration = _proposal.startTime > block.timestamp ?\n            _proposal.startTime - block.timestamp:\n            block.timestamp - _proposal.startTime;\n        \n        day = (duration / NUMBER_OF_SECONDS_IN_DAY);\n    }\n\n    /**\n    * @dev get the bnumber of days elapsed since the user has voted\n    * @param _voter the address of the voter\n    * @param _class proposal class\n    * @param _nonce proposal nonce\n    * @param _contractAddress proposal contract address\n    * @param numberOfDay the number of days\n    */\n    function _getNumberOfDaysRewarded(\n        address _voter,\n        uint128 _class,\n        uint128 _nonce,\n        address _contractAddress\n    ) internal view returns(uint256 numberOfDay) {\n        Proposal memory _proposal = proposal[_class][_nonce];\n        uint256 proposalDurationInDay = _proposal.dbitDistributedPerDay.length;\n\n        bytes32 _hash = _hashVote(_voter, _class, _nonce, _contractAddress);\n        Vote memory _userVote = votes[_hash];\n        uint256 votingDay = _userVote.votingDay;\n\n        numberOfDay = (proposalDurationInDay - votingDay) + 1;\n    }\n\n    /**\n    * @dev Check if a user already voted for a proiposal\n    * @param _hash vote hash\n    * @param voted true if already voted, false if not\n    */\n    function _voted(bytes32 _hash) internal view returns(bool voted) {\n        voted = votes[_hash].voted;\n    }\n\n    /**\n    * @dev returns a hash fro the vote\n    * @param _voter the address of the voter\n    * @param _class the proposal class\n    * @param _nonce the proposal nonce\n    * @param _contractAddress the proposal contract address\n    */\n    function _hashVote(\n        address _voter,\n        uint128 _class,\n        uint128 _nonce,\n        address _contractAddress\n    ) private pure returns(bytes32 voteHash) {\n        voteHash = keccak256(\n            abi.encodePacked(\n                _voter,\n                _class,\n                _nonce,\n                _contractAddress\n            )\n        );\n    }\n\n    /**\n    * @dev check if a user hasn't voted yet\n    * @param _class proposal class\n    * @param _nonce proposal nonce\n    * @param _proposalContractAddress addres of the proposal contract\n    */\n    function _checkIfNotVoted(\n        uint128 _class,\n        uint128 _nonce,\n        address _proposalContractAddress\n    ) internal view returns(bool) {\n        bytes32 _hash = _hashVote(msg.sender, _class, _nonce, _proposalContractAddress);\n        bool hasVoted = _voted(_hash);\n        require(hasVoted == false, \"Gov: Already voted\");\n\n        return true;\n    }\n\n    /**\n    * @dev return an array of zeros with same size as the input array\n    * @param _class proposal class\n    * @param _nonce proposal nonce\n    * @param _dbitDistributedPerDay array that contains DBIT to distribute per day\n    */\n    function _zeroArray(\n        uint128 _class,\n        uint128 _nonce,\n        uint256[] memory _dbitDistributedPerDay\n    ) internal {\n        proposal[_class][_nonce].totalVoteTokensPerDay = _dbitDistributedPerDay;\n        \n        for(uint256 i = 0; i < _dbitDistributedPerDay.length; i++) {\n            proposal[_class][_nonce].totalVoteTokensPerDay[i] = 0;\n        }\n    }\n\n    /**\n    * @dev return the last nonce of a given class\n    * @param _class proposal class\n    * @param lastNonce the last nonce of the class\n    */\n    function _getClassLastNonce(uint128 _class) internal view returns(uint256 lastNonce) {\n        return proposalClass[_class].nonce;\n    }\n\n    /**\n    * @dev generate a new nonce for a given class\n    * @param _class proposal class\n    */\n    function _generateNewNonce(uint128 _class) internal returns(uint128 nonce) {\n        proposalClass[_class].nonce++;\n\n        nonce = proposalClass[_class].nonce;\n    }\n}"
    },
    "contracts/Debond-v0/contracts/utils/GovStorage.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\ncontract GovStorage {\n    struct Proposal {\n        address owner;\n        address contractAddress;\n        uint256 startTime;\n        uint256 endTime;\n        uint256 forVotes;\n        uint256 againstVotes;\n        uint256 numberOfVoters;\n        uint256 minimumNumberOfVotes;\n        uint256 dbitRewards;\n        uint256[] dbitDistributedPerDay;\n        uint256[] totalVoteTokensPerDay;\n        bytes32 proposalHash;\n        ProposalStatus status;\n    }\n\n    struct Vote {\n        uint128 class;\n        uint128 nonce;\n        address contractAddress;\n        bool voted;\n        VoteChoice vote;\n        uint256 amountTokens;\n        uint256 votingDay;\n    }\n\n    struct ProposalClass {\n        uint128 nonce;\n    }\n\n    address public debondOperator;  // entities with Veto access for the proposal\n    address public DBIT;\n    address public dGoV;\n    address public bank;\n    address public voteToken;\n    address public governance;\n    address public stakingContract;\n\n    uint256 public _totalVoteTokenSupply;\n    uint256 public _totalVoteTokenMinted;\n    uint256 public _dbitAmountForOneVote;\n\n    uint256 constant public NUMBER_OF_SECONDS_IN_DAY = 1 days;\n    uint256 private stakingDgoVDuration;\n    uint256 private _lockTime;\n\n    mapping(address => uint256) internal voteTokenBalance;\n    mapping(uint128 => mapping(uint128 => Proposal)) proposal;\n    mapping(bytes32 => Vote) votes;\n    mapping(uint128 => ProposalClass) proposalClass;\n\n    enum ProposalStatus {Approved, Paused, Revoked, Ended}\n    enum VoteChoice {For, Against, Abstain}\n\n    modifier onlyGov {\n        require(msg.sender == governance, \"Gov: not governance\");\n        _;\n    }\n\n    modifier onlyDebondOperator {\n        require(msg.sender == debondOperator, \"Gov: Need rights\");\n        _;\n    }\n\n    modifier canClaimTokens(uint128 _class, uint128 _nonce) {\n        Proposal memory _proposal = proposal[_class][_nonce];\n        require(_proposal.endTime + _lockTime <= block.timestamp, \"\");\n        _;\n    }\n\n    modifier onlyActiveProposal(uint128 _class, uint128 _nonce) {\n        Proposal memory _proposal = proposal[_class][_nonce];\n        require(\n            _proposal.endTime >= block.timestamp,\n            \"Gov: proposal not found\"\n        );\n        require(_proposal.status == ProposalStatus.Approved);\n        _;\n    }\n\n    modifier onlyCorrectOwner(bytes32 proposalHash,uint128 classId, uint128 proposalId) {\n        require(proposalHash == proposal[classId][proposalId].proposalHash, \"proposal executed is not mentioned corresponding to proposal\");\n        _;\n    }  \n}"
    },
    "contracts/Debond-v0/contracts/interfaces/IGovernance.sol": {
      "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n\ninterface IGovernance {\n    /**\n    * @dev emitted when new virtual `voteToken` tokens are created\n    */\n    event tokenMinted(address _user, uint256 _amount);\n\n    /**\n    * @dev emitted when new virtual `voteToken` tokens are burned\n    */\n    event tokenBurned(address _user, uint256 _amount);\n\n    /**\n    * @dev emitted when new virtual `voteToken` tokens is transfered\n    */\n    event voteTokenTransfered(address _from, address _to, uint256 _amount);\n    \n    /**\n    * @dev emitted when a new proposal is created\n    */\n    event proposalRegistered(\n        uint128 _class,\n        uint128 _nonce,\n        uint256 _endTime,\n        address _contractAddress\n    );\n\n    /**\n    * @dev emitted when a new proposal is revoked\n    */\n    event proposalRevoked(\n        uint128 _class,\n        uint128 _nonce\n    );\n\n    /**\n    * @dev emitted when a new proposal is paused\n    */\n    event proposalPaused(\n        uint128 _class,\n        uint128 _nonce\n    );\n\n        /**\n    * @dev emitted when a user vote\n    */\n    event userVoted(\n        uint128 _class,\n        uint128 _nonce,\n        address _proposalContractAddress,\n        uint256 _amountVoteTokens\n    );\n\n    /**\n    * @dev emitted when vote tokens are redeemed\n    */\n    event voteTokenRedeemed(\n        address _voter,\n        address _to,\n        uint128 _class,\n        uint128 _nonce,\n        address _contractAddress\n    );\n\n    /**\n    * @dev register a proposal\n    */\n    function registerProposal(\n        uint128 _class,\n        address _owner,\n        uint256 _endTime,\n        uint256 _dbitRewards,\n        address _contractAddress,\n        bytes32 _proposalHash,\n        uint256[] memory _dbitDistributedPerDay\n    ) external;\n\n    /**\n    * @dev revoke a proposal\n    */\n    function revokeProposal(\n        uint128 _class,\n        uint128 _nonce\n    ) external;\n\n    /**\n    * @dev redeem vote tokens for DBIT interests gained\n    */\n    function redeemVoteTokenForDBIT(\n        address _voter,\n        address _to,\n        uint128 _class,\n        uint128 _nonce,\n        address _contractAddress\n    ) external;\n}"
    },
    "contracts/Debond-v0/contracts/Tokens/ERC20Token.sol": {
      "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@dGOV.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Token is ERC20 {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) {}\n\n    function mint(address _user, uint256 _amount) external {\n        _mint(_user, _amount);\n    }\n\n    function burn(address _user, uint256 _amount) external {\n        _burn(_user, _amount);\n    }\n}\n"
    },
    "contracts/Debond-v0/contracts/test/DAI.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: MIT\n\nimport \"./FakeERC20.sol\";\n\ncontract DAI is FakeERC20 {\n    constructor() ERC20(\"DAI Test\", \"DAI\") {}\n\n    function mint(address _to, uint256 _amount) external {\n        _mint(_to, _amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}