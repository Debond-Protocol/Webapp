{
  "address": "0x47a5D54dE11E29Ce51E4381b65f031f63b7505b3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "DBIT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "USDC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "USDT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "DAI",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "SIX_M_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "enum IData.InterestRateType",
          "name": "interestRateType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "periodTimestamp",
          "type": "uint256"
        }
      ],
      "name": "addClass",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allDebondClasses",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "debondClassId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchaseClassId",
          "type": "uint256"
        }
      ],
      "name": "canPurchase",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        }
      ],
      "name": "getClassFromId",
      "outputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "enum IData.InterestRateType",
          "name": "interestRateType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "periodTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        }
      ],
      "name": "getLastNonceCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonceId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "debondClassId",
          "type": "uint256"
        }
      ],
      "name": "getPurchasableClasses",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "debondClassId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchasableQueryClassId",
          "type": "uint256"
        }
      ],
      "name": "isPurchasableClass",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "purchasableClasses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "purchasableClassesCollection",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonceId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        }
      ],
      "name": "updateLastNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "debondClassId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchaseClassId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "purchasable",
          "type": "bool"
        }
      ],
      "name": "updatePurchasableClass",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ee761dca4f3ddd66f58c696366084ce24c6514c8447235845628666624c1f55",
  "receipt": {
    "to": null,
    "from": "0x959FD7Ef9089B7142B6B908Dc3A8af7Aa8ff0FA1",
    "contractAddress": "0x47a5D54dE11E29Ce51E4381b65f031f63b7505b3",
    "transactionIndex": 0,
    "gasUsed": "1674413",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2d1dd947b75714f5848c2b9b0e135bc5c7ebc16944248dc22249e9b0e1ab2f36",
    "transactionHash": "0x2ee761dca4f3ddd66f58c696366084ce24c6514c8447235845628666624c1f55",
    "logs": [],
    "blockNumber": 10898908,
    "cumulativeGasUsed": "1674413",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x723f5Db6225Cc9079Bc3B34CFd4F0A21f66774cA",
    "0x6421223477D6328864563EDAc2Ca99003dd1aEE4",
    "0x814AB7B629D1E1267c540206691068354F50a892",
    "0x17C08eBE61679119D8433120E2BACeC0d37627Fe"
  ],
  "numDeployments": 4,
  "solcInputHash": "59697760ba823b401b4c53fac791d6ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"DBIT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"USDC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"USDT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"DAI\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SIX_M_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"enum IData.InterestRateType\",\"name\":\"interestRateType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"periodTimestamp\",\"type\":\"uint256\"}],\"name\":\"addClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allDebondClasses\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debondClassId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseClassId\",\"type\":\"uint256\"}],\"name\":\"canPurchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"getClassFromId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"enum IData.InterestRateType\",\"name\":\"interestRateType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"periodTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"getLastNonceCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debondClassId\",\"type\":\"uint256\"}],\"name\":\"getPurchasableClasses\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debondClassId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchasableQueryClassId\",\"type\":\"uint256\"}],\"name\":\"isPurchasableClass\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchasableClasses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchasableClassesCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"name\":\"updateLastNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debondClassId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseClassId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"purchasable\",\"type\":\"bool\"}],\"name\":\"updatePurchasableClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addClass(uint256,string,uint8,address,uint256)\":{\"notice\":\"this method should only be called by the governance contract TODO Only Governance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Debond-v0/contracts/DebondData.sol\":\"DebondData\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Debond-v0/contracts/DebondData.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\n\\nimport './interfaces/IData.sol';\\nimport './libraries/CDP.sol';\\n\\n\\ncontract DebondData is IData {\\n    uint public constant SIX_M_PERIOD = 0; // 1 min period for tests\\n\\n    struct Class {\\n        uint id;\\n        bool exists;\\n        string symbol;\\n        InterestRateType interestRateType;\\n        address tokenAddress;\\n        uint periodTimestamp;\\n        uint lastNonceIdCreated;\\n        uint lastNonceIdCreatedTimestamp;\\n    }\\n\\n    mapping(uint => Class) classes; // mapping from classId to class\\n    // data to be exclusively for the front end (for now)\\n    mapping(uint => uint[]) public purchasableClassesCollection;//from a debond class given return purchasable class ids associated\\n    mapping(uint => mapping(uint => bool)) public purchasableClasses; //from a debond class given return purchasable class ids associated\\n    uint[] debondClasses; // return collection of class that client can purchase (debond classes)\\n\\n    constructor(\\n        address DBIT,\\n        address USDC,\\n        address USDT,\\n        address DAI\\n    ) {\\n\\n        addClass(0, \\\"D/BIT\\\", InterestRateType.FixedRate, DBIT, SIX_M_PERIOD);\\n        addClass(1, \\\"USDC\\\", InterestRateType.FixedRate, USDC, SIX_M_PERIOD);\\n        addClass(2, \\\"USDT\\\", InterestRateType.FixedRate, USDT, SIX_M_PERIOD);\\n        addClass(3, \\\"DAI\\\", InterestRateType.FixedRate, DAI, SIX_M_PERIOD);\\n\\n        addClass(4, \\\"D/BIT\\\", InterestRateType.FloatingRate, DBIT, SIX_M_PERIOD);\\n        addClass(5, \\\"USDC\\\", InterestRateType.FloatingRate, USDC, SIX_M_PERIOD);\\n        addClass(6, \\\"USDT\\\", InterestRateType.FloatingRate, USDT, SIX_M_PERIOD);\\n        addClass(7, \\\"DAI\\\", InterestRateType.FloatingRate, DAI, SIX_M_PERIOD);\\n\\n        debondClasses.push(0);\\n        debondClasses.push(4);\\n\\n        assignClass(0, 1);\\n        assignClass(0, 2);\\n        assignClass(0, 3);\\n        assignClass(4, 5);\\n        assignClass(4, 6);\\n        assignClass(4, 7);\\n\\n    }\\n\\n    /**\\n     * @notice this method should only be called by the governance contract TODO Only Governance\\n     */\\n    function addClass(uint classId, string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp) public override {\\n        Class storage class = classes[classId];\\n        require(!class.exists, \\\"DebondData: cannot add an existing classId\\\");\\n        class.id = classId;\\n        class.exists = true;\\n        class.symbol = symbol;\\n        class.interestRateType = interestRateType;\\n        class.tokenAddress = tokenAddress;\\n        class.periodTimestamp = periodTimestamp;\\n\\n        // should maybe add an event\\n    }\\n\\n    // TODO Only Governance\\n    function updatePurchasableClass (uint debondClassId, uint purchaseClassId, bool purchasable) external override {\\n        purchasableClasses[debondClassId][purchaseClassId] = purchasable;\\n    }\\n\\n    function canPurchase(uint debondClassId, uint purchaseClassId) public view returns (bool) {\\n        return purchasableClasses[debondClassId][purchaseClassId];\\n    }\\n\\n    function getClassFromId(\\n        uint classId\\n    ) external view returns(string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp) {\\n        Class storage class = classes[classId];\\n        symbol = class.symbol;\\n        periodTimestamp = class.periodTimestamp;\\n        tokenAddress = class.tokenAddress;\\n        interestRateType = class.interestRateType;\\n        return (symbol, interestRateType, tokenAddress, periodTimestamp);\\n    }\\n\\n    // TODO Only Bank\\n    function getLastNonceCreated(uint classId) external view returns(uint nonceId, uint createdAt) {\\n        Class storage class = classes[classId];\\n        require(class.exists, \\\"Debond Data: class id given not found\\\");\\n        nonceId = class.lastNonceIdCreated;\\n        createdAt = class.lastNonceIdCreatedTimestamp;\\n        return (nonceId, createdAt);\\n    }\\n\\n    // TODO Only Bank\\n    function updateLastNonce(uint classId, uint nonceId, uint createdAt) external {\\n        Class storage class = classes[classId];\\n        require(class.exists, \\\"Debond Data: class id given not found\\\");\\n        class.lastNonceIdCreated = nonceId;\\n        class.lastNonceIdCreatedTimestamp = createdAt;\\n    }\\n\\n    function allDebondClasses() external view returns (uint[] memory) {\\n        return debondClasses;\\n    }\\n\\n    function getPurchasableClasses(uint debondClassId) external view returns (uint[] memory) {\\n        return purchasableClassesCollection[debondClassId];\\n    }\\n\\n    function isPurchasableClass(uint debondClassId, uint purchasableQueryClassId) external view returns (bool) {\\n        return purchasableClasses[debondClassId][purchasableQueryClassId];\\n    }\\n\\n    function assignClass(uint debondClass, uint purchaseClass) private {\\n        purchasableClassesCollection[debondClass].push(purchaseClass);\\n        purchasableClasses[debondClass][purchaseClass] = true;\\n    }\\n\\n\\n\\n\\n\\n}\\n\",\"keccak256\":\"0x376e7dbfad192bc4fed5b1a3f5655bd0c8e90f516b0bee496c26b8c347b56306\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/interfaces/IData.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\ninterface IData {\\n\\n    enum InterestRateType {FixedRate, FloatingRate}\\n\\n    function addClass(uint classId, string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp) external;\\n\\n    function updatePurchasableClass(uint debondClassId, uint purchaseClassId, bool purchasable) external;\\n\\n    function canPurchase(uint debondClassId , uint purchaseClassId) external view returns (bool);\\n\\n    function getClassFromId(uint classId) external view returns(string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp);\\n\\n    function getLastNonceCreated(uint classId) external view returns(uint nonceId, uint createdAt);\\n\\n    function updateLastNonce(uint classId, uint nonceId, uint createdAt) external;\\n}\\n\",\"keccak256\":\"0x1e7a987cf8f11f6c8670ea6136e90af6dcfb718fb1acc03c2380bb02d68519de\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/libraries/CDP.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n\\nimport \\\"./SafeMath.sol\\\";\\n/**\\nfunctions for determining the amount of DBIT to be mint and pricing \\n*/ \\nlibrary CDP {\\n using SafeMath for uint256;\\n\\n  function BondExchangeRate(uint256 _dbitTotalSupply) public pure returns (uint256 amount_bond) {\\n        if (_dbitTotalSupply < 1e5) {\\n            amount_bond = 1 ether;\\n        } else {\\n            uint256 logTotalSupply = SafeMath.ln(_dbitTotalSupply * 1e13);\\n            amount_bond = SafeMath.pow(1.05 * 1 ether, logTotalSupply);\\n        }\\n    }\\n\\n    /**\\n    * @dev convert a given amount of DBIT in USD and trhen this amount of USD in DBIT\\n    * @param _amountToken the amount of token\\n    * @param amountDBIT The amount of DBIT returned\\n    */\\n    function _conversionTokenToDBIT(uint256 _amountToken) internal pure returns(uint256 amountDBIT) {\\n        // This must be done later when the oracle will be implemented\\n        // Convert _amoutToken to USD and calculate how much DBIT we can buy with this amount of USD\\n        // For now we suppose both tokens are tading at 1:1\\n\\n        amountDBIT = _amountToken;\\n    }\\n\\n    /**\\n    * @dev given the amount of tokens, returns the amout of DBIT to mint\\n    * @param _amountToken the amount of token\\n    * @param _dbitTotalSupply the total supply of DBIT\\n    * @param amountDBIT The amount of DBIT to mint\\n    */\\n    function amountOfDBIT(uint256 _amountToken, uint256 _dbitTotalSupply) external pure returns(uint256 amountDBIT) {\\n        require(_amountToken > 0, \\\"Debond: Provide some tokens\\\");\\n\\n        uint256 tokenToDBIT = _conversionTokenToDBIT(_amountToken);\\n        uint256 rate = BondExchangeRate(_dbitTotalSupply);\\n\\n        amountDBIT = tokenToDBIT * rate;\\n    }\\n\\n    function _amountOfDebondToMint(uint256 _dbitIn) internal pure returns (uint256 amountDBIT) {\\n        // todo: mock token contract.\\n        uint256 dbitMaxSupply = 10000;\\n        uint256 dbitTotalSupply = 1000000;\\n\\n        require(_dbitIn > 0, \\\"SigmoidBank/NULL_VALUE\\\");\\n        require(dbitTotalSupply.add(_dbitIn) <= dbitMaxSupply, \\\"insufficient value\\\");\\n        // amount of of DBIT to mint\\n        amountDBIT = _dbitIn * 10;\\n    }\\n\\n    \\n//    function _dbitUSDPrice() internal  returns(uint256) {\\n//        return 100;\\n//    }\\n    \\n    \\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'DebondLibrary: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'DebondLibrary: ZERO_ADDRESS');\\n    }\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) internal pure returns (uint256 amountB) { /// use uint?? int256???\\n        require(amountA > 0, 'DebondLibrary: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'DebondLibrary: INSUFFICIENT_LIQUIDITY');\\n        //amountB = amountA.mul(reserveB) / reserveA;\\n        amountB =  amountA * reserveB / reserveA;\\n\\n    }\\n}\\n\\n\",\"keccak256\":\"0x04ebfe85685a68d79b7a1a0876f6f10a25be28b1b50ddadf43cbca37e49ec997\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\n// DappHub (https://github.com/dapphub/ds-math)\\nlibrary SafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul0(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    function ln(uint256 x) public pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * 1e18) / 1_442695040888963407;\\n        }\\n    }\\n\\n    function pow(uint256 x, uint256 y) public pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? 1e18 : uint256(0);\\n        } else {\\n            result = exp2(mul2(log2(x), y));\\n        }\\n    }\\n\\n    function mul2(uint256 x, uint256 y) public pure returns (uint256 result) {\\n        result = mulDivFixedPoint(x, y);\\n    }\\n\\n    function mulDivFixedPoint(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= 1e18) {\\n            revert();\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        uint256 SCALE = 1e18;\\n        uint256 SCALE_LPOTD = 262144;\\n        uint256 SCALE_INVERSE = 78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / 1e18) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(\\n                            sub(prod1, gt(remainder, prod0)),\\n                            add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1)\\n                        )\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    function exp2(uint256 x) public pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert();\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / 1e18;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = exp2p(x192x64);\\n        }\\n    }\\n\\n    function log2(uint256 x) public pure returns (uint256 result) {\\n        if (x < 1e18) {\\n            revert();\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = mostSignificantBit(x / 1e18);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * 1e18;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == 1e18) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = 5e17; delta > 0; delta >>= 1) {\\n                y = (y * y) / 1e18;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * 1e18) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    function exp2p(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= 1e18;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3202d24172ce737d2593f648857b4a4ba666d5e7f1a82b80203331d46cf2cac5\",\"license\":\"apache 2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806387ee5f411161007157806387ee5f41146100f35780638a38e419146101af578063c207d86c146101d7578063c60e219f146101f8578063c7f79eb41461020b578063d190eaaf1461021357600080fd5b80630f2431b8146100b957806315de4f2f146100f35780631b1c01e9146101365780632ea166281461014b57806343a560cb1461016e5780635cbf717914610181575b600080fd5b6100f16100c7366004610602565b60009283526002602090815260408085209385529290529120805460ff1916911515919091179055565b005b610121610101366004610640565b600091825260026020908152604080842092845291905290205460ff1690565b60405190151581526020015b60405180910390f35b61013e610226565b60405161012d9190610662565b61015e6101593660046106a6565b61027e565b60405161012d94939291906106f7565b6100f161017c3660046107af565b61034d565b61012161018f366004610640565b600260209081526000928352604080842090915290825290205460ff1681565b6101c26101bd3660046106a6565b61044a565b6040805192835260208301919091520161012d565b6101ea6101e5366004610640565b610493565b60405190815260200161012d565b6100f1610206366004610893565b6104c4565b6101ea600081565b61013e6102213660046106a6565b610507565b6060600380548060200260200160405190810160405280929190818152602001828054801561027457602002820191906000526020600020905b815481526020019060010190808311610260575b5050505050905090565b600081815260208190526040812060028101805460609392839283926102a3906108bf565b80601f01602080910402602001604051908101604052809291908181526020018280546102cf906108bf565b801561031c5780601f106102f15761010080835404028352916020019161031c565b820191906000526020600020905b8154815290600101906020018083116102ff57829003601f168201915b505050506004830154600390930154919860ff831698506101009092046001600160a01b0316965091945092505050565b6000858152602081905260409020600181015460ff16156103c85760405162461bcd60e51b815260206004820152602a60248201527f4465626f6e64446174613a2063616e6e6f742061646420616e206578697374696044820152691b99c818db185cdcd25960b21b60648201526084015b60405180910390fd5b8581556001808201805460ff1916909117905584516103f09060028301906020880190610569565b5060038101805485919060ff191660018381811115610411576104116106bf565b02179055506003810180546001600160a01b0390941661010002610100600160a81b031990941693909317909255600490910155505050565b6000818152602081905260408120600181015482919060ff1661047f5760405162461bcd60e51b81526004016103bf906108f9565b806005015492508060060154915050915091565b600160205281600052604060002081815481106104af57600080fd5b90600052602060002001600091509150505481565b6000838152602081905260409020600181015460ff166104f65760405162461bcd60e51b81526004016103bf906108f9565b600581019290925560069091015550565b60008181526001602090815260409182902080548351818402810184019094528084526060939283018282801561055d57602002820191906000526020600020905b815481526020019060010190808311610549575b50505050509050919050565b828054610575906108bf565b90600052602060002090601f01602090048101928261059757600085556105dd565b82601f106105b057805160ff19168380011785556105dd565b828001600101855582156105dd579182015b828111156105dd5782518255916020019190600101906105c2565b506105e99291506105ed565b5090565b5b808211156105e957600081556001016105ee565b60008060006060848603121561061757600080fd5b83359250602084013591506040840135801515811461063557600080fd5b809150509250925092565b6000806040838503121561065357600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561069a5783518352928401929184019160010161067e565b50909695505050505050565b6000602082840312156106b857600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600281106106f357634e487b7160e01b600052602160045260246000fd5b9052565b608081526000855180608084015260005b8181101561072557602081890181015160a0868401015201610708565b8181111561073757600060a083860101525b50601f01601f1916820160a001905061075360208301866106d5565b6001600160a01b039390931660408201526060015292915050565b634e487b7160e01b600052604160045260246000fd5b80356002811061079357600080fd5b919050565b80356001600160a01b038116811461079357600080fd5b600080600080600060a086880312156107c757600080fd5b85359450602086013567ffffffffffffffff808211156107e657600080fd5b818801915088601f8301126107fa57600080fd5b81358181111561080c5761080c61076e565b604051601f8201601f19908116603f011681019083821181831017156108345761083461076e565b816040528281528b602084870101111561084d57600080fd5b82602086016020830137600060208483010152809850505050505061087460408701610784565b925061088260608701610798565b949793965091946080013592915050565b6000806000606084860312156108a857600080fd5b505081359360208301359350604090920135919050565b600181811c908216806108d357607f821691505b6020821081036108f357634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526025908201527f4465626f6e6420446174613a20636c61737320696420676976656e206e6f7420604082015264199bdd5b9960da1b60608201526080019056fea2646970667358221220e070b62c76a88add9f468c16d6f2bbca710b5fc49a3b926b448d97c59cf77b7e64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addClass(uint256,string,uint8,address,uint256)": {
        "notice": "this method should only be called by the governance contract TODO Only Governance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6997,
        "contract": "contracts/Debond-v0/contracts/DebondData.sol:DebondData",
        "label": "classes",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Class)6992_storage)"
      },
      {
        "astId": 7002,
        "contract": "contracts/Debond-v0/contracts/DebondData.sol:DebondData",
        "label": "purchasableClassesCollection",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 7008,
        "contract": "contracts/Debond-v0/contracts/DebondData.sol:DebondData",
        "label": "purchasableClasses",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 7011,
        "contract": "contracts/Debond-v0/contracts/DebondData.sol:DebondData",
        "label": "debondClasses",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(InterestRateType)10000": {
        "encoding": "inplace",
        "label": "enum IData.InterestRateType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Class)6992_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DebondData.Class)",
        "numberOfBytes": "32",
        "value": "t_struct(Class)6992_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Class)6992_storage": {
        "encoding": "inplace",
        "label": "struct DebondData.Class",
        "members": [
          {
            "astId": 6976,
            "contract": "contracts/Debond-v0/contracts/DebondData.sol:DebondData",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6978,
            "contract": "contracts/Debond-v0/contracts/DebondData.sol:DebondData",
            "label": "exists",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 6980,
            "contract": "contracts/Debond-v0/contracts/DebondData.sol:DebondData",
            "label": "symbol",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 6983,
            "contract": "contracts/Debond-v0/contracts/DebondData.sol:DebondData",
            "label": "interestRateType",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(InterestRateType)10000"
          },
          {
            "astId": 6985,
            "contract": "contracts/Debond-v0/contracts/DebondData.sol:DebondData",
            "label": "tokenAddress",
            "offset": 1,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6987,
            "contract": "contracts/Debond-v0/contracts/DebondData.sol:DebondData",
            "label": "periodTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6989,
            "contract": "contracts/Debond-v0/contracts/DebondData.sol:DebondData",
            "label": "lastNonceIdCreated",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6991,
            "contract": "contracts/Debond-v0/contracts/DebondData.sol:DebondData",
            "label": "lastNonceIdCreatedTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}