{
  "address": "0x39FfD23c810B36a72BdE798ca2FEa6D8a8560294",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        }
      ],
      "name": "getPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_price01",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price10",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        }
      ],
      "name": "getRatios",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_ratio01",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ratio10",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_reserve",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "updaReserveAfterAddingLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "updaReserveAfterRemovingLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount1",
          "type": "uint256"
        }
      ],
      "name": "updateRatioAfterAddingLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount1",
          "type": "uint256"
        }
      ],
      "name": "updateRatioAfterRemovingLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf7e6a53aa7b2f446c9966798b2c2868fe5e5fab16d5f090960054a3127bd9458",
  "receipt": {
    "to": null,
    "from": "0xd59276C2A56B19b678c4D22e3eeE148F5a816c37",
    "contractAddress": "0x39FfD23c810B36a72BdE798ca2FEa6D8a8560294",
    "transactionIndex": 20,
    "gasUsed": "445675",
    "logsBloom": "0x
    "blockHash": "0xa75058e7afbd77c635402edb0d76add53e2042e32d122435b0b5997d0af9aeb4",
    "transactionHash": "0xf7e6a53aa7b2f446c9966798b2c2868fe5e5fab16d5f090960054a3127bd9458",
    "logs": [],
    "blockNumber": 10480030,
    "cumulativeGasUsed": "2811023",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ab2cd7119b1b4a506ce49f0080ceb8a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price01\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price10\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"getRatios\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio01\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratio10\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updaReserveAfterAddingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updaReserveAfterRemovingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"}],\"name\":\"updateRatioAfterAddingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"}],\"name\":\"updateRatioAfterRemovingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPrices(address,address)\":{\"details\":\"get prices of a token pair\",\"params\":{\"_price01\":\"price: ratio[_token1] / ratio[_token0]\",\"_price10\":\"price: ratio[_token0] / ratio[_token1]\",\"_token0\":\"address of the first token\",\"_token1\":\"address of the second token\"}},\"getRatios(address,address)\":{\"details\":\"get ratios of a token pair\",\"params\":{\"_ratio01\":\"ratio of token0: The amount of tokens _token0 in the pool (token0, token1)\",\"_ratio10\":\"ratio of token1: The amount of tokens _token1 in the pool (token0, token1)\",\"_token0\":\"address of the first token\",\"_token1\":\"address of the second token\"}},\"getReserve(address)\":{\"details\":\"get revserve of a token pair\",\"params\":{\"_reserve\":\"the total liquidity of _token in the APM\",\"_token\":\"address of the first token\"}},\"updaReserveAfterAddingLiquidity(address,uint256)\":{\"details\":\"update revserve of tokens after adding liquidity\",\"params\":{\"_amount\":\"amount of the tokens to add\",\"_token\":\"address of the token\"}},\"updaReserveAfterRemovingLiquidity(address,uint256)\":{\"details\":\"update revserve of tokens after removing liquidity\",\"params\":{\"_amount\":\"amount of the tokens to add\",\"_token\":\"address of the token\"}},\"updateRatioAfterAddingLiquidity(address,address,uint256,uint256)\":{\"details\":\"update rations of a token pair\",\"params\":{\"_amount0\":\"amount of first tokens to add\",\"_amount1\":\"amount of second tokens to add\",\"_token0\":\"address of the first token\",\"_token1\":\"address of the second token\"}},\"updateRatioAfterRemovingLiquidity(address,address,uint256,uint256)\":{\"details\":\"update rations of a token pair after removing liquidity\",\"params\":{\"_amount0\":\"amount of first tokens to add\",\"_amount1\":\"amount of second tokens to add\",\"_token0\":\"address of the first token\",\"_token1\":\"address of the second token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Debond-v0/contracts/APM.sol\":\"APM\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Debond-v0/contracts/APM.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\n//import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IAPM.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\n\\n\\ncontract APM is IAPM {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) internal reserve;\\n    mapping(address => mapping(address => uint256)) internal ratio;\\n    mapping(address => mapping(address => uint256)) internal price;\\n\\n    /**\\n    * @dev update revserve of tokens after adding liquidity\\n    * @param _token address of the token\\n    * @param _amount amount of the tokens to add\\n    */\\n    function updaReserveAfterAddingLiquidity(address _token, uint256 _amount) external {\\n        require(_token != address(0), \\\"Not valid token address\\\");\\n        require(_amount > 0, \\\"Debond: No liquidity sent\\\");\\n\\n        uint256 _reserve = reserve[_token];\\n\\t\\treserve[_token] = _reserve + _amount;\\n\\t}\\n\\n    /**\\n    * @dev update revserve of tokens after removing liquidity\\n    * @param _token address of the token\\n    * @param _amount amount of the tokens to add\\n    */\\n    function updaReserveAfterRemovingLiquidity(address _token, uint256 _amount) external {\\n        require(_token != address(0), \\\"Notr valid token address\\\");\\n        require(_amount > 0, \\\"Debond: No liquidity sent\\\");\\n\\n        uint256 _reserve0 = reserve[_token];\\n\\t\\treserve[_token] = _reserve0 - _amount;\\n\\t}\\n\\n    /**\\n    * @dev update rations of a token pair\\n    * @param _token0 address of the first token\\n    * @param _token1 address of the second token\\n    * @param _amount0 amount of first tokens to add\\n    * @param _amount1 amount of second tokens to add\\n    */\\n    function updateRatioAfterAddingLiquidity(address _token0, address _token1, uint256 _amount0, uint256 _amount1) external {\\n        require(_token0 != address(0) && _token1 != address(0), \\\"Notr valid token address\\\");\\n        require(_amount0 > 0 && _amount1 > 0, \\\"Debond: No liquidity sent\\\");\\n\\n        (uint256 _ratio0, uint256 _ratio1) = (ratio[_token0][_token1], ratio[_token1][_token0]);\\n\\n\\t\\t(ratio[_token0][_token1], ratio[_token1][_token0]) = (_ratio0 + _amount0 , _ratio1 + _amount1);\\n\\t}\\n\\n    /**\\n    * @dev update rations of a token pair after removing liquidity\\n    * @param _token0 address of the first token\\n    * @param _token1 address of the second token\\n    * @param _amount0 amount of first tokens to add\\n    * @param _amount1 amount of second tokens to add\\n    */\\n    function updateRatioAfterRemovingLiquidity(address _token0, address _token1, uint256 _amount0, uint256 _amount1) external {\\n        require(_token0 != address(0) && _token1 != address(0), \\\"Notr valid token address\\\");\\n        require(_amount0 > 0 && _amount1 > 0, \\\"Debond: No liquidity sent\\\");\\n\\n        (uint256 _ratio0, uint256 _ratio1) = (ratio[_token0][_token1], ratio[_token1][_token0]);\\n\\n\\t\\t(ratio[_token0][_token1], ratio[_token1][_token0]) = (_ratio0 - _amount0 , _ratio1 - _amount1);\\n\\t}\\n\\n    /**\\n    * @dev get revserve of a token pair\\n    * @param _token address of the first token\\n    * @param _reserve the total liquidity of _token in the APM\\n    */\\n    function getReserve(address _token) external view returns(uint256 _reserve) {\\n        _reserve = reserve[_token];\\n    }\\n\\n    /**\\n    * @dev get ratios of a token pair\\n    * @param _token0 address of the first token\\n    * @param _token1 address of the second token\\n    * @param _ratio01 ratio of token0: The amount of tokens _token0 in the pool (token0, token1)\\n    * @param _ratio10 ratio of token1: The amount of tokens _token1 in the pool (token0, token1)\\n    */\\n    function getRatios(address _token0, address _token1) external view returns(uint256 _ratio01, uint256 _ratio10) {\\n\\t\\treturn (ratio[_token0][_token1], ratio[_token1][_token0]);\\n\\t}\\n\\n     /**\\n    * @dev get prices of a token pair\\n    * @param _token0 address of the first token\\n    * @param _token1 address of the second token\\n    * @param _price01 price: ratio[_token1] / ratio[_token0]\\n    * @param _price10 price: ratio[_token0] / ratio[_token1]\\n    */\\n    function getPrices(address _token0, address _token1) external view returns(uint256 _price01, uint256 _price10) {\\n\\t\\treturn (\\n            (ratio[_token1][_token0] / ratio[_token0][_token1]) * 1 ether,\\n            (ratio[_token0][_token1] / ratio[_token1][_token0]) * 1 ether\\n        );\\n\\t} \\n}\\n\\n\",\"keccak256\":\"0xb2091395b41c98de6d2632534bf3037c1b0d763434c823b319e089f5a2e83c43\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/interfaces/IAPM.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\ninterface IAPM {\\n\\n    function updaReserveAfterAddingLiquidity(\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function updaReserveAfterRemovingLiquidity(\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function updateRatioAfterAddingLiquidity(\\n        address _token0,\\n        address _token1,\\n        uint256 _amount0,\\n        uint256 _amount1\\n    ) external;\\n\\n    function updateRatioAfterRemovingLiquidity(\\n        address _token0,\\n        address _token1,\\n        uint256 _amount0,\\n        uint256 _amount1\\n    ) external;\\n\\n    function getReserve(\\n        address _token\\n    ) external view returns(uint256 _reserve);\\n\\n    function getRatios(\\n        address _token0,\\n        address _token1\\n    ) external view returns(uint256 _ratio01, uint256 _ratio10);\\n\\n    function getPrices(\\n        address _token0,\\n        address _token1\\n    ) external view returns(uint256 _price01, uint256 _price10);\\n}\\n\",\"keccak256\":\"0x7a12549c9e9b393b098a3cff0e3d57b785e84761503c3264fe174f143a51b93c\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\n// DappHub (https://github.com/dapphub/ds-math)\\nlibrary SafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n    \\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul0(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    function ln(uint256 x) public pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * 1e18) / 1_442695040888963407;\\n        }\\n    }\\n\\n    function pow(uint256 x, uint256 y) public pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? 1e18 : uint256(0);\\n        } else {\\n            result = exp2(mul2(log2(x), y));\\n        }\\n    }\\n\\n    function mul2(uint256 x, uint256 y) public pure returns (uint256 result) {\\n        result = mulDivFixedPoint(x, y);\\n    }\\n\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= 1e18) {\\n            revert();\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        uint SCALE = 1e18;\\n        uint256 SCALE_LPOTD = 262144;\\n        uint256 SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / 1e18) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    function exp2(uint256 x) public pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert();\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / 1e18;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = exp2p(x192x64);\\n        }\\n    }\\n\\n    function log2(uint256 x) public pure returns (uint256 result) {\\n\\n        if (x < 1e18) {\\n            revert();\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = mostSignificantBit(x / 1e18);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * 1e18;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == 1e18) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = 5e17; delta > 0; delta >>= 1) {\\n                y = (y * y) / 1e18;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * 1e18) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    function exp2p(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= 1e18;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xafebdb82239076cc608c50b81bdcde2a929435ad77fd8149e06ba1b920645b27\",\"license\":\"apache 2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061071b806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806388260d0c1161005b57806388260d0c146100d75780639492c2ca146100ea57806399483ecb14610136578063c9a396e91461014957600080fd5b80633890638b146100825780633cf7210d146100975780634552147f146100c4575b600080fd5b610095610090366004610530565b610180565b005b6100aa6100a5366004610572565b610284565b604080519283526020830191909152015b60405180910390f35b6100956100d23660046105a5565b61033b565b6100956100e53660046105a5565b6103c5565b6100aa6100f8366004610572565b6001600160a01b0391821660008181526001602081815260408084209590961683529384528482205490845284822092825291909252919020549091565b610095610144366004610530565b61045e565b6101726101573660046105cf565b6001600160a01b031660009081526020819052604090205490565b6040519081526020016100bb565b6001600160a01b038416158015906101a057506001600160a01b03831615155b6101c55760405162461bcd60e51b81526004016101bc906105f1565b60405180910390fd5b6000821180156101d55750600081115b6101f15760405162461bcd60e51b81526004016101bc90610628565b6001600160a01b0380851660008181526001602081815260408084209589168452948152848320549181528483209383529290925291909120546102358483610675565b61023f8483610675565b6001600160a01b0397881660008181526001602081815260408084209b909c168352998a528a8220908a528a8220928252919098529790962095909555505050915550565b6001600160a01b038083166000818152600160208181526040808420958716845294815284832054918152848320938352929092529182205482916102c89161068c565b6102da90670de0b6b3a76400006106ae565b6001600160a01b038085166000818152600160208181526040808420958b1684529481528483205491815284832093835292909252919091205461031e919061068c565b61033090670de0b6b3a76400006106ae565b915091509250929050565b6001600160a01b0382166103615760405162461bcd60e51b81526004016101bc906105f1565b600081116103815760405162461bcd60e51b81526004016101bc90610628565b6001600160a01b0382166000908152602081905260409020546103a48282610675565b6001600160a01b039093166000908152602081905260409020929092555050565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152601760248201527f4e6f742076616c696420746f6b656e206164647265737300000000000000000060448201526064016101bc565b6000811161043b5760405162461bcd60e51b81526004016101bc90610628565b6001600160a01b0382166000908152602081905260409020546103a482826106cd565b6001600160a01b0384161580159061047e57506001600160a01b03831615155b61049a5760405162461bcd60e51b81526004016101bc906105f1565b6000821180156104aa5750600081115b6104c65760405162461bcd60e51b81526004016101bc90610628565b6001600160a01b03808516600081815260016020818152604080842095891684529481528483205491815284832093835292909252919091205461050a84836106cd565b61023f84836106cd565b80356001600160a01b038116811461052b57600080fd5b919050565b6000806000806080858703121561054657600080fd5b61054f85610514565b935061055d60208601610514565b93969395505050506040820135916060013590565b6000806040838503121561058557600080fd5b61058e83610514565b915061059c60208401610514565b90509250929050565b600080604083850312156105b857600080fd5b6105c183610514565b946020939093013593505050565b6000602082840312156105e157600080fd5b6105ea82610514565b9392505050565b60208082526018908201527f4e6f74722076616c696420746f6b656e20616464726573730000000000000000604082015260600190565b60208082526019908201527f4465626f6e643a204e6f206c69717569646974792073656e7400000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156106875761068761065f565b500390565b6000826106a957634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156106c8576106c861065f565b500290565b600082198211156106e0576106e061065f565b50019056fea2646970667358221220c42d8e1195b46ce362731fa4cede035612791df4b7629a9a514f1156a6f53c6064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806388260d0c1161005b57806388260d0c146100d75780639492c2ca146100ea57806399483ecb14610136578063c9a396e91461014957600080fd5b80633890638b146100825780633cf7210d146100975780634552147f146100c4575b600080fd5b610095610090366004610530565b610180565b005b6100aa6100a5366004610572565b610284565b604080519283526020830191909152015b60405180910390f35b6100956100d23660046105a5565b61033b565b6100956100e53660046105a5565b6103c5565b6100aa6100f8366004610572565b6001600160a01b0391821660008181526001602081815260408084209590961683529384528482205490845284822092825291909252919020549091565b610095610144366004610530565b61045e565b6101726101573660046105cf565b6001600160a01b031660009081526020819052604090205490565b6040519081526020016100bb565b6001600160a01b038416158015906101a057506001600160a01b03831615155b6101c55760405162461bcd60e51b81526004016101bc906105f1565b60405180910390fd5b6000821180156101d55750600081115b6101f15760405162461bcd60e51b81526004016101bc90610628565b6001600160a01b0380851660008181526001602081815260408084209589168452948152848320549181528483209383529290925291909120546102358483610675565b61023f8483610675565b6001600160a01b0397881660008181526001602081815260408084209b909c168352998a528a8220908a528a8220928252919098529790962095909555505050915550565b6001600160a01b038083166000818152600160208181526040808420958716845294815284832054918152848320938352929092529182205482916102c89161068c565b6102da90670de0b6b3a76400006106ae565b6001600160a01b038085166000818152600160208181526040808420958b1684529481528483205491815284832093835292909252919091205461031e919061068c565b61033090670de0b6b3a76400006106ae565b915091509250929050565b6001600160a01b0382166103615760405162461bcd60e51b81526004016101bc906105f1565b600081116103815760405162461bcd60e51b81526004016101bc90610628565b6001600160a01b0382166000908152602081905260409020546103a48282610675565b6001600160a01b039093166000908152602081905260409020929092555050565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152601760248201527f4e6f742076616c696420746f6b656e206164647265737300000000000000000060448201526064016101bc565b6000811161043b5760405162461bcd60e51b81526004016101bc90610628565b6001600160a01b0382166000908152602081905260409020546103a482826106cd565b6001600160a01b0384161580159061047e57506001600160a01b03831615155b61049a5760405162461bcd60e51b81526004016101bc906105f1565b6000821180156104aa5750600081115b6104c65760405162461bcd60e51b81526004016101bc90610628565b6001600160a01b03808516600081815260016020818152604080842095891684529481528483205491815284832093835292909252919091205461050a84836106cd565b61023f84836106cd565b80356001600160a01b038116811461052b57600080fd5b919050565b6000806000806080858703121561054657600080fd5b61054f85610514565b935061055d60208601610514565b93969395505050506040820135916060013590565b6000806040838503121561058557600080fd5b61058e83610514565b915061059c60208401610514565b90509250929050565b600080604083850312156105b857600080fd5b6105c183610514565b946020939093013593505050565b6000602082840312156105e157600080fd5b6105ea82610514565b9392505050565b60208082526018908201527f4e6f74722076616c696420746f6b656e20616464726573730000000000000000604082015260600190565b60208082526019908201527f4465626f6e643a204e6f206c69717569646974792073656e7400000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156106875761068761065f565b500390565b6000826106a957634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156106c8576106c861065f565b500290565b600082198211156106e0576106e061065f565b50019056fea2646970667358221220c42d8e1195b46ce362731fa4cede035612791df4b7629a9a514f1156a6f53c6064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPrices(address,address)": {
        "details": "get prices of a token pair",
        "params": {
          "_price01": "price: ratio[_token1] / ratio[_token0]",
          "_price10": "price: ratio[_token0] / ratio[_token1]",
          "_token0": "address of the first token",
          "_token1": "address of the second token"
        }
      },
      "getRatios(address,address)": {
        "details": "get ratios of a token pair",
        "params": {
          "_ratio01": "ratio of token0: The amount of tokens _token0 in the pool (token0, token1)",
          "_ratio10": "ratio of token1: The amount of tokens _token1 in the pool (token0, token1)",
          "_token0": "address of the first token",
          "_token1": "address of the second token"
        }
      },
      "getReserve(address)": {
        "details": "get revserve of a token pair",
        "params": {
          "_reserve": "the total liquidity of _token in the APM",
          "_token": "address of the first token"
        }
      },
      "updaReserveAfterAddingLiquidity(address,uint256)": {
        "details": "update revserve of tokens after adding liquidity",
        "params": {
          "_amount": "amount of the tokens to add",
          "_token": "address of the token"
        }
      },
      "updaReserveAfterRemovingLiquidity(address,uint256)": {
        "details": "update revserve of tokens after removing liquidity",
        "params": {
          "_amount": "amount of the tokens to add",
          "_token": "address of the token"
        }
      },
      "updateRatioAfterAddingLiquidity(address,address,uint256,uint256)": {
        "details": "update rations of a token pair",
        "params": {
          "_amount0": "amount of first tokens to add",
          "_amount1": "amount of second tokens to add",
          "_token0": "address of the first token",
          "_token1": "address of the second token"
        }
      },
      "updateRatioAfterRemovingLiquidity(address,address,uint256,uint256)": {
        "details": "update rations of a token pair after removing liquidity",
        "params": {
          "_amount0": "amount of first tokens to add",
          "_amount1": "amount of second tokens to add",
          "_token0": "address of the first token",
          "_token1": "address of the second token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1970,
        "contract": "contracts/Debond-v0/contracts/APM.sol:APM",
        "label": "reserve",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1976,
        "contract": "contracts/Debond-v0/contracts/APM.sol:APM",
        "label": "ratio",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1982,
        "contract": "contracts/Debond-v0/contracts/APM.sol:APM",
        "label": "price",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}