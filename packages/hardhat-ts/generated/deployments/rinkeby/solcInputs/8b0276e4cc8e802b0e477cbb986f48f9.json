{
  "language": "Solidity",
  "sources": {
    "contracts/Debond-v0/contracts/APM.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n//import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IAPM.sol\";\nimport \"./libraries/SafeMath.sol\";\n\n\ncontract APM is IAPM {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) internal reserve;\n    mapping(address => mapping(address => uint256)) internal ratio;\n    mapping(address => mapping(address => uint256)) internal price;\n\n    /**\n    * @dev update revserve of tokens after adding liquidity\n    * @param _token address of the token\n    * @param _amount amount of the tokens to add\n    */\n    function updaReserveAfterAddingLiquidity(address _token, uint256 _amount) external {\n        require(_token != address(0), \"Not valid token address\");\n        require(_amount > 0, \"Debond: No liquidity sent\");\n\n        uint256 _reserve = reserve[_token];\n\t\treserve[_token] = _reserve + _amount;\n\t}\n\n    /**\n    * @dev update revserve of tokens after removing liquidity\n    * @param _token address of the token\n    * @param _amount amount of the tokens to add\n    */\n    function updaReserveAfterRemovingLiquidity(address _token, uint256 _amount) external {\n        require(_token != address(0), \"Notr valid token address\");\n        require(_amount > 0, \"Debond: No liquidity sent\");\n\n        uint256 _reserve0 = reserve[_token];\n\t\treserve[_token] = _reserve0 - _amount;\n\t}\n\n    /**\n    * @dev update rations of a token pair\n    * @param _token0 address of the first token\n    * @param _token1 address of the second token\n    * @param _amount0 amount of first tokens to add\n    * @param _amount1 amount of second tokens to add\n    */\n    function updateRatioAfterAddingLiquidity(address _token0, address _token1, uint256 _amount0, uint256 _amount1) external {\n        require(_token0 != address(0) && _token1 != address(0), \"Notr valid token address\");\n        require(_amount0 > 0 && _amount1 > 0, \"Debond: No liquidity sent\");\n\n        (uint256 _ratio0, uint256 _ratio1) = (ratio[_token0][_token1], ratio[_token1][_token0]);\n\n\t\t(ratio[_token0][_token1], ratio[_token1][_token0]) = (_ratio0 + _amount0 , _ratio1 + _amount1);\n\t}\n\n    /**\n    * @dev update rations of a token pair after removing liquidity\n    * @param _token0 address of the first token\n    * @param _token1 address of the second token\n    * @param _amount0 amount of first tokens to add\n    * @param _amount1 amount of second tokens to add\n    */\n    function updateRatioAfterRemovingLiquidity(address _token0, address _token1, uint256 _amount0, uint256 _amount1) external {\n        require(_token0 != address(0) && _token1 != address(0), \"Notr valid token address\");\n        require(_amount0 > 0 && _amount1 > 0, \"Debond: No liquidity sent\");\n\n        (uint256 _ratio0, uint256 _ratio1) = (ratio[_token0][_token1], ratio[_token1][_token0]);\n\n\t\t(ratio[_token0][_token1], ratio[_token1][_token0]) = (_ratio0 - _amount0 , _ratio1 - _amount1);\n\t}\n\n    /**\n    * @dev get revserve of a token pair\n    * @param _token address of the first token\n    * @param _reserve the total liquidity of _token in the APM\n    */\n    function getReserve(address _token) external view returns(uint256 _reserve) {\n        _reserve = reserve[_token];\n    }\n\n    /**\n    * @dev get ratios of a token pair\n    * @param _token0 address of the first token\n    * @param _token1 address of the second token\n    * @param _ratio01 ratio of token0: The amount of tokens _token0 in the pool (token0, token1)\n    * @param _ratio10 ratio of token1: The amount of tokens _token1 in the pool (token0, token1)\n    */\n    function getRatios(address _token0, address _token1) external view returns(uint256 _ratio01, uint256 _ratio10) {\n\t\treturn (ratio[_token0][_token1], ratio[_token1][_token0]);\n\t}\n\n     /**\n    * @dev get prices of a token pair\n    * @param _token0 address of the first token\n    * @param _token1 address of the second token\n    * @param _price01 price: ratio[_token1] / ratio[_token0]\n    * @param _price10 price: ratio[_token0] / ratio[_token1]\n    */\n    function getPrices(address _token0, address _token1) external view returns(uint256 _price01, uint256 _price10) {\n\t\treturn (\n            (ratio[_token1][_token0] / ratio[_token0][_token1]) * 1 ether,\n            (ratio[_token0][_token1] / ratio[_token1][_token0]) * 1 ether\n        );\n\t} \n}\n\n"
    },
    "contracts/Debond-v0/contracts/interfaces/IAPM.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\ninterface IAPM {\n\n    function updaReserveAfterAddingLiquidity(\n        address _token,\n        uint256 _amount\n    ) external;\n\n    function updaReserveAfterRemovingLiquidity(\n        address _token,\n        uint256 _amount\n    ) external;\n\n    function updateRatioAfterAddingLiquidity(\n        address _token0,\n        address _token1,\n        uint256 _amount0,\n        uint256 _amount1\n    ) external;\n\n    function updateRatioAfterRemovingLiquidity(\n        address _token0,\n        address _token1,\n        uint256 _amount0,\n        uint256 _amount1\n    ) external;\n\n    function getReserve(\n        address _token\n    ) external view returns(uint256 _reserve);\n\n    function getRatios(\n        address _token0,\n        address _token1\n    ) external view returns(uint256 _ratio01, uint256 _ratio10);\n\n    function getPrices(\n        address _token0,\n        address _token1\n    ) external view returns(uint256 _price01, uint256 _price10);\n}\n"
    },
    "contracts/Debond-v0/contracts/libraries/SafeMath.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n// DappHub (https://github.com/dapphub/ds-math)\nlibrary SafeMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n    \n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul0(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n        return x <= y ? x : y;\n    }\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    function ln(uint256 x) public pure returns (uint256 result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 196205294292027477728.\n        unchecked {\n            result = (log2(x) * 1e18) / 1_442695040888963407;\n        }\n    }\n\n    function pow(uint256 x, uint256 y) public pure returns (uint256 result) {\n        if (x == 0) {\n            result = y == 0 ? 1e18 : uint256(0);\n        } else {\n            result = exp2(mul2(log2(x), y));\n        }\n    }\n\n    function mul2(uint256 x, uint256 y) public pure returns (uint256 result) {\n        result = mulDivFixedPoint(x, y);\n    }\n\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        uint256 prod0;\n        uint256 prod1;\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        if (prod1 >= 1e18) {\n            revert();\n        }\n\n        uint256 remainder;\n        uint256 roundUpUnit;\n        uint SCALE = 1e18;\n        uint256 SCALE_LPOTD = 262144;\n        uint256 SCALE_INVERSE =\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\n\n        assembly {\n            remainder := mulmod(x, y, SCALE)\n            roundUpUnit := gt(remainder, 499999999999999999)\n        }\n\n        if (prod1 == 0) {\n            unchecked {\n                result = (prod0 / 1e18) + roundUpUnit;\n                return result;\n            }\n        }\n\n        assembly {\n            result := add(\n                mul(\n                    or(\n                        div(sub(prod0, remainder), SCALE_LPOTD),\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\n                    ),\n                    SCALE_INVERSE\n                ),\n                roundUpUnit\n            )\n        }\n    }\n\n    function exp2(uint256 x) public pure returns (uint256 result) {\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n        if (x >= 192e18) {\n            revert();\n        }\n\n        unchecked {\n            // Convert x to the 192.64-bit fixed-point format.\n            uint256 x192x64 = (x << 64) / 1e18;\n\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\n            result = exp2p(x192x64);\n        }\n    }\n\n    function log2(uint256 x) public pure returns (uint256 result) {\n\n        if (x < 1e18) {\n            revert();\n        }\n        unchecked {\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = mostSignificantBit(x / 1e18);\n\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255 and SCALE is 1e18.\n            result = n * 1e18;\n\n            // This is y = x * 2^(-n).\n            uint256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == 1e18) {\n                return result;\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (uint256 delta = 5e17; delta > 0; delta >>= 1) {\n                y = (y * y) / 1e18;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * 1e18) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    result += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n        }\n    }\n\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        if (x >= 2**128) {\n            x >>= 128;\n            msb += 128;\n        }\n        if (x >= 2**64) {\n            x >>= 64;\n            msb += 64;\n        }\n        if (x >= 2**32) {\n            x >>= 32;\n            msb += 32;\n        }\n        if (x >= 2**16) {\n            x >>= 16;\n            msb += 16;\n        }\n        if (x >= 2**8) {\n            x >>= 8;\n            msb += 8;\n        }\n        if (x >= 2**4) {\n            x >>= 4;\n            msb += 4;\n        }\n        if (x >= 2**2) {\n            x >>= 2;\n            msb += 2;\n        }\n        if (x >= 2**1) {\n            // No need to shift x any more.\n            msb += 1;\n        }\n    }\n\n    function exp2p(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // Start from 0.5 in the 192.64-bit fixed-point format.\n            result = 0x800000000000000000000000000000000000000000000000;\n\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\n            if (x & 0x8000000000000000 > 0) {\n                result = (result * 0x16A09E667F3BCC909) >> 64;\n            }\n            if (x & 0x4000000000000000 > 0) {\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\n            }\n            if (x & 0x2000000000000000 > 0) {\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\n            }\n            if (x & 0x1000000000000000 > 0) {\n                result = (result * 0x10B5586CF9890F62A) >> 64;\n            }\n            if (x & 0x800000000000000 > 0) {\n                result = (result * 0x1059B0D31585743AE) >> 64;\n            }\n            if (x & 0x400000000000000 > 0) {\n                result = (result * 0x102C9A3E778060EE7) >> 64;\n            }\n            if (x & 0x200000000000000 > 0) {\n                result = (result * 0x10163DA9FB33356D8) >> 64;\n            }\n            if (x & 0x100000000000000 > 0) {\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\n            }\n            if (x & 0x80000000000000 > 0) {\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\n            }\n            if (x & 0x40000000000000 > 0) {\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\n            }\n            if (x & 0x20000000000000 > 0) {\n                result = (result * 0x100162F3904051FA1) >> 64;\n            }\n            if (x & 0x10000000000000 > 0) {\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\n            }\n            if (x & 0x8000000000000 > 0) {\n                result = (result * 0x100058BA01FB9F96D) >> 64;\n            }\n            if (x & 0x4000000000000 > 0) {\n                result = (result * 0x10002C5CC37DA9492) >> 64;\n            }\n            if (x & 0x2000000000000 > 0) {\n                result = (result * 0x1000162E525EE0547) >> 64;\n            }\n            if (x & 0x1000000000000 > 0) {\n                result = (result * 0x10000B17255775C04) >> 64;\n            }\n            if (x & 0x800000000000 > 0) {\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\n            }\n            if (x & 0x400000000000 > 0) {\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\n            }\n            if (x & 0x200000000000 > 0) {\n                result = (result * 0x10000162E43F4F831) >> 64;\n            }\n            if (x & 0x100000000000 > 0) {\n                result = (result * 0x100000B1721BCFC9A) >> 64;\n            }\n            if (x & 0x80000000000 > 0) {\n                result = (result * 0x10000058B90CF1E6E) >> 64;\n            }\n            if (x & 0x40000000000 > 0) {\n                result = (result * 0x1000002C5C863B73F) >> 64;\n            }\n            if (x & 0x20000000000 > 0) {\n                result = (result * 0x100000162E430E5A2) >> 64;\n            }\n            if (x & 0x10000000000 > 0) {\n                result = (result * 0x1000000B172183551) >> 64;\n            }\n            if (x & 0x8000000000 > 0) {\n                result = (result * 0x100000058B90C0B49) >> 64;\n            }\n            if (x & 0x4000000000 > 0) {\n                result = (result * 0x10000002C5C8601CC) >> 64;\n            }\n            if (x & 0x2000000000 > 0) {\n                result = (result * 0x1000000162E42FFF0) >> 64;\n            }\n            if (x & 0x1000000000 > 0) {\n                result = (result * 0x10000000B17217FBB) >> 64;\n            }\n            if (x & 0x800000000 > 0) {\n                result = (result * 0x1000000058B90BFCE) >> 64;\n            }\n            if (x & 0x400000000 > 0) {\n                result = (result * 0x100000002C5C85FE3) >> 64;\n            }\n            if (x & 0x200000000 > 0) {\n                result = (result * 0x10000000162E42FF1) >> 64;\n            }\n            if (x & 0x100000000 > 0) {\n                result = (result * 0x100000000B17217F8) >> 64;\n            }\n            if (x & 0x80000000 > 0) {\n                result = (result * 0x10000000058B90BFC) >> 64;\n            }\n            if (x & 0x40000000 > 0) {\n                result = (result * 0x1000000002C5C85FE) >> 64;\n            }\n            if (x & 0x20000000 > 0) {\n                result = (result * 0x100000000162E42FF) >> 64;\n            }\n            if (x & 0x10000000 > 0) {\n                result = (result * 0x1000000000B17217F) >> 64;\n            }\n            if (x & 0x8000000 > 0) {\n                result = (result * 0x100000000058B90C0) >> 64;\n            }\n            if (x & 0x4000000 > 0) {\n                result = (result * 0x10000000002C5C860) >> 64;\n            }\n            if (x & 0x2000000 > 0) {\n                result = (result * 0x1000000000162E430) >> 64;\n            }\n            if (x & 0x1000000 > 0) {\n                result = (result * 0x10000000000B17218) >> 64;\n            }\n            if (x & 0x800000 > 0) {\n                result = (result * 0x1000000000058B90C) >> 64;\n            }\n            if (x & 0x400000 > 0) {\n                result = (result * 0x100000000002C5C86) >> 64;\n            }\n            if (x & 0x200000 > 0) {\n                result = (result * 0x10000000000162E43) >> 64;\n            }\n            if (x & 0x100000 > 0) {\n                result = (result * 0x100000000000B1721) >> 64;\n            }\n            if (x & 0x80000 > 0) {\n                result = (result * 0x10000000000058B91) >> 64;\n            }\n            if (x & 0x40000 > 0) {\n                result = (result * 0x1000000000002C5C8) >> 64;\n            }\n            if (x & 0x20000 > 0) {\n                result = (result * 0x100000000000162E4) >> 64;\n            }\n            if (x & 0x10000 > 0) {\n                result = (result * 0x1000000000000B172) >> 64;\n            }\n            if (x & 0x8000 > 0) {\n                result = (result * 0x100000000000058B9) >> 64;\n            }\n            if (x & 0x4000 > 0) {\n                result = (result * 0x10000000000002C5D) >> 64;\n            }\n            if (x & 0x2000 > 0) {\n                result = (result * 0x1000000000000162E) >> 64;\n            }\n            if (x & 0x1000 > 0) {\n                result = (result * 0x10000000000000B17) >> 64;\n            }\n            if (x & 0x800 > 0) {\n                result = (result * 0x1000000000000058C) >> 64;\n            }\n            if (x & 0x400 > 0) {\n                result = (result * 0x100000000000002C6) >> 64;\n            }\n            if (x & 0x200 > 0) {\n                result = (result * 0x10000000000000163) >> 64;\n            }\n            if (x & 0x100 > 0) {\n                result = (result * 0x100000000000000B1) >> 64;\n            }\n            if (x & 0x80 > 0) {\n                result = (result * 0x10000000000000059) >> 64;\n            }\n            if (x & 0x40 > 0) {\n                result = (result * 0x1000000000000002C) >> 64;\n            }\n            if (x & 0x20 > 0) {\n                result = (result * 0x10000000000000016) >> 64;\n            }\n            if (x & 0x10 > 0) {\n                result = (result * 0x1000000000000000B) >> 64;\n            }\n            if (x & 0x8 > 0) {\n                result = (result * 0x10000000000000006) >> 64;\n            }\n            if (x & 0x4 > 0) {\n                result = (result * 0x10000000000000003) >> 64;\n            }\n            if (x & 0x2 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n            if (x & 0x1 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n\n            // We're doing two things at the same time:\n            //\n            //   1. Multiply the result by 2^n + 1, where \"2^n\" is the integer part and the one is added to account for\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\n            //      rather than 192.\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\n            //\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \"ip\" is the integer part \"2^n\".\n            result *= 1e18;\n            result >>= (191 - (x >> 64));\n        }\n    }\n}\n"
    },
    "contracts/Debond-v0/contracts/Bank.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n\n\nimport './APM.sol';\nimport './DebondData.sol';\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IAPM.sol\";\nimport \"./interfaces/IData.sol\";\nimport \"./interfaces/IDebondBond.sol\";\nimport \"./interfaces/IDebondToken.sol\";\nimport \"./libraries/CDP.sol\";\n\n\ncontract Bank {\n\n    using CDP for uint256;\n    using SafeERC20 for IERC20;\n\n    IAPM apm;\n    IData debondData;\n    IDebondBond bond;\n    enum PurchaseMethod {Buying, Staking}\n    uint public constant BASE_TIMESTAMP = 1646089200; // 2022-03-01 00:00\n    uint public constant DIFF_TIME_NEW_NONCE = 24 * 3600; // every 24h we crate a new nonce.\n    uint public constant RATE = 5; // every 24h we crate a new nonce.\n\n    constructor(address apmAddress, address dataAddress, address bondAddress) {\n        apm = IAPM(apmAddress);\n        debondData = IData(dataAddress);\n        bond = IDebondBond(bondAddress);\n    }\n\n    modifier ensure(uint deadline) {\n        require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');\n        _;\n    }\n\n    // **** BUY BONDS ****\n\n    function buyBond(\n        uint _purchaseTokenClassId, // token added\n        uint _debondTokenClassId, // token to mint\n        uint _purchaseTokenAmount,\n        uint _debondTokenMinAmount,\n        PurchaseMethod purchaseMethod\n    ) external {\n\n        uint purchaseTokenClassId = _purchaseTokenClassId;\n        uint debondTokenClassId = _debondTokenClassId;\n        uint purchaseTokenAmount = _purchaseTokenAmount;\n        uint debondTokenMinAmount = _debondTokenMinAmount;\n        (,,address purchaseTokenAddress,) = debondData.getClassFromId(purchaseTokenClassId);\n        (,,address debondTokenAddress,) = debondData.getClassFromId(debondTokenClassId);\n\n\n        require(debondData.isPairAllowed(purchaseTokenAddress, debondTokenAddress), \"Pair not Allowed\");\n\n        uint amountBToMint = calculateDebondTokenToMint(\n//            purchaseTokenAddress,\n//            debondTokenAddress,\n            purchaseTokenAmount\n        );\n\n//        require(debondTokenMinAmount <= amountBToMint, \"Not enough debond token in minting calculation\");\n\n\n        IERC20(purchaseTokenAddress).transferFrom(msg.sender, address(apm), purchaseTokenAmount);\n        //see uniswap : transferhelper,ierc202\n        IDebondToken(debondTokenAddress).mint(address(apm), amountBToMint);\n        // be aware that tokenB is a DebondToken, maybe add it to the class model\n\n\n        if (purchaseMethod == PurchaseMethod.Staking) {\n            issueBonds(msg.sender, purchaseTokenClassId, purchaseTokenAmount);\n            (uint reserveA, uint reserveB) = (apm.getReserve(purchaseTokenAddress), apm.getReserve(debondTokenAddress));\n            uint amount = CDP.quote(purchaseTokenAmount, reserveA, reserveB);\n            issueBonds(msg.sender, debondTokenClassId, amount * RATE / 100);\n            //msg.sender or to??\n        }\n        else\n            if (purchaseMethod == PurchaseMethod.Buying) {\n                (uint reserveA, uint reserveB) = (apm.getReserve(purchaseTokenAddress), apm.getReserve(debondTokenAddress));\n                uint amount = CDP.quote(purchaseTokenAmount, reserveA, reserveB);\n                issueBonds(msg.sender, debondTokenClassId, amount + amount * RATE / 100); // here the interest calculation is hardcoded\n            }\n\n            apm.updaReserveAfterAddingLiquidity(debondTokenAddress, amountBToMint);\n            apm.updaReserveAfterAddingLiquidity(purchaseTokenAddress, purchaseTokenAmount);\n            apm.updateRatioAfterAddingLiquidity(debondTokenAddress, purchaseTokenAddress, amountBToMint, purchaseTokenAmount);\n    }\n\n    // **** REDEEM BONDS ****\n\n    function redeemBonds(\n        uint classId,\n        uint nonceId,\n        uint amount\n        //uint amountMin?\n    ) external {\n        IDebondBond(address(bond)).redeem(msg.sender, classId, nonceId, amount);\n\t    //require(redeemable) is already done in redeem function for liquidity, but still has to be done for time redemption\n\n        (, IData.InterestRateType interestRateType ,address TokenAddress,) = debondData.getClassFromId(classId);\n        //require(reserves[TokenAddress]>amountIn);\n\n        if(interestRateType == IData.InterestRateType.FixedRate) {\n            IERC20(TokenAddress).transferFrom(address(apm), msg.sender, amount);\n\n\n        }\n        else if (interestRateType == IData.InterestRateType.FloatingRate){\n            //to be implemented later\n        }\n\n\n        //how do we know if we have to burn (or put in reserves) dbit or dbgt?\n\n\n\t    //APM.removeLiquidity(tokenAddress, amountIn);\n//        apm.updaReserveAfterRemovingLiquidity(tokenAddress, amountIn);\n        //emit\n\n    }\n\n    // **** Swaps ****\n\n\n    // TODO External to the Bank maybe\n    function calculateDebondTokenToMint(\n//        address purchaseTokenAddress, // token added\n//        address debondTokenAddress, //token minted\n        uint purchaseTokenAmount\n    ) internal pure returns (uint amountB) {\n\n        uint amountBOptimal = amountOfDBITToMint(purchaseTokenAmount);\n        //change this later\n        amountB = amountBOptimal;\n\n    }\n\n\n    function amountOfDBITToMint(uint256 amountA) public pure returns (uint256 amountToMint) {\n        return amountA;\n    }\n\n    function issueBonds(address to, uint256 classId, uint256 amount) private {\n        manageNonceId(classId);\n        (uint nonceId,) = debondData.getLastNonceCreated(classId);\n        bond.issue(to, classId, nonceId, amount);\n    }\n\n    function manageNonceId(uint classId) private {\n        uint timestampToCheck = block.timestamp;\n        (uint lastNonceId, uint createdAt) = debondData.getLastNonceCreated(classId);\n        if ((timestampToCheck - createdAt) >= DIFF_TIME_NEW_NONCE) {\n            createNewNonce(classId, lastNonceId, timestampToCheck);\n            return;\n        }\n\n        uint tDay = (timestampToCheck - BASE_TIMESTAMP) % DIFF_TIME_NEW_NONCE;\n        if ((tDay + (timestampToCheck - createdAt)) >= DIFF_TIME_NEW_NONCE) {\n            createNewNonce(classId, lastNonceId, timestampToCheck);\n            return;\n        }\n    }\n\n    function createNewNonce(uint classId, uint lastNonceId, uint creationTimestamp) private {\n        uint _newNonceId = ++lastNonceId;\n        (,,, uint period) = debondData.getClassFromId(classId);\n        bond.createNonce(classId, _newNonceId, creationTimestamp + period, 500);\n        debondData.updateLastNonce(classId, _newNonceId, creationTimestamp);\n        //here 500 is liquidity info hard coded for now\n    }\n\n}\n"
    },
    "contracts/Debond-v0/contracts/DebondData.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n\nimport './interfaces/IData.sol';\nimport './libraries/CDP.sol';\n\ncontract DebondData is IData {\n\n    uint public constant TEST_PERIOD = 0; // 1 min period for tests\n    uint public constant TWO_MIN_PERIOD = 120; // 2 min period for tests\n    uint public constant ONE_HOUR_PERIOD = 60*60; // 1 hour period for tests\n    uint public constant TWO_DAYS_PERIOD = 60*60*24*2; // 1 hour period for tests\n\n    uint public constant SIX_M_PERIOD = 0; // 1 min period for tests\n\n    struct Class {\n        uint id;\n        bool exists;\n        string symbol;\n        InterestRateType interestRateType;\n        address tokenAddress;\n        uint periodTimestamp;\n        uint lastNonceIdCreated;\n        uint lastNonceIdCreatedTimestamp;\n    }\n\n    mapping(uint => Class) public classes; // mapping from classId to class\n\n    mapping(address => mapping(address => bool)) public tokenAllowed;\n\n    // data to be exclusively for the front end (for now)\n    mapping(uint => uint[]) public purchasableClasses;\n    uint[]  public debondClasses;\n\n    uint256[] public classesIds;\n\n    function getDebondClasses() public view returns (uint256[] memory) {\n        return debondClasses;\n    }\n\n    function getPurchasableClasses(uint256 debondClass) public view returns (uint256[] memory) {\n        return purchasableClasses[debondClass];\n    }\n\n    function getAllClassesIds() public view returns (uint256[] memory) {\n        return classesIds;\n    }\n\n    constructor(\n        address DBIT,\n        address USDC,\n        address USDT,\n        address DAI\n    //        address governance\n    ) {\n\n        addClass(0, \"D/BIT\", InterestRateType.FixedRate, DBIT, TEST_PERIOD);\n        addClass(1, \"USDC\", InterestRateType.FixedRate, USDC, TEST_PERIOD);\n        addClass(2, \"USDT\", InterestRateType.FixedRate, USDT, TEST_PERIOD);\n        addClass(3, \"DAI\", InterestRateType.FixedRate, DAI, TEST_PERIOD);\n        addClass(4, \"D/BGT\", InterestRateType.FixedRate, DBIT, TEST_PERIOD);\n\n        addClass(5, \"USDC\", InterestRateType.FixedRate, USDC, TWO_DAYS_PERIOD);\n        addClass(6, \"USDT\", InterestRateType.FixedRate, USDT, TWO_DAYS_PERIOD);\n        addClass(7, \"D/BIT\", InterestRateType.FixedRate, DBIT, TWO_DAYS_PERIOD);\n\n        purchasableClasses[0].push(1);\n        purchasableClasses[0].push(2);\n        purchasableClasses[0].push(3);\n\n        purchasableClasses[7].push(5);\n        purchasableClasses[7].push(6);\n\n        debondClasses.push(0);\n        debondClasses.push(4);\n        debondClasses.push(7);\n\n        (address token1, address token2) = CDP.sortTokens(DBIT, USDC);\n        tokenAllowed[token1][token2] = true;\n\n        (token1, token2) = CDP.sortTokens(DBIT, USDT);\n        tokenAllowed[token1][token2] = true;\n\n        (token1, token2) = CDP.sortTokens(DBIT, DAI);\n        tokenAllowed[token1][token2] = true;\n\n\n    }\n\n\n    /**\n     * @notice this method should only be called by the governance contract TODO Only Governance\n     */\n    function addClass(uint classId, string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp) public override {\n        Class storage class = classes[classId];\n        require(!class.exists, \"DebondData: cannot add an existing classId\");\n        class.id = classId;\n        class.exists = true;\n        class.symbol = symbol;\n        class.interestRateType = interestRateType;\n        class.tokenAddress = tokenAddress;\n        class.periodTimestamp = periodTimestamp;\n        classesIds.push(classId);\n        // should maybe add an event\n    }\n\n    // TODO Only Governance\n    function updateTokenAllowed(\n        address tokenA,\n        address tokenB,\n        bool allowed\n    ) external override {\n        tokenAllowed[tokenA][tokenB] = allowed;\n        tokenAllowed[tokenB][tokenA] = allowed;\n    }\n\n    function isPairAllowed(\n        address _tokenA,\n        address _tokenB) public view returns (bool) {\n        (address tokenA, address tokenB) = sortTokens(_tokenA, _tokenB);\n        return tokenAllowed[tokenA][tokenB];\n    }\n\n    function getClassFromId(\n        uint classId\n    ) external view returns (string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp) {\n        Class storage class = classes[classId];\n        symbol = class.symbol;\n        periodTimestamp = class.periodTimestamp;\n        tokenAddress = class.tokenAddress;\n        interestRateType = class.interestRateType;\n        return (symbol, interestRateType, tokenAddress, periodTimestamp);\n    }\n\n    // TODO Only Bank\n    function getLastNonceCreated(uint classId) external view returns (uint nonceId, uint createdAt) {\n        Class storage class = classes[classId];\n        require(class.exists, \"Debond Data: class id given not found\");\n        nonceId = class.lastNonceIdCreated;\n        createdAt = class.lastNonceIdCreatedTimestamp;\n        return (nonceId, createdAt);\n    }\n\n    // TODO Only Bank\n    function updateLastNonce(uint classId, uint nonceId, uint createdAt) external {\n        Class storage class = classes[classId];\n        require(class.exists, \"Debond Data: class id given not found\");\n        class.lastNonceIdCreated = nonceId;\n        class.lastNonceIdCreatedTimestamp = createdAt;\n    }\n\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'DebondLibrary: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'DebondLibrary: ZERO_ADDRESS');\n    }\n\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/Debond-v0/contracts/interfaces/IData.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\ninterface IData {\n\n    enum InterestRateType {FixedRate, FloatingRate}\n\n    function addClass(uint classId, string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp) external;\n\n    function updateTokenAllowed(address tokenA, address tokenB, bool allowed) external;\n\n    function isPairAllowed(address tokenA, address tokenB) external view returns (bool);\n\n    function getClassFromId(uint classId) external view returns(string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp);\n\n    function getLastNonceCreated(uint classId) external view returns(uint nonceId, uint createdAt);\n\n    function updateLastNonce(uint classId, uint nonceId, uint createdAt) external;\n}\n"
    },
    "contracts/Debond-v0/contracts/interfaces/IDebondBond.sol": {
      "content": "pragma solidity 0.8.13;\n\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport \"./IERC3475.sol\";\nimport \"./IData.sol\";\n\n\ninterface IDebondBond is IERC3475 {\n\n    function createNonce(uint256 classId, uint256 nonceId, uint256 maturityTime, uint256 liqT) external;\n\n    function createClass(uint256 classId, string memory symbol, IData.InterestRateType interestRateType, address tokenAddress, uint256 periodTimestamp) external;\n\n    function classExists(uint256 classId) external returns (bool);\n\n    function nonceExists(uint256 classId, uint256 nonceId) external returns (bool);\n\n    function bondDetails(uint256 classId, uint256 nonceId) external view returns (string memory _symbol, IData.InterestRateType _interestRateType, address _tokenAddress, uint256 _periodTimestamp, uint256 _maturityDate, uint256 _issuanceDate);\n\n    function isActive() external returns (bool);\n\n\n}\n\n"
    },
    "contracts/Debond-v0/contracts/interfaces/IDebondToken.sol": {
      "content": "pragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// SPDX-License-Identifier: apache 2.0\n/*\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\ninterface IDebondToken is IERC20 {\n\n    function mint(address _to, uint256 _amount) external;\n\n\n}\n"
    },
    "contracts/Debond-v0/contracts/libraries/CDP.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: apache 2.0\n\nimport \"./SafeMath.sol\";\n/**\nfunctions for determining the amount of DBIT to be mint and pricing \n*/ \nlibrary CDP {\n using SafeMath for uint256;\n\n  function BondExchangeRate(uint256 dbitTotalSupply) public pure returns (uint256 amount_bond) {\n        if (dbitTotalSupply < 1e5) {\n            amount_bond = 1 ether;\n        } else {\n            uint256 logTotalSupply = SafeMath.ln(dbitTotalSupply * 1e13);\n            amount_bond = SafeMath.pow(1.05 * 1 ether, logTotalSupply);\n        }\n    } \n\n    /**\n    * @dev convert a given amount of DBIT in USD and trhen this amount of USD in DBIT\n    * @param _amountToken the amount of token\n    * @param amountDBIT The amount of DBIT returned\n    */\n    function _conversionTokenToDBIT(uint256 _amountToken) internal pure returns(uint256 amountDBIT) {\n        // This must be done later when the oracle will be implemented\n        // Convert _amoutToken to USD and calculate how much DBIT we can buy with this amount of USD\n        // For now we suppose both tokens are tading at 1:1\n\n        amountDBIT = _amountToken;\n    }\n\n    /**\n    * @dev given the amount of tokens, returns the amout of DBIT to mint\n    * @param _amountToken the amount of token\n    * @param _dbitTotalSupply the total supply of DBIT\n    * @param amountDBIT The amount of DBIT to mint\n    */\n    function amountOfDBIT(uint256 _amountToken, uint256 _dbitTotalSupply) external pure returns(uint256 amountDBIT) {\n        require(_amountToken > 0, \"Debond: Provide some tokens\");\n\n        uint256 tokenToDBIT = _conversionTokenToDBIT(_amountToken);\n        uint256 rate = BondExchangeRate(_dbitTotalSupply);\n\n        amountDBIT = tokenToDBIT * rate;\n    }\n\n    function _amountOfDebondToMint(uint256 _dbitIn) internal pure returns (uint256 amountDBIT) {\n        // todo: mock token contract.\n        uint256 dbitMaxSupply = 10000;\n        uint256 dbitTotalSupply = 1000000;\n\n        require(_dbitIn > 0, \"SigmoidBank/NULL_VALUE\");\n        require(dbitTotalSupply.add(_dbitIn) <= dbitMaxSupply, \"insufficient value\");\n        // amount of of DBIT to mint\n        amountDBIT = _dbitIn * 10;\n    }\n    \n//    function _dbitUSDPrice() internal  returns(uint256) {\n//        return 100;\n//    }\n    \n    \n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'DebondLibrary: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'DebondLibrary: ZERO_ADDRESS');\n    }\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) internal pure returns (uint256 amountB) { /// use uint?? int256???\n        require(amountA > 0, 'DebondLibrary: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'DebondLibrary: INSUFFICIENT_LIQUIDITY');\n        //amountB = amountA.mul(reserveB) / reserveA;\n        amountB = SafeMath.div(amountA * reserveB, reserveA);\n\n    }\n\n}\n\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Debond-v0/contracts/interfaces/IERC3475.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\ninterface IERC3475 {\n\n    // WRITE\n\n    /**\n     * @dev allows the transfer of a bond type from an address to another.\n     * @param from argument is the address of the holder whose balance about to decrees.\n     * @param to argument is the address of the recipient whose balance is about to increased.\n     * @param classId is the classId of bond, the first bond class created will be 0, and so on.\n     * @param nonceId is the nonceId of the given bond class. This param is for distinctions of the issuing conditions of the bond.\n     * @param amount is the amount of the bond, that will be transferred from \"_from\" address to \"_to\" address.\n     */\n    function transferFrom(address from, address to, uint256 classId, uint256 nonceId, uint256 amount) external;\n\n\n    /**\n     * @dev  allows issuing any number of bond types to an address.\n     * The calling of this function needs to be restricted to bond issuer contract.\n     * @param to is the address to which the bond will be issued.\n     * @param classId is the classId of the bond, the first bond class created will be 0, and so on.\n     * @param nonceId is the nonceId of the given bond class. This param is for distinctions of the issuing conditions of the bond.\n     * @param amount is the amount of the bond, that \"to\" address will receive.\n     */\n    function issue(address to, uint256 classId, uint256 nonceId, uint256 amount) external;\n\n    /**\n     * @dev  allows redemption of any number of bond types from an address.\n     * The calling of this function needs to be restricted to bond issuer contract.\n     * @param from is the address from which the bond will be redeemed.\n     * @param classId is the class nonce of bond, the first bond class created will be 0, and so on.\n     * @param nonceId is the nonce of the given bond class. This param is for distinctions of the issuing conditions of the bond.\n     * @param amount is the amount of the bond, that \"from\" address will redeem.\n     */\n    function redeem(address from, uint256 classId, uint256 nonceId, uint256 amount) external;\n\n    /**\n     * @dev  allows the transfer of any number of bond types from an address to another.\n     * The calling of this function needs to be restricted to bond issuer contract.\n     * @param from argument is the address of the holder whose balance about to decrees.\n     * @param classId is the class nonce of bond, the first bond class created will be 0, and so on.\n     * @param nonceId is the nonce of the given bond class. This param is for distinctions of the issuing conditions of the bond.\n     * @param amount is the amount of the bond, that will be transferred from \"_from\"address to \"_to\" address.\n     */\n    function burn(address from, uint256 classId, uint256 nonceId, uint256 amount) external;\n\n    /**\n     * @dev Allows spender to withdraw from your account multiple times, up to the amount.\n     * @notice If this function is called again it overwrites the current allowance with amount.\n     * @param spender is the address the caller approve for his bonds\n     * @param classId is the classId nonce of bond, the first bond class created will be 0, and so on.\n     * @param nonceId is the nonceId of the given bond class. This param is for distinctions of the issuing conditions of the bond.\n     * @param amount is the amount of the bond that the spender is approved for.\n     */\n    function approve(address spender, uint256 classId, uint256 nonceId, uint256 amount) external;\n\n    /**\n      * @notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\n      * @dev MUST emit the ApprovalForAll event on success.\n      * @param operator  Address to add to the set of authorized operators\n      * @param classId is the classId nonce of bond, the first bond class created will be 0, and so on.\n      * @param approved  True if the operator is approved, false to revoke approval\n    */\n    function setApprovalFor(address operator, uint256 classId, bool approved) external;\n\n    /**\n     * @dev Allows spender to withdraw bonds from your account multiple times, up to the amount.\n     * @notice If this function is called again it overwrites the current allowance with amount.\n     * @param spender is the address the caller approve for his bonds.\n     * @param classIds is the list of classIds of bond.\n     * @param nonceIds is the list of nonceIds of the given bond class.\n     * @param amounts is the list of amounts of the bond that the spender is approved for.\n     */\n    function batchApprove(address spender, uint256[] calldata classIds, uint256[] calldata nonceIds, uint256[] calldata amounts) external;\n\n\n    // READ\n\n    /**\n     * @dev Returns the total supply of the bond in question\n     */\n    function totalSupply(uint256 classId, uint256 nonceId) external view returns (uint256);\n\n    /**\n     * @dev Returns the redeemed supply of the bond in question\n     */\n    function redeemedSupply(uint256 classId, uint256 nonceId) external view returns (uint256);\n\n    /**\n     * @dev Returns the active supply of the bond in question\n     */\n    function activeSupply(uint256 classId, uint256 nonceId) external view returns (uint256);\n\n    /**\n     * @dev Returns the burned supply of the bond in question\n     */\n    function burnedSupply(uint256 classId, uint256 nonceId) external view returns (uint256);\n\n    /**\n     * @dev Returns the balance of the giving bond classId and bond nonce\n     */\n    function balanceOf(address account, uint256 classId, uint256 nonceId) external view returns (uint256);\n\n    /**\n     * @dev Returns the symbol of the giving bond classId\n     */\n    function symbol(uint256 classId) external view returns (string memory);\n\n    /**\n     * @dev Returns the informations for the class of given classId\n     * @notice Every bond contract can have their own list of class informations\n     */\n    function classInfos(uint256 classId) external view returns (uint256[] memory);\n\n    /**\n     * @dev Returns the information description for a given class info\n     * @notice Every bond contract can have their own list of class informations\n     */\n    function classInfoDescription(uint256 classInfo) external view returns (string memory);\n\n    /**\n     * @dev Returns the information description for a given nonce info\n     * @notice Every bond contract can have their own list of nonce informations\n     */\n    function nonceInfoDescription(uint256 nonceInfo) external view returns (string memory);\n\n    /**\n     * @dev Returns the informations for the nonce of given classId and nonceId\n     * @notice Every bond contract can have their own list. But the first uint256 in the list MUST be the UTC time code of the issuing time.\n     */\n    function nonceInfos(uint256 classId, uint256 nonceId) external view returns (uint256[] memory);\n\n    /**\n     * @dev  allows anyone to check if a bond is redeemable.\n     * @notice the conditions of redemption can be specified with one or several internal functions.\n     */\n    function isRedeemable(uint256 classId, uint256 nonceId) external view returns (bool);\n\n    /**\n     * @notice  Returns the amount which spender is still allowed to withdraw from owner.\n     */\n    function allowance(address owner, address spender, uint256 classId, uint256 nonceId) external view returns (uint256);\n\n    /**\n    * @notice Queries the approval status of an operator for a given owner.\n    * @return True if the operator is approved, false if not\n    */\n    function isApprovedFor(address owner, address operator, uint256 classId) external view returns (bool);\n\n    /**\n    * @notice MUST trigger when tokens are transferred, including zero value transfers.\n    */\n    event Transfer(address indexed _operator, address indexed _from, address indexed _to, uint256 classId, uint256 nonceId, uint256 amount);\n\n    /**\n    * @notice MUST trigger when tokens are issued\n    */\n    event Issue(address indexed _operator, address indexed _to, uint256 classId, uint256 nonceId, uint256 amount);\n\n    /**\n    * @notice MUST trigger when tokens are redeemed\n    */\n    event Redeem(address indexed _operator, address indexed _from, uint256 classId, uint256 nonceId, uint256 amount);\n\n    /**\n    * @notice MUST trigger when tokens are burned\n    */\n    event Burn(address indexed _operator, address indexed _from, uint256 classId, uint256 nonceId, uint256 amount);\n\n    /**\n    * @dev MUST emit when approval for a second party/operator address to manage all bonds from a classId given for an owner address is enabled or disabled (absence of an event assumes disabled).\n    */\n    event ApprovalFor(address indexed _owner, address indexed _operator, uint256 classId, bool _approved);\n\n}"
    },
    "contracts/Debond-v0/contracts/DebondBond.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./interfaces/IDebondBond.sol\";\nimport \"./interfaces/IData.sol\";\nimport \"./interfaces/IData.sol\";\n\n\ncontract DebondBond is IDebondBond, AccessControl {\n\n    bytes32 public constant ISSUER_ROLE = keccak256(\"ISSUER_ROLE\");\n\n    uint public constant ONE_HOUR_PERIOD = 60 * 60; // 1 hour period for tests\n    uint public constant TWO_DAYS_PERIOD = 60 * 60 * 24 * 2; // 1 hour period for tests\n\n\n    /**\n    * @notice this Struct is representing the Nonce properties as an object\n    *         and can be retrieve by the nonceId (within a class)\n    */\n    struct Nonce {\n        uint256 id;\n        bool exists;\n        uint256 _activeSupply;\n        uint256 _burnedSupply;\n        uint256 _redeemedSupply;\n        uint256 maturityDate;\n        uint256 issuanceDate;\n        uint256 liqT;\n        uint256[] infos;\n        mapping(address => uint256) balances;\n        mapping(address => mapping(address => uint256)) allowances;\n        mapping(address => bool) hasBalance;\n    }\n\n    /**\n    * @notice this Struct is representing the Class properties as an object\n    *         and can be retrieve by the classId\n    */\n    struct Class {\n        uint256 id;\n        bool exists;\n        string symbol;\n        uint256[] infos;\n        IData.InterestRateType interestRateType;\n        address tokenAddress;\n        uint256 periodTimestamp;\n        mapping(address => mapping(address => bool)) operatorApprovals;\n        mapping(address => mapping(uint256 => bool)) noncesPerAddress;\n        mapping(address => uint256[]) noncesPerAddressArray;\n        uint256[] nonceIds;\n        mapping(uint256 => Nonce) nonces; // from nonceId given\n    }\n\n    mapping(uint256 => Class) internal classes; // from classId given\n    string[] public classInfoDescriptions; // mapping with class.infos\n    string[] public nonceInfoDescriptions; // mapping with nonce.infos\n    mapping(address => mapping(uint256 => bool)) classesPerAddress;\n    mapping(address => uint256[]) public classesPerAddressArray;\n\n\n    bool public _isActive;\n\n    constructor(\n        address DBIT,\n        address USDC,\n        address USDT,\n        address DAI\n    ) {\n        _isActive = true;\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        createClass(0, \"D/BIT\", IData.InterestRateType.FixedRate, DBIT, 60);\n        createClass(1, \"USDC\", IData.InterestRateType.FixedRate, USDC, 60);\n        createClass(2, \"USDT\", IData.InterestRateType.FixedRate, USDT, 60);\n\n        createClass(5, \"USDC\", IData.InterestRateType.FixedRate, USDC, TWO_DAYS_PERIOD);\n        createClass(6, \"USDT\", IData.InterestRateType.FixedRate, USDT, TWO_DAYS_PERIOD);\n        createClass(7, \"D/BIT\", IData.InterestRateType.FixedRate, DBIT, TWO_DAYS_PERIOD);\n    }\n\n\n    function isActive() external view returns (bool) {\n        return _isActive;\n    }\n\n    // WRITE\n\n    function transferFrom(address from, address to, uint256 classId, uint256 nonceId, uint256 amount) public virtual override {\n        require(msg.sender == from || isApprovedFor(from, msg.sender, classId), \"ERC3475: caller is not owner nor approved\");\n        _transferFrom(from, to, classId, nonceId, amount);\n        emit Transfer(msg.sender, from, to, classId, nonceId, amount);\n    }\n\n\n    function issue(address to, uint256 classId, uint256 nonceId, uint256 amount) external override onlyRole(ISSUER_ROLE) {\n        require(classExists(classId), \"ERC3475: only issue bond that has been created\");\n        require(nonceExists(classId, nonceId), \"ERC-3475: nonceId given not found!\");\n        require(to != address(0), \"ERC3475: can't transfer to the zero address\");\n        _issue(to, classId, nonceId, amount);\n\n        if (!classesPerAddress[to][classId]) {\n            classesPerAddressArray[to].push(classId);\n            classesPerAddress[to][classId] = true;\n        }\n\n        Class storage class = classes[classId];\n        if (!class.noncesPerAddress[to][nonceId]) {\n            class.noncesPerAddressArray[to].push(nonceId);\n            class.noncesPerAddress[to][nonceId] = true;\n        }\n        emit Issue(msg.sender, to, classId, nonceId, amount);\n    }\n\n    function classExists(uint256 classId) public view returns (bool) {\n        return classes[classId].exists;\n    }\n\n    function nonceExists(uint256 classId, uint256 nonceId) public view returns (bool) {\n        return classes[classId].nonces[nonceId].exists;\n    }\n\n    function createClass(uint256 classId, string memory _symbol, IData.InterestRateType interestRateType, address tokenAddress, uint256 periodTimestamp) public override {\n        require(!classExists(classId), \"ERC3475: cannot create a class that already exists\");\n        Class storage class = classes[classId];\n        class.id = classId;\n        class.exists = true;\n        class.symbol = _symbol;\n        class.interestRateType = interestRateType;\n        class.tokenAddress = tokenAddress;\n        class.periodTimestamp = periodTimestamp;\n    }\n\n    function createNonce(uint256 classId, uint256 nonceId, uint256 _maturityDate, uint256 liqT) external override onlyRole(ISSUER_ROLE) {\n        require(classExists(classId), \"ERC3475: only issue bond that has been created\");\n        Class storage class = classes[classId];\n\n        Nonce storage nonce = class.nonces[nonceId];\n        require(!nonce.exists, \"Error ERC-3475: nonceId exists!\");\n\n        nonce.id = nonceId;\n        nonce.exists = true;\n        nonce.maturityDate = _maturityDate;\n        nonce.issuanceDate = block.timestamp;\n        nonce.liqT = liqT;\n    }\n\n    function redeem(address from, uint256 classId, uint256 nonceId, uint256 amount) external override onlyRole(ISSUER_ROLE) {\n        require(nonceExists(classId, nonceId), \"ERC3475: given Nonce doesn't exist\");\n        require(from != address(0), \"ERC3475: can't transfer to the zero address\");\n        require(isRedeemable(classId, nonceId), \"Bond is not redeemable\");\n        _redeem(from, classId, nonceId, amount);\n        emit Redeem(msg.sender, from, classId, nonceId, amount);\n    }\n\n\n    function burn(address from, uint256 classId, uint256 nonceId, uint256 amount) external override onlyRole(ISSUER_ROLE) {\n        require(from != address(0), \"ERC3475: can't transfer to the zero address\");\n        _burn(from, classId, nonceId, amount);\n        emit Burn(msg.sender, from, classId, nonceId, amount);\n    }\n\n\n    function approve(address spender, uint256 classId, uint256 nonceId, uint256 amount) external override {\n        classes[classId].nonces[nonceId].allowances[msg.sender][spender] = amount;\n    }\n\n\n    function setApprovalFor(address operator, uint256 classId, bool approved) public override {\n        classes[classId].operatorApprovals[msg.sender][operator] = approved;\n        emit ApprovalFor(msg.sender, operator, classId, approved);\n    }\n\n\n    function batchApprove(address spender, uint256[] calldata classIds, uint256[] calldata nonceIds, uint256[] calldata amounts) external {\n        require(classIds.length == nonceIds.length && classIds.length == amounts.length, \"ERC3475 Input Error\");\n        for (uint256 i = 0; i < classIds.length; i++) {\n            classes[classIds[i]].nonces[nonceIds[i]].allowances[msg.sender][spender] = amounts[i];\n        }\n    }\n    // READS\n\n\n    function totalSupply(uint256 classId, uint256 nonceId) public override view returns (uint256) {\n        return classes[classId].nonces[nonceId]._activeSupply + classes[classId].nonces[nonceId]._redeemedSupply + classes[classId].nonces[nonceId]._burnedSupply;\n    }\n\n\n    function activeSupply(uint256 classId, uint256 nonceId) public override view returns (uint256) {\n        return classes[classId].nonces[nonceId]._activeSupply;\n    }\n\n\n    function burnedSupply(uint256 classId, uint256 nonceId) public override view returns (uint256) {\n        return classes[classId].nonces[nonceId]._burnedSupply;\n    }\n\n\n    function redeemedSupply(uint256 classId, uint256 nonceId) public override view returns (uint256) {\n        return classes[classId].nonces[nonceId]._burnedSupply;\n    }\n\n\n    function balanceOf(address account, uint256 classId, uint256 nonceId) public override view returns (uint256) {\n        require(account != address(0), \"ERC3475: balance query for the zero address\");\n\n        return classes[classId].nonces[nonceId].balances[account];\n    }\n\n\n    function symbol(uint256 classId) public view override returns (string memory) {\n        Class storage class = classes[classId];\n        return class.symbol;\n    }\n\n\n    function classInfos(uint256 classId) public view override returns (uint256[] memory) {\n        return classes[classId].infos;\n    }\n\n\n    function nonceInfos(uint256 classId, uint256 nonceId) public view override returns (uint256[] memory) {\n        return classes[classId].nonces[nonceId].infos;\n    }\n\n    function bondDetails(uint256 classId, uint256 nonceId) public view override returns (string memory _symbol, IData.InterestRateType _interestRateType, address _tokenAddress, uint256 _periodTimestamp, uint256 _issuanceDate, uint256 _maturityDate) {\n        Class storage class = classes[classId];\n        Nonce storage nonce = class.nonces[nonceId];\n\n        _symbol = class.symbol;\n        _interestRateType = class.interestRateType;\n        _tokenAddress = class.tokenAddress;\n        _periodTimestamp = class.periodTimestamp;\n        _issuanceDate = nonce.issuanceDate;\n        _maturityDate = nonce.maturityDate;\n\n        return (_symbol, _interestRateType, _tokenAddress, _periodTimestamp, _issuanceDate, _maturityDate);\n    }\n\n\n    function classInfoDescription(uint256 classInfo) external view returns (string memory) {\n        return classInfoDescriptions[classInfo];\n    }\n\n    function nonceInfoDescription(uint256 nonceInfo) external view returns (string memory) {\n        return nonceInfoDescriptions[nonceInfo];\n    }\n\n\n    function isRedeemable(uint256 classId, uint256 nonceId) public override view returns (bool) {\n        return classes[classId].nonces[nonceId].maturityDate <= block.timestamp;\n    }\n\n\n    function allowance(address owner, address spender, uint256 classId, uint256 nonceId) external view returns (uint256) {\n        return classes[classId].nonces[nonceId].allowances[owner][spender];\n    }\n\n\n    function isApprovedFor(address owner, address operator, uint256 classId) public view virtual override returns (bool) {\n        return classes[classId].operatorApprovals[owner][operator];\n    }\n\n\n    function getNoncesPerAddress(address addr, uint256 classId) public view returns (uint256[] memory) {\n        return classes[classId].noncesPerAddressArray[addr];\n    }\n\n    function batchActiveSupply(uint256 classId) public view returns (uint256) {\n        uint256 _batchActiveSupply;\n        uint256[] memory nonces = classes[classId].nonceIds;\n        // _lastBondNonces can be recovered from the last message of the nonceId\n        // @drisky we can indeed\n        for (uint256 i = 0; i <= nonces.length; i++) {\n            _batchActiveSupply += activeSupply(classId, nonces[i]);\n        }\n        return _batchActiveSupply;\n    }\n\n    function batchBurnedSupply(uint256 classId) public view returns (uint256) {\n        uint256 _batchBurnedSupply;\n        uint256[] memory nonces = classes[classId].nonceIds;\n\n        for (uint256 i = 0; i <= nonces.length; i++) {\n            _batchBurnedSupply += burnedSupply(classId, nonces[i]);\n        }\n        return _batchBurnedSupply;\n    }\n\n    function batchRedeemedSupply(uint256 classId) public view returns (uint256) {\n        uint256 _batchRedeemedSupply;\n        uint256[] memory nonces = classes[classId].nonceIds;\n\n        for (uint256 i = 0; i <= nonces.length; i++) {\n            _batchRedeemedSupply += redeemedSupply(classId, nonces[i]);\n        }\n        return _batchRedeemedSupply;\n    }\n\n    function batchTotalSupply(uint256 classId) public view returns (uint256) {\n        uint256 _batchTotalSupply;\n        uint256[] memory nonces = classes[classId].nonceIds;\n\n        for (uint256 i = 0; i <= nonces.length; i++) {\n            _batchTotalSupply += totalSupply(classId, nonces[i]);\n        }\n        return _batchTotalSupply;\n    }\n\n    function _transferFrom(address from, address to, uint256 classId, uint256 nonceId, uint256 amount) private {\n        require(from != address(0), \"ERC3475: can't transfer from the zero address\");\n        require(to != address(0), \"ERC3475: can't transfer to the zero address\");\n        require(classes[classId].nonces[nonceId].balances[from] >= amount, \"ERC3475: not enough bond to transfer\");\n        _transfer(from, to, classId, nonceId, amount);\n    }\n\n    function _transfer(address from, address to, uint256 classId, uint256 nonceId, uint256 amount) private {\n        require(from != to, \"ERC3475: can't transfer to the same address\");\n        classes[classId].nonces[nonceId].balances[from] -= amount;\n        classes[classId].nonces[nonceId].balances[to] += amount;\n    }\n\n    function _issue(address to, uint256 classId, uint256 nonceId, uint256 amount) private {\n        classes[classId].nonces[nonceId].balances[to] += amount;\n        classes[classId].nonces[nonceId]._activeSupply += amount;\n    }\n\n    function _redeem(address from, uint256 classId, uint256 nonceId, uint256 amount) private {\n        require(classes[classId].nonces[nonceId].balances[from] >= amount);\n        classes[classId].nonces[nonceId].balances[from] -= amount;\n        classes[classId].nonces[nonceId]._activeSupply -= amount;\n        classes[classId].nonces[nonceId]._redeemedSupply += amount;\n    }\n\n    function _burn(address from, uint256 classId, uint256 nonceId, uint256 amount) private {\n        require(classes[classId].nonces[nonceId].balances[from] >= amount);\n        classes[classId].nonces[nonceId].balances[from] -= amount;\n        classes[classId].nonces[nonceId]._activeSupply -= amount;\n        classes[classId].nonces[nonceId]._burnedSupply += amount;\n    }\n\n    function getClassesPerAddress(address _address) public view returns (uint256[] memory _classes) {\n        return classesPerAddressArray[_address];\n    }\n\n    function getClassFromId(uint256 classId)\n    external\n    view\n    returns (\n        string memory symbol,\n        IData.InterestRateType interestRateType,\n        address tokenAddress,\n        uint periodTimestamp\n    )\n    {\n        Class storage class = classes[classId];\n        symbol = class.symbol;\n        periodTimestamp = class.periodTimestamp;\n        tokenAddress = class.tokenAddress;\n        interestRateType = class.interestRateType;\n        return (symbol, interestRateType, tokenAddress, periodTimestamp);\n    }\n\n\n    function nonceDetails(uint256 classId, uint256 nonceId, address account) public view returns (string memory _symbol, IData.InterestRateType _interestRateType, address _tokenAddress, uint256 _periodTimestamp, uint256 _issuanceDate, uint256 _maturityDate, uint _balance) {\n        Class storage class = classes[classId];\n        Nonce storage nonce = class.nonces[nonceId];\n\n        _symbol = class.symbol;\n        _interestRateType = class.interestRateType;\n        _tokenAddress = class.tokenAddress;\n        _periodTimestamp = class.periodTimestamp;\n        _issuanceDate = nonce.issuanceDate;\n        _maturityDate = nonce.maturityDate;\n        _balance = nonce.balances[account];\n\n        return (_symbol, _interestRateType, _tokenAddress, _periodTimestamp, _issuanceDate, _maturityDate, _balance);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Debond-v0/contracts/test/DBIT.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\nimport \"../interfaces/IDebondToken.sol\";\nimport \"./FakeERC20.sol\";\n\n\ncontract DBIT is FakeERC20, IDebondToken, AccessControl {\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    constructor() ERC20(\"D/BIT TOKEN\", \"D/BIT\") {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function mint(address _to, uint256 _amount) external onlyRole(MINTER_ROLE) {\n        _mint(_to, _amount);\n    }\n\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/Debond-v0/contracts/test/FakeERC20.sol": {
      "content": "pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract FakeERC20 is ERC20, Ownable {\n\n    // remove allowance check\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(from, to, amount);\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/Debond-v0/contracts/test/USDT.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: MIT\n\nimport \"./FakeERC20.sol\";\n\n\ncontract USDT is FakeERC20 {\n\n\n    constructor() ERC20(\"USDT Test\", \"USDT\") {}\n\n    function mint(address _to, uint256 _amount) external {\n        _mint(_to, _amount);\n    }\n\n\n}\n"
    },
    "contracts/Debond-v0/contracts/test/USDC.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: MIT\n\nimport \"./FakeERC20.sol\";\n\n\n\n\n\ncontract USDC is FakeERC20 {\n\n\n    constructor() ERC20(\"USDC Test\", \"USDC\") {}\n\n    function mint(address _to, uint256 _amount) external {\n        _mint(_to, _amount);\n    }\n\n\n}\n"
    },
    "contracts/Debond-v0/contracts/test/DAI.sol": {
      "content": "pragma solidity 0.8.13;\n\n// SPDX-License-Identifier: MIT\n\nimport \"./FakeERC20.sol\";\n\ncontract DAI is FakeERC20 {\n\n\n    constructor() ERC20(\"DAI Test\", \"DAI\") {}\n\n    function mint(address _to, uint256 _amount) external {\n        _mint(_to, _amount);\n    }\n\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}