{
  "address": "0xB439ecb88CA875A991293201A81605e1C7677998",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "apmAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dataAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bondAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DBITAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__DivInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAbs",
          "type": "uint256"
        }
      ],
      "name": "PRBMathSD59x18__DivOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "PRBMathSD59x18__Exp2InputTooBig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__MulInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAbs",
          "type": "uint256"
        }
      ],
      "name": "PRBMathSD59x18__MulOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BASE_TIMESTAMP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BENCHMARK_RATE_DECIMAL_18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DIFF_TIME_NEW_NONCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountUSDDecimal8",
          "type": "uint256"
        }
      ],
      "name": "USDToDbitToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseClassId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debondClassId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_purchaseTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debondTokenMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum Bank.PurchaseMethod",
          "name": "purchaseMethod",
          "type": "uint8"
        }
      ],
      "name": "buyBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "getDebondTokenAmountFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseTokenClassId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debondTokenClassId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_purchaseTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum Bank.PurchaseMethod",
          "name": "purchaseMethod",
          "type": "uint8"
        }
      ],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fixRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "floatRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonceId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemBonds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e5108ef629dd1f4066adbe01da412021c41f35f02ec36f44861c2225d38a3c9",
  "receipt": {
    "to": null,
    "from": "0xd59276C2A56B19b678c4D22e3eeE148F5a816c37",
    "contractAddress": "0xB439ecb88CA875A991293201A81605e1C7677998",
    "transactionIndex": 0,
    "gasUsed": "2412796",
    "logsBloom": "0x
    "blockHash": "0x7330d5f5722e58401511ecca20ec7e6627b1e0f11714b1fb0b56de1f544fcae4",
    "transactionHash": "0x1e5108ef629dd1f4066adbe01da412021c41f35f02ec36f44861c2225d38a3c9",
    "logs": [],
    "blockNumber": 12450816,
    "cumulativeGasUsed": "2412796",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x39FfD23c810B36a72BdE798ca2FEa6D8a8560294",
    "0xF4c020ec427698c9ACfb46c795BA7671B7437b8c",
    "0x6d89597c7338fDb1b8e5e96313866478bEf6E441",
    "0x722cBd66BDF00D30adcA93401ae869aEE216fdbb"
  ],
  "numDeployments": 6,
  "solcInputHash": "38817cb41b79540a5b058d9672f7da4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"apmAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DBITAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__DivInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__DivOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMathSD59x18__Exp2InputTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__MulInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__MulOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BASE_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BENCHMARK_RATE_DECIMAL_18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DIFF_TIME_NEW_NONCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUSDDecimal8\",\"type\":\"uint256\"}],\"name\":\"USDToDbitToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseClassId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debondClassId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debondTokenMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Bank.PurchaseMethod\",\"name\":\"purchaseMethod\",\"type\":\"uint8\"}],\"name\":\"buyBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getDebondTokenAmountFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseTokenClassId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debondTokenClassId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Bank.PurchaseMethod\",\"name\":\"purchaseMethod\",\"type\":\"uint8\"}],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fixRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floatRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMathSD59x18__DivInputTooSmall()\":[{\"notice\":\"Emitted when one of the inputs is MIN_SD59x18.\"}],\"PRBMathSD59x18__DivOverflow(uint256)\":[{\"notice\":\"Emitted when one of the intermediary unsigned results overflows SD59x18.\"}],\"PRBMathSD59x18__Exp2InputTooBig(int256)\":[{\"notice\":\"Emitted when the input is greater than 192.\"}],\"PRBMathSD59x18__MulInputTooSmall()\":[{\"notice\":\"Emitted when one of the inputs is MIN_SD59x18.\"}],\"PRBMathSD59x18__MulOverflow(uint256)\":[{\"notice\":\"Emitted when the intermediary absolute result overflows SD59x18.\"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Debond-v0/contracts/Bank.sol\":\"Bank\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/Debond-v0/contracts/APM.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\nimport \\\"./interfaces/IAPM.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ncontract APM is IAPM {\\n    using SafeMath for uint256; //check this, maybe prbmath, see with cedric \\n\\n    mapping(address => uint256) internal totalReserve;\\n    mapping(address => uint256) internal totalVlp; //Vlp : virtual liquidity pool\\n    //mapping(address => mapping( address => Pair) ) pairs;\\n    mapping(address => mapping( address => uint) ) vlp;\\n\\n\\n    struct UpdateData { //to avoid stack too deep error\\n        uint amountA;\\n        uint amountB;\\n        address tokenA;\\n        address tokenB;\\n    }\\n\\n    function getReservesOneToken(\\n        address tokenA, //token we want to know reserve\\n        address tokenB //pool associated\\n    ) private view returns (uint reserveA) {\\n        uint totalVlpA = totalVlp[tokenA]; //gas saving\\n        if( totalVlpA != 0){\\n            uint vlpA = vlp[tokenA][tokenB];\\n            reserveA = vlpA * totalReserve[tokenA] / totalVlpA; //use mulDiv?\\n        }\\n    }\\n    function getReserves(\\n        address tokenA,\\n        address tokenB\\n    ) public override view returns (uint reserveA, uint reserveB) {\\n        (reserveA, reserveB) = (getReservesOneToken(tokenA, tokenB), getReservesOneToken(tokenB, tokenA) );\\n    }\\n    function updateTotalReserve(address tokenAddress, uint amount) public {\\n            totalReserve[tokenAddress] = totalReserve[tokenAddress] + amount;\\n    }\\n    function getVlps(address tokenA, address tokenB) public view returns (uint vlpA) {\\n        vlpA = vlp[tokenA][tokenB];\\n    }\\n    function updateWhenAddLiquidityOneToken(\\n        uint amountA,\\n        address tokenA,\\n        address tokenB) private { \\n            \\n        //require(msg.sender == bankAddress, \\\"not authorized\\\");\\n\\n        UpdateData memory updateData;\\n        updateData.amountA = amountA;\\n        updateData.tokenA = tokenA;\\n        updateData.tokenB = tokenB;\\n\\n        uint totalReserveA = totalReserve[updateData.tokenA];//gas saving\\n\\n        if(totalReserveA != 0){\\n            //update Vlp\\n            uint oldVlpA = vlp[tokenA][tokenB];  //for update total vlp\\n            uint totalVlpA = totalVlp[updateData.tokenA]; //save gas\\n\\n            uint vlpA = amountToAddVlp(oldVlpA, updateData.amountA, totalVlpA, totalReserveA);\\n            vlp[tokenA][tokenB] = vlpA;\\n\\n            //update total vlp\\n            totalVlp[updateData.tokenA] = totalVlpA - oldVlpA + vlpA;\\n        }\\n        else {\\n            vlp[tokenA][tokenB] = amountA;\\n            totalVlp[updateData.tokenA] = updateData.amountA;\\n        }\\n        totalReserve[updateData.tokenA] = totalReserveA + updateData.amountA;\\n    }\\n    function updateWhenAddLiquidity(\\n        uint amountA,\\n        uint amountB,\\n        address tokenA,\\n        address tokenB) external { //TODO : restrict update functions for bank only, using assert/require and not modifiers\\n        updateWhenAddLiquidityOneToken(amountA, tokenA, tokenB);\\n        updateWhenAddLiquidityOneToken(amountB, tokenB, tokenA);\\n    }\\n    function updateWhenRemoveLiquidityOneToken(\\n        uint amountA,\\n        address tokenA,\\n        address tokenB) private { \\n\\n        //require(msg.sender == bankAddress, \\\"not authorized\\\");\\n\\n        UpdateData memory updateData;\\n        updateData.amountA = amountA;\\n        updateData.tokenA = tokenA;\\n        updateData.tokenB = tokenB;\\n\\n        uint totalReserveA = totalReserve[updateData.tokenA];//gas saving\\n\\n        if(totalReserveA != 0){\\n            //update Vlp\\n            uint oldVlpA = vlp[tokenA][tokenB];  //for update total vlp\\n            uint totalVlpA = totalVlp[updateData.tokenA]; //save gas\\n\\n            uint vlpA = amountToRemoveVlp(oldVlpA, updateData.amountA, totalVlpA, totalReserveA);\\n            vlp[tokenA][tokenB] = vlpA;\\n\\n            //update total vlp\\n            totalVlp[updateData.tokenA] = totalVlpA - oldVlpA + vlpA;\\n        }\\n        else {\\n            vlp[tokenA][tokenB] = amountA;\\n            totalVlp[updateData.tokenA] = updateData.amountA;\\n        }\\n        totalReserve[updateData.tokenA] = totalReserveA - updateData.amountA;\\n    }\\n    function updateWhenRemoveLiquidity(\\n        uint amount, //amountA is the amount of tokenA removed in total pool reserve ( so not the total amount of tokenA in total pool reserve)\\n        address token) external {\\n        //require(msg.sender == bankAddress, \\\"not authorized\\\");\\n\\n        totalReserve[token] -= amount;\\n    }\\n    function updateWhenSwap(\\n        uint amountAAdded, //amountA is the amount of tokenA swapped in this pool ( so not the total amount of tokenA in this pool after the swap)\\n        uint amountBWithdrawn,\\n        address tokenA,\\n        address tokenB) public { \\n        //require(msg.sender == bankAddress or APM, \\\"not authorized\\\");\\n\\n        updateWhenAddLiquidityOneToken(amountAAdded, tokenA, tokenB);\\n        updateWhenRemoveLiquidityOneToken(amountBWithdrawn, tokenB, tokenA);\\n    }\\n    function amountToAddVlp(uint oldVlp, uint amount, uint totalVlpToken, uint totalReserveToken) public pure returns (uint newVlp) {\\n        newVlp = oldVlp + amount * totalVlpToken / totalReserveToken;\\n    }\\n    function amountToRemoveVlp(uint oldVlp, uint amount, uint totalVlpToken, uint totalReserveToken) public pure returns (uint newVlp) {\\n        newVlp = oldVlp - amount * totalVlpToken / totalReserveToken;\\n    }\\n    struct SwapData { //to avoid stack too deep error\\n        uint totalReserve0;\\n        uint totalReserve1;\\n        uint currentReserve0;\\n        uint currentReserve1;\\n        uint amount0In;\\n        uint amount1In;\\n    }\\n    \\n    function swap(uint amount0Out, uint amount1Out,address token0, address token1, address to) external { //no need to have both amount >0, there is always one equals to 0 (according to yu).\\n        require( (amount0Out != 0 && amount1Out == 0)|| (amount0Out == 0 && amount1Out != 0), 'APM swap: INSUFFICIENT_OUTPUT_AMOUNT_Or_Both_output >0');\\n        (uint _reserve0, uint _reserve1) = getReserves(token0, token1); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'APM swap: INSUFFICIENT_LIQUIDITY');\\n\\n        SwapData memory swapData;\\n        require(to != token0 && to != token1, 'APM swap: INVALID_TO'); // do we really need this?\\n        swapData.totalReserve0 = IERC20(token0).balanceOf(address(this));\\n        swapData.totalReserve1 = IERC20(token1).balanceOf(address(this));\\n        swapData.currentReserve0 = _reserve0 + swapData.totalReserve0 - totalReserve[token0]; // should be >= 0\\n        swapData.currentReserve1 = _reserve1 + swapData.totalReserve1 - totalReserve[token1];\\n\\n        swapData.amount0In = swapData.currentReserve0 > _reserve0 - amount0Out ? swapData.currentReserve0 - (_reserve0 - amount0Out) : 0;\\n        swapData.amount1In = swapData.currentReserve1 > _reserve1 - amount1Out ? swapData.currentReserve1 - (_reserve1 - amount1Out) : 0;\\n        require(swapData.amount0In > 0 || swapData.amount1In > 0, 'APM swap: INSUFFICIENT_INPUT_AMOUNT');\\n        require(swapData.currentReserve0 * swapData.currentReserve1 >= _reserve0 * _reserve1, 'APM swap: K');\\n        if (amount0Out == 0) {\\n            if (amount1Out != 0) IERC20(token1).transferFrom(address(this), to, amount1Out); //use of != because uint, cheaper than >\\n            updateWhenSwap(swapData.amount0In, amount1Out, token0, token1);\\n        }\\n        else{\\n            if (amount0Out != 0) IERC20(token0).transferFrom(address(this), to, amount0Out);\\n            updateWhenSwap(swapData.amount1In, amount0Out, token1, token0);\\n        }\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'DebondLibrary: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'DebondLibrary: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = amountIn * reserveOut;\\n        uint denominator = reserveIn + amountIn;\\n        amountOut = numerator / denominator;\\n    }\\n    \\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i < path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\\n\",\"keccak256\":\"0xafbc4151f3fb155d0fe89990c6d7a861360ea7b5913459b6fe99265300d1bde1\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/Bank.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\n\\n\\nimport './APM.sol';\\nimport './DebondData.sol';\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IAPM.sol\\\";\\nimport \\\"./interfaces/IData.sol\\\";\\nimport \\\"./interfaces/IDebondBond.sol\\\";\\nimport \\\"./interfaces/IDebondToken.sol\\\";\\nimport \\\"./libraries/CDP.sol\\\";\\nimport \\\"./libraries/PRBMathSD59x18.sol\\\";\\n\\n\\ncontract Bank {\\n\\n    using CDP for uint256;\\n    using SafeERC20 for IERC20;\\n    using PRBMathSD59x18 for uint256;\\n\\n\\n    IAPM apm;\\n    IData debondData;\\n    IDebondBond bond;\\n    enum PurchaseMethod {Buying, Staking}\\n    uint public constant BASE_TIMESTAMP = 1646089200; // 2022-03-01 00:00\\n    uint public constant DIFF_TIME_NEW_NONCE = 24 * 3600; // every 24h we crate a new nonce.\\n    uint public constant BENCHMARK_RATE_DECIMAL_18 = 5 * 10**16;\\n    address DBITAddress;\\n\\n    constructor(\\n        address apmAddress,\\n        address dataAddress,\\n        address bondAddress,\\n        address _DBITAddress\\n    ) {\\n        apm = IAPM(apmAddress);\\n        debondData = IData(dataAddress);\\n        bond = IDebondBond(bondAddress);\\n        DBITAddress = _DBITAddress;\\n    }\\n\\n    modifier ensure(uint deadline) {\\n        require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');\\n        _;\\n    }\\n\\n    // **** BUY BONDS ****\\n\\n    function buyBond(\\n        uint _purchaseClassId, // token added\\n        uint _debondClassId, // token to mint\\n        uint _purchaseTokenAmount,\\n        uint _debondTokenMinAmount, //should be changed to interest min amount\\n        PurchaseMethod purchaseMethod\\n    ) external {\\n\\n        uint purchaseClassId = _purchaseClassId;\\n        uint debondClassId = _debondClassId;\\n        uint purchaseTokenAmount = _purchaseTokenAmount;\\n        uint debondTokenMinAmount = _debondTokenMinAmount;\\n\\n        require(debondData.canPurchase(debondClassId, purchaseClassId), \\\"Pair not Allowed\\\");\\n\\n\\n        (,,address purchaseTokenAddress,) = debondData.getClassFromId(purchaseClassId);\\n        (,IData.InterestRateType interestRateType ,address debondTokenAddress,) = debondData.getClassFromId(debondClassId);\\n\\n        uint amountBToMint = calculateDebondTokenToMint(\\n//            purchaseTokenAddress,\\n//            debondTokenAddress,\\n            purchaseTokenAmount\\n        );\\n\\n//        require(debondTokenMinAmount <= amountBToMint, \\\"Not enough debond token in minting calculation\\\");\\n\\n\\n        IERC20(purchaseTokenAddress).transferFrom(msg.sender, address(apm), purchaseTokenAmount);\\n        //see uniswap : transferhelper,ierc202\\n        IDebondToken(debondTokenAddress).mint(address(apm), 2*amountBToMint); // One time for pool with tokenA, one time got pool with dgov\\n        // be aware that tokenB is a DebondToken, maybe add it to the class model\\n        //amountDgov = cdp_DGOV(amountBToMint)                               TODO\\n        //IDebondToken(dGOVTokenAddress).mint(address(apm), amountDgov );    TODO\\n\\n        apm.updateWhenAddLiquidity(purchaseTokenAmount, amountBToMint,  purchaseTokenAddress,  debondTokenAddress);\\n        //apm.updateWhenAddLiquidity(amountBToMint, amountDgov,  debondTokenAddress, dgovTokenAddress);   TODO\\n\\n        (uint fixedRate, uint floatingRate) = interestRate(purchaseClassId, debondClassId, purchaseTokenAmount, purchaseMethod);\\n        if (purchaseMethod == PurchaseMethod.Staking) {\\n            issueBonds(msg.sender, purchaseClassId, purchaseTokenAmount);\\n            (uint reserveA, uint reserveB) = apm.getReserves(purchaseTokenAddress, debondTokenAddress);\\n            //if reserve == 0 : use cdp price instead of quote? See with yu\\n            //do we have to handle the case where reserve = 0? or when deploying, we put some liquidity?\\n            uint amount = CDP.quote(purchaseTokenAmount, reserveA, reserveB);\\n            uint rate = interestRateType == IData.InterestRateType.FixedRate ? fixedRate : floatingRate;\\n            issueBonds(msg.sender, debondClassId, amount * rate / 10**18);\\n        }\\n        else if (purchaseMethod == PurchaseMethod.Buying) {\\n            (uint reserveA, uint reserveB) = apm.getReserves(purchaseTokenAddress, debondTokenAddress);\\n            uint amount = CDP.quote(purchaseTokenAmount, reserveA, reserveB);\\n            uint rate = interestRateType == IData.InterestRateType.FixedRate ? fixedRate : floatingRate;\\n            issueBonds(msg.sender, debondClassId, amount + amount * rate / 10**18); // here the interest calculation is hardcoded. require the interest is enough high\\n        }\\n    }\\n\\n    // **** REDEEM BONDS ****\\n\\n    function redeemBonds(\\n        uint classId,\\n        uint nonceId,\\n        uint amount\\n        //uint amountMin?\\n    ) external {\\n        IDebondBond(address(bond)).redeem(msg.sender, classId, nonceId, amount);\\n\\t    //require(redeemable) is already done in redeem function for liquidity, but still has to be done for time redemption\\n\\n        (, IData.InterestRateType interestRateType ,address TokenAddress,) = debondData.getClassFromId(classId);\\n        //require(reserves[TokenAddress]>amountIn);\\n\\n\\n\\n        if(interestRateType == IData.InterestRateType.FixedRate) {\\n            (,,,,,uint maturityDate) = bond.bondDetails( classId, nonceId);\\n            require(block.timestamp>maturityDate);\\n            IERC20(TokenAddress).transferFrom(address(apm), msg.sender, amount);\\n            apm.updateTotalReserve(TokenAddress, amount);\\n\\n\\n        }\\n        else if (interestRateType == IData.InterestRateType.FloatingRate){\\n            //to be implemented later\\n        }\\n\\n        //how do we know if we have to burn (or put in reserves) dbit or dbgt?\\n\\n\\n\\t    //APM.removeLiquidity(tokenAddress, amountIn);\\n//        apm.updaReserveAfterRemovingLiquidity(tokenAddress, amountIn);\\n        //emit\\n\\n    }\\n\\n    // **** Swaps ****\\n\\n    function swap(address tokenIn, address tokenOut, uint amountIn, uint amountOutMin) public {\\n        //if (tokenIn == dbitAddress){\\n\\n        //}\\n\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(uint[] memory amounts, address[] memory path, address to) internal virtual {\\n        for (uint i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            uint amountOut = amounts[i + 1];\\n            (uint amount0Out, uint amount1Out) = (uint(0), amountOut);\\n            apm.swap(\\n                amount0Out, amount1Out, input, output, to\\n            );\\n        }\\n    }\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path\\n    ) public returns (uint[] memory amounts) {\\n        amounts = apm.getAmountsOut(amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\\n\\n        IERC20(path[0]).transferFrom(msg.sender, address(apm), amounts[0]);\\n        _swap(amounts, path, msg.sender); //msg.sender?\\n    }\\n\\n\\n\\n\\n    // TODO External to the Bank maybe\\n    function calculateDebondTokenToMint(\\n//        address purchaseTokenAddress, // token added\\n//        address debondTokenAddress, //token minted\\n        uint purchaseTokenAmount\\n    ) internal pure returns (uint) {\\n        return purchaseTokenAmount;\\n    }\\n\\n\\n    function issueBonds(address to, uint256 classId, uint256 amount) private {\\n        uint timestampToCheck = block.timestamp;\\n        (uint lastNonceId, uint createdAt) = debondData.getLastNonceCreated(classId);\\n        createdAt = createdAt == 0 ? BASE_TIMESTAMP : createdAt;\\n        if ((timestampToCheck - createdAt) >= DIFF_TIME_NEW_NONCE) {\\n            createNewNonce(classId, lastNonceId, timestampToCheck);\\n            (uint nonceId,) = debondData.getLastNonceCreated(classId);\\n            bond.issue(to, classId, nonceId, amount);\\n            return;\\n        }\\n\\n        uint tDay = (timestampToCheck - BASE_TIMESTAMP) % DIFF_TIME_NEW_NONCE;\\n        if ((tDay + (timestampToCheck - createdAt)) >= DIFF_TIME_NEW_NONCE) {\\n            createNewNonce(classId, lastNonceId, timestampToCheck);\\n            (uint nonceId,) = debondData.getLastNonceCreated(classId);\\n            bond.issue(to, classId, nonceId, amount);\\n            return;\\n        }\\n    }\\n\\n    function createNewNonce(uint classId, uint lastNonceId, uint creationTimestamp) private {\\n        uint _newNonceId = ++lastNonceId;\\n        (,,, uint period) = debondData.getClassFromId(classId);\\n        bond.createNonce(classId, _newNonceId, creationTimestamp + period, 500);\\n        debondData.updateLastNonce(classId, _newNonceId, creationTimestamp);\\n        //here 500 is liquidity info hard coded for now\\n    }\\n\\n    function interestRate(\\n        uint _purchaseTokenClassId,\\n        uint _debondTokenClassId,\\n        uint _purchaseTokenAmount,\\n        PurchaseMethod purchaseMethod\\n    ) public view returns (uint fixRate, uint floatRate) {\\n        uint purchaseTokenClassId = _purchaseTokenClassId;\\n        uint debondTokenClassId = _debondTokenClassId;\\n        uint purchaseTokenAmount = _purchaseTokenAmount;\\n\\n        uint fixRateSupply = 0;\\n        uint floatRateSupply = 0;\\n\\n        (,IData.InterestRateType interestRateType, address purchaseTokenAddress,) = debondData.getClassFromId(purchaseTokenClassId); // address of the purchase token\\n\\n\\n        // staking collateral for bonds\\n        if (purchaseMethod == PurchaseMethod.Staking) {\\n            fixRateSupply = bond.bondAmountDue(purchaseTokenAddress, IData.InterestRateType.FixedRate);// we get the fix rate bonds supply\\n            floatRateSupply = bond.bondAmountDue(purchaseTokenAddress, IData.InterestRateType.FloatingRate);// we get the float rate bonds supply\\n\\n            // we had the client amount to the according bond balance to calculate interest rate after deposit\\n            if (purchaseTokenAmount > 0 && interestRateType == IData.InterestRateType.FixedRate) {\\n                fixRateSupply += purchaseTokenAmount;\\n            }\\n            if (purchaseTokenAmount > 0 && interestRateType == IData.InterestRateType.FloatingRate) {\\n                floatRateSupply += purchaseTokenAmount;\\n            }\\n\\n        }\\n        // buying Bonds\\n        else if (purchaseMethod == PurchaseMethod.Buying) {\\n\\n            (,,address debondTokenAddress,) = debondData.getClassFromId(debondTokenClassId); // address of D/BIT\\n\\n\\n            uint debondTokenAmount = getDebondTokenAmountFrom(purchaseTokenAddress, purchaseTokenAmount);\\n\\n            fixRateSupply = bond.bondAmountDue(debondTokenAddress, IData.InterestRateType.FixedRate);\\n            floatRateSupply = bond.bondAmountDue(debondTokenAddress, IData.InterestRateType.FloatingRate);\\n\\n            if (interestRateType == IData.InterestRateType.FixedRate) {\\n                fixRateSupply += debondTokenAmount;\\n            }\\n            if (interestRateType == IData.InterestRateType.FloatingRate) {\\n                floatRateSupply += debondTokenAmount;\\n            }\\n        }\\n\\n        if (fixRateSupply == 0 || floatRateSupply == 0) {\\n            fixRate = 2 * BENCHMARK_RATE_DECIMAL_18 / 3;\\n            floatRate = 2 * fixRate;\\n        } else {\\n            int sigmoidCParam = PRBMathSD59x18.inv(3);\\n            uint x = uint(PRBMathSD59x18.div(int(fixRateSupply), int(floatRateSupply + fixRateSupply)));\\n            floatRate = (2 * BENCHMARK_RATE_DECIMAL_18 * uint(PRBMathSD59x18.sigmoid(int(x), sigmoidCParam)) / 1e18);\\n            fixRate = 2 * BENCHMARK_RATE_DECIMAL_18 - floatRate;\\n        }\\n    }\\n\\n    function getDebondTokenAmountFrom(address tokenAddress, uint tokenAmount) public view returns (uint) {\\n        // TODO we need to call oracle to get USDAmount from tokenAddress and tokenAmount\\n        uint USDAmountDecimal8 = tokenAmount; // Here we simulate that 1 token = $1\\n        return USDToDbitToMint(USDAmountDecimal8);\\n\\n    }\\n\\n    function USDToDbitToMint(uint amountUSDDecimal8) public view returns (uint) {\\n        return amountUSDDecimal8;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2f3a3746175efc994158f4ba4e51de17af6cb91826e09ba103129ad2591542e6\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/DebondData.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\n\\nimport './interfaces/IData.sol';\\nimport './libraries/CDP.sol';\\n\\n\\ncontract DebondData is IData {\\n\\n    uint public constant TEST_PERIOD = 0; // 1 min period for tests\\n    uint public constant TWO_MIN_PERIOD = 120; // 2 min period for tests\\n    uint public constant ONE_HOUR_PERIOD = 60*60; // 1 hour period for tests\\n    uint public constant TWO_DAYS_PERIOD = 60*60*24*2; // 1 hour period for tests\\n\\n    uint public constant SIX_M_PERIOD = 0; // 1 min period for tests\\n\\n    struct Class {\\n        uint id;\\n        bool exists;\\n        string symbol;\\n        InterestRateType interestRateType;\\n        address tokenAddress;\\n        uint periodTimestamp;\\n        uint lastNonceIdCreated;\\n        uint lastNonceIdCreatedTimestamp;\\n    }\\n\\n    mapping(uint => Class) public classes; // mapping from classId to class\\n\\n\\n    // data to be exclusively for the front end (for now)\\n    mapping(uint => uint[]) public purchasableClassesCollection;//from a debond class given return purchasable class ids associated\\n    mapping(uint => mapping(uint => bool)) public purchasableClasses; //from a debond class given return purchasable class ids associated\\n    uint[] debondClasses; // return collection of class that client can purchase (debond classes)\\n    uint256[] public classesIds;\\n\\n    constructor(\\n        address DBIT,\\n        address USDC,\\n        address USDT,\\n        address DAI\\n    ) {\\n\\n        addClass(0, \\\"D/BIT\\\", InterestRateType.FixedRate, DBIT, TEST_PERIOD);\\n        addClass(1, \\\"USDC\\\", InterestRateType.FixedRate, USDC, TEST_PERIOD);\\n        addClass(2, \\\"USDT\\\", InterestRateType.FixedRate, USDT, TEST_PERIOD);\\n        addClass(3, \\\"DAI\\\", InterestRateType.FixedRate, DAI, TEST_PERIOD);\\n\\n        addClass(4, \\\"D/BIT\\\", InterestRateType.FloatingRate, DBIT, SIX_M_PERIOD);\\n        addClass(5, \\\"USDC\\\", InterestRateType.FloatingRate, USDC, SIX_M_PERIOD);\\n        addClass(6, \\\"USDT\\\", InterestRateType.FloatingRate, USDT, SIX_M_PERIOD);\\n        addClass(7, \\\"DAI\\\", InterestRateType.FloatingRate, DAI, SIX_M_PERIOD);\\n        addClass(8, \\\"D/BGT\\\", InterestRateType.FixedRate, DBIT, TEST_PERIOD);\\n\\n        debondClasses.push(0);\\n        debondClasses.push(4);\\n\\n        assignClass(0, 1);\\n        assignClass(0, 2);\\n        assignClass(0, 3);\\n        assignClass(4, 5);\\n        assignClass(4, 6);\\n        assignClass(4, 7);\\n\\n    }\\n\\n\\n    /**\\n     * @notice this method should only be called by the governance contract TODO Only Governance\\n     */\\n    function addClass(uint classId, string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp) public override {\\n        Class storage class = classes[classId];\\n        require(!class.exists, \\\"DebondData: cannot add an existing classId\\\");\\n        class.id = classId;\\n        class.exists = true;\\n        class.symbol = symbol;\\n        class.interestRateType = interestRateType;\\n        class.tokenAddress = tokenAddress;\\n        class.periodTimestamp = periodTimestamp;\\n        classesIds.push(classId);\\n        // should maybe add an event\\n    }\\n\\n    // TODO Only Governance\\n    function updatePurchasableClass (uint debondClassId, uint purchaseClassId, bool purchasable) external override {\\n        purchasableClasses[debondClassId][purchaseClassId] = purchasable;\\n    }\\n\\n    function canPurchase(uint debondClassId, uint purchaseClassId) public view returns (bool) {\\n        return purchasableClasses[debondClassId][purchaseClassId];\\n    }\\n\\n    function getClassFromId(\\n        uint classId\\n    ) external view returns (string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp) {\\n        Class storage class = classes[classId];\\n        symbol = class.symbol;\\n        periodTimestamp = class.periodTimestamp;\\n        tokenAddress = class.tokenAddress;\\n        interestRateType = class.interestRateType;\\n        return (symbol, interestRateType, tokenAddress, periodTimestamp);\\n    }\\n\\n    // TODO Only Bank\\n    function getLastNonceCreated(uint classId) external view returns (uint nonceId, uint createdAt) {\\n        Class storage class = classes[classId];\\n        require(class.exists, \\\"Debond Data: class id given not found\\\");\\n        nonceId = class.lastNonceIdCreated;\\n        createdAt = class.lastNonceIdCreatedTimestamp;\\n        return (nonceId, createdAt);\\n    }\\n\\n    // TODO Only Bank\\n    function updateLastNonce(uint classId, uint nonceId, uint createdAt) external {\\n        Class storage class = classes[classId];\\n        require(class.exists, \\\"Debond Data: class id given not found\\\");\\n        class.lastNonceIdCreated = nonceId;\\n        class.lastNonceIdCreatedTimestamp = createdAt;\\n    }\\n\\n    function allDebondClasses() external view returns (uint[] memory) {\\n        return debondClasses;\\n    }\\n\\n    function getPurchasableClasses(uint debondClassId) external view returns (uint[] memory) {\\n        return purchasableClassesCollection[debondClassId];\\n    }\\n\\n    function isPurchasableClass(uint debondClassId, uint purchasableQueryClassId) external view returns (bool) {\\n        return purchasableClasses[debondClassId][purchasableQueryClassId];\\n    }\\n\\n    function assignClass(uint debondClass, uint purchaseClass) private {\\n        purchasableClassesCollection[debondClass].push(purchaseClass);\\n        purchasableClasses[debondClass][purchaseClass] = true;\\n    }\\n\\n    function getAllClassesIds() external view returns (uint[] memory){\\n        return classesIds;\\n    }\\n\\n    function getDebondClasses() external view returns (uint[] memory){\\n        return debondClasses;\\n    }\\n\\n\\n\\n\\n}\\n\",\"keccak256\":\"0xe2eaa1b721ff46cd6e4ac0cc2311cc73e9f864662d8ff13a21f5d3753216b855\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/interfaces/IAPM.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\ninterface IAPM {\\n\\n    function getReserves(address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n\\n    function updateWhenAddLiquidity(\\n        uint _amountA, \\n        uint _amountB,\\n        address _tokenA,\\n        address _tokenB) external;\\n\\n    function updateWhenRemoveLiquidity(\\n        uint amount, \\n        address token) external;\\n\\n    function updateWhenSwap(\\n        uint amountAAdded, \\n        uint amountBWithdrawn,\\n        address _tokenA,\\n        address _tokenB) external;\\n\\n    function swap(uint amount0Out, uint amount1Out,address token0, address token1, address to) external;\\n\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n\\n    function updateTotalReserve(address tokenAddress, uint amount) external;\\n}\\n\",\"keccak256\":\"0x89547d4d02e2d9069e236f9573446a763f1de91cd4cd92c7af3c8b5074846785\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/interfaces/IData.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\ninterface IData {\\n\\n    enum InterestRateType {FixedRate, FloatingRate}\\n\\n    function addClass(uint classId, string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp) external;\\n\\n    function updatePurchasableClass(uint debondClassId, uint purchaseClassId, bool purchasable) external;\\n\\n    function canPurchase(uint debondClassId , uint purchaseClassId) external view returns (bool);\\n\\n    function getClassFromId(uint classId) external view returns(string memory symbol, InterestRateType interestRateType, address tokenAddress, uint periodTimestamp);\\n\\n    function getLastNonceCreated(uint classId) external view returns(uint nonceId, uint createdAt);\\n\\n    function updateLastNonce(uint classId, uint nonceId, uint createdAt) external;\\n}\\n\",\"keccak256\":\"0x1e7a987cf8f11f6c8670ea6136e90af6dcfb718fb1acc03c2380bb02d68519de\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/interfaces/IDebondBond.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\nimport \\\"./IERC3475.sol\\\";\\nimport \\\"./IData.sol\\\";\\n\\n\\ninterface IDebondBond is IERC3475 {\\n\\n    function isActive() external returns (bool);\\n\\n    function bondAmountDue(address tokenAddress, IData.InterestRateType interestRateType) external view returns (uint);\\n\\n    function createNonce(uint256 classId, uint256 nonceId, uint256 maturityTime, uint256 liqT) external;\\n\\n    function createClass(uint256 classId, string memory symbol, IData.InterestRateType interestRateType, address tokenAddress, uint256 periodTimestamp) external;\\n\\n    function classExists(uint256 classId) external view returns (bool);\\n\\n    function nonceExists(uint256 classId, uint256 nonceId) external view returns (bool);\\n\\n    function bondDetails(uint256 classId, uint256 nonceId) external view returns (string memory _symbol, IData.InterestRateType _interestRateType, address _tokenAddress, uint256 _periodTimestamp, uint256 _maturityDate, uint256 _issuanceDate);\\n\\n\\n\\n}\\n\\n\",\"keccak256\":\"0x7a3b976ce5643f7fd1be0fa4ff66f1f8cada9b4a9e8804b64a0684ecbc9dd270\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/interfaces/IDebondToken.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\ninterface IDebondToken is IERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x0e04597f6e8f4042a7a2afe58f3698d0a734a329758b56da51e40e763afc5f2e\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/interfaces/IERC3475.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: MIT\\n\\ninterface IERC3475 {\\n    // WRITE\\n\\n    /**\\n     * @dev allows the transfer of a bond type from an address to another.\\n     * @param from argument is the address of the holder whose balance about to decrees.\\n     * @param to argument is the address of the recipient whose balance is about to increased.\\n     * @param classId is the classId of bond, the first bond class created will be 0, and so on.\\n     * @param nonceId is the nonceId of the given bond class. This param is for distinctions of the issuing conditions of the bond.\\n     * @param amount is the amount of the bond, that will be transferred from \\\"_from\\\" address to \\\"_to\\\" address.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev  allows issuing any number of bond types to an address.\\n     * The calling of this function needs to be restricted to bond issuer contract.\\n     * @param to is the address to which the bond will be issued.\\n     * @param classId is the classId of the bond, the first bond class created will be 0, and so on.\\n     * @param nonceId is the nonceId of the given bond class. This param is for distinctions of the issuing conditions of the bond.\\n     * @param amount is the amount of the bond, that \\\"to\\\" address will receive.\\n     */\\n    function issue(\\n        address to,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev  allows redemption of any number of bond types from an address.\\n     * The calling of this function needs to be restricted to bond issuer contract.\\n     * @param from is the address from which the bond will be redeemed.\\n     * @param classId is the class nonce of bond, the first bond class created will be 0, and so on.\\n     * @param nonceId is the nonce of the given bond class. This param is for distinctions of the issuing conditions of the bond.\\n     * @param amount is the amount of the bond, that \\\"from\\\" address will redeem.\\n     */\\n    function redeem(\\n        address from,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev  allows the transfer of any number of bond types from an address to another.\\n     * The calling of this function needs to be restricted to bond issuer contract.\\n     * @param from argument is the address of the holder whose balance about to decrees.\\n     * @param classId is the class nonce of bond, the first bond class created will be 0, and so on.\\n     * @param nonceId is the nonce of the given bond class. This param is for distinctions of the issuing conditions of the bond.\\n     * @param amount is the amount of the bond, that will be transferred from \\\"_from\\\"address to \\\"_to\\\" address.\\n     */\\n    function burn(\\n        address from,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev Allows spender to withdraw from your account multiple times, up to the amount.\\n     * @notice If this function is called again it overwrites the current allowance with amount.\\n     * @param spender is the address the caller approve for his bonds\\n     * @param classId is the classId nonce of bond, the first bond class created will be 0, and so on.\\n     * @param nonceId is the nonceId of the given bond class. This param is for distinctions of the issuing conditions of the bond.\\n     * @param amount is the amount of the bond that the spender is approved for.\\n     */\\n    function approve(\\n        address spender,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\n     * @dev MUST emit the ApprovalForAll event on success.\\n     * @param operator  Address to add to the set of authorized operators\\n     * @param classId is the classId nonce of bond, the first bond class created will be 0, and so on.\\n     * @param approved  True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalFor(\\n        address operator,\\n        uint256 classId,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @dev Allows spender to withdraw bonds from your account multiple times, up to the amount.\\n     * @notice If this function is called again it overwrites the current allowance with amount.\\n     * @param spender is the address the caller approve for his bonds.\\n     * @param classIds is the list of classIds of bond.\\n     * @param nonceIds is the list of nonceIds of the given bond class.\\n     * @param amounts is the list of amounts of the bond that the spender is approved for.\\n     */\\n    function batchApprove(\\n        address spender,\\n        uint256[] calldata classIds,\\n        uint256[] calldata nonceIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    // READ\\n\\n    /**\\n     * @dev Returns the total supply of the bond in question\\n     */\\n    function totalSupply(uint256 classId, uint256 nonceId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the redeemed supply of the bond in question\\n     */\\n    function redeemedSupply(uint256 classId, uint256 nonceId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the active supply of the bond in question\\n     */\\n    function activeSupply(uint256 classId, uint256 nonceId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the burned supply of the bond in question\\n     */\\n    function burnedSupply(uint256 classId, uint256 nonceId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the balance of the giving bond classId and bond nonce\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 classId,\\n        uint256 nonceId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the symbol of the giving bond classId\\n     */\\n    function symbol(uint256 classId) external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the informations for the class of given classId\\n     * @notice Every bond contract can have their own list of class informations\\n     */\\n    function classInfos(uint256 classId)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns the information description for a given class info\\n     * @notice Every bond contract can have their own list of class informations\\n     */\\n    function classInfoDescription(uint256 classInfo)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @dev Returns the information description for a given nonce info\\n     * @notice Every bond contract can have their own list of nonce informations\\n     */\\n    function nonceInfoDescription(uint256 nonceInfo)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @dev Returns the informations for the nonce of given classId and nonceId\\n     * @notice Every bond contract can have their own list. But the first uint256 in the list MUST be the UTC time code of the issuing time.\\n     */\\n    function nonceInfos(uint256 classId, uint256 nonceId)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev  allows anyone to check if a bond is redeemable.\\n     * @notice the conditions of redemption can be specified with one or several internal functions.\\n     */\\n    function isRedeemable(uint256 classId, uint256 nonceId)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice  Returns the amount which spender is still allowed to withdraw from owner.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender,\\n        uint256 classId,\\n        uint256 nonceId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Queries the approval status of an operator for a given owner.\\n     * @return True if the operator is approved, false if not\\n     */\\n    function isApprovedFor(\\n        address owner,\\n        address operator,\\n        uint256 classId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice MUST trigger when tokens are transferred, including zero value transfers.\\n     */\\n    event Transfer(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice MUST trigger when tokens are issued\\n     */\\n    event Issue(\\n        address indexed _operator,\\n        address indexed _to,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice MUST trigger when tokens are redeemed\\n     */\\n    event Redeem(\\n        address indexed _operator,\\n        address indexed _from,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice MUST trigger when tokens are burned\\n     */\\n    event Burn(\\n        address indexed _operator,\\n        address indexed _from,\\n        uint256 classId,\\n        uint256 nonceId,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev MUST emit when approval for a second party/operator address to manage all bonds from a classId given for an owner address is enabled or disabled (absence of an event assumes disabled).\\n     */\\n    event ApprovalFor(\\n        address indexed _owner,\\n        address indexed _operator,\\n        uint256 classId,\\n        bool _approved\\n    );\\n}\\n\",\"keccak256\":\"0xcc7b271d4501f92e5d9d056bcf6e83865d0f0c2f44c32cb7ce01e6d048cc1961\",\"license\":\"MIT\"},\"contracts/Debond-v0/contracts/libraries/CDP.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n\\nimport \\\"./SafeMath.sol\\\";\\n/**\\n    @dev functions for determining the amount of DBIT to be mint and pricing\\n*/\\nlibrary CDP {\\n    using SafeMath for uint256;\\n\\n    function BondExchangeRate(uint256 _dbitTotalSupply) public pure returns (uint256 amount_bond) {\\n        if (_dbitTotalSupply < 1e5) {\\n            amount_bond = 1 ether;\\n        } else {\\n            uint256 logTotalSupply = SafeMath.ln(_dbitTotalSupply * 1e13);\\n            amount_bond = SafeMath.pow(1.05 * 1 ether, logTotalSupply);\\n        }\\n    }\\n\\n\\n    /**\\n    * @dev convert a given amount of DBIT in USD and trhen this amount of USD in DBIT\\n    * @param _amountToken the amount of token\\n    * @param amountDBIT The amount of DBIT returned\\n    */\\n    function _conversionTokenToDBIT(uint256 _amountToken) internal pure returns (uint256 amountDBIT) {\\n        // This must be done later when the oracle will be implemented\\n        // Convert _amoutToken to USD and calculate how much DBIT we can buy with this amount of USD\\n        // For now we suppose both tokens are tading at 1:1\\n\\n        amountDBIT = _amountToken;\\n    }\\n\\n    /**\\n    * @dev given the amount of tokens, returns the amout of DBIT to mint\\n    * @param _amountToken the amount of token\\n    * @param _dbitTotalSupply the total supply of DBIT\\n    * @param amountDBIT The amount of DBIT to mint\\n    */\\n    function amountOfDBIT(uint256 _amountToken, uint256 _dbitTotalSupply) external pure returns (uint256 amountDBIT) {\\n        require(_amountToken > 0, \\\"Debond: Provide some tokens\\\");\\n\\n        uint256 tokenToDBIT = _conversionTokenToDBIT(_amountToken);\\n        uint256 rate = BondExchangeRate(_dbitTotalSupply);\\n\\n        amountDBIT = tokenToDBIT * rate;\\n    }\\n\\n    function _amountOfDebondToMint(uint256 _dbitIn) internal pure returns (uint256 amountDBIT) {\\n        // todo: mock token contract.\\n        uint256 dbitMaxSupply = 10000;\\n        uint256 dbitTotalSupply = 1000000;\\n\\n        require(_dbitIn > 0, \\\"SigmoidBank/NULL_VALUE\\\");\\n        require(dbitTotalSupply.add(_dbitIn) <= dbitMaxSupply, \\\"insufficient value\\\");\\n        // amount of of DBIT to mint\\n        amountDBIT = _dbitIn * 10;\\n    }\\n\\n\\n    //    function _dbitUSDPrice() internal  returns(uint256) {\\n    //        return 100;\\n    //    }\\n\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'DebondLibrary: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'DebondLibrary: ZERO_ADDRESS');\\n    }\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) internal pure returns (uint256 amountB) {/// use uint?? int256???\\n        require(amountA > 0, 'DebondLibrary: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'DebondLibrary: INSUFFICIENT_LIQUIDITY');\\n        //amountB = amountA.mul(reserveB) / reserveA;\\n        amountB =  amountA * reserveB / reserveA;\\n\\n    }\\n}\\n\\n\",\"keccak256\":\"0xa0a665548c0e4cb67b94b4399f181276fb63feed3a94bfa231c77cda21286f58\",\"license\":\"apache 2.0\"},\"contracts/Debond-v0/contracts/libraries/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\n    error PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\n    error PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\n    error PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\n    error PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\n    error PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\n    error PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\n    error PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\n    error PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\n    error PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\n    error PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\n    error PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\n    error PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\n    error PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\n    error PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\n    error PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\n    error PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\n    error PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\n    error PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\n    error PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\n    error PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\n    error PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\n    error PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\n    error PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\n    error PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\n    error PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\n    error PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\n    error PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\n    error PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\n    error PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\n    error PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n    78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n    unchecked {\\n        // Start from 0.5 in the 192.64-bit fixed-point format.\\n        result = 0x800000000000000000000000000000000000000000000000;\\n\\n        // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n        // because the initial result is 2^191 and all magic factors are less than 2^65.\\n        if (x & 0x8000000000000000 > 0) {\\n            result = (result * 0x16A09E667F3BCC909) >> 64;\\n        }\\n        if (x & 0x4000000000000000 > 0) {\\n            result = (result * 0x1306FE0A31B7152DF) >> 64;\\n        }\\n        if (x & 0x2000000000000000 > 0) {\\n            result = (result * 0x1172B83C7D517ADCE) >> 64;\\n        }\\n        if (x & 0x1000000000000000 > 0) {\\n            result = (result * 0x10B5586CF9890F62A) >> 64;\\n        }\\n        if (x & 0x800000000000000 > 0) {\\n            result = (result * 0x1059B0D31585743AE) >> 64;\\n        }\\n        if (x & 0x400000000000000 > 0) {\\n            result = (result * 0x102C9A3E778060EE7) >> 64;\\n        }\\n        if (x & 0x200000000000000 > 0) {\\n            result = (result * 0x10163DA9FB33356D8) >> 64;\\n        }\\n        if (x & 0x100000000000000 > 0) {\\n            result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n        }\\n        if (x & 0x80000000000000 > 0) {\\n            result = (result * 0x10058C86DA1C09EA2) >> 64;\\n        }\\n        if (x & 0x40000000000000 > 0) {\\n            result = (result * 0x1002C605E2E8CEC50) >> 64;\\n        }\\n        if (x & 0x20000000000000 > 0) {\\n            result = (result * 0x100162F3904051FA1) >> 64;\\n        }\\n        if (x & 0x10000000000000 > 0) {\\n            result = (result * 0x1000B175EFFDC76BA) >> 64;\\n        }\\n        if (x & 0x8000000000000 > 0) {\\n            result = (result * 0x100058BA01FB9F96D) >> 64;\\n        }\\n        if (x & 0x4000000000000 > 0) {\\n            result = (result * 0x10002C5CC37DA9492) >> 64;\\n        }\\n        if (x & 0x2000000000000 > 0) {\\n            result = (result * 0x1000162E525EE0547) >> 64;\\n        }\\n        if (x & 0x1000000000000 > 0) {\\n            result = (result * 0x10000B17255775C04) >> 64;\\n        }\\n        if (x & 0x800000000000 > 0) {\\n            result = (result * 0x1000058B91B5BC9AE) >> 64;\\n        }\\n        if (x & 0x400000000000 > 0) {\\n            result = (result * 0x100002C5C89D5EC6D) >> 64;\\n        }\\n        if (x & 0x200000000000 > 0) {\\n            result = (result * 0x10000162E43F4F831) >> 64;\\n        }\\n        if (x & 0x100000000000 > 0) {\\n            result = (result * 0x100000B1721BCFC9A) >> 64;\\n        }\\n        if (x & 0x80000000000 > 0) {\\n            result = (result * 0x10000058B90CF1E6E) >> 64;\\n        }\\n        if (x & 0x40000000000 > 0) {\\n            result = (result * 0x1000002C5C863B73F) >> 64;\\n        }\\n        if (x & 0x20000000000 > 0) {\\n            result = (result * 0x100000162E430E5A2) >> 64;\\n        }\\n        if (x & 0x10000000000 > 0) {\\n            result = (result * 0x1000000B172183551) >> 64;\\n        }\\n        if (x & 0x8000000000 > 0) {\\n            result = (result * 0x100000058B90C0B49) >> 64;\\n        }\\n        if (x & 0x4000000000 > 0) {\\n            result = (result * 0x10000002C5C8601CC) >> 64;\\n        }\\n        if (x & 0x2000000000 > 0) {\\n            result = (result * 0x1000000162E42FFF0) >> 64;\\n        }\\n        if (x & 0x1000000000 > 0) {\\n            result = (result * 0x10000000B17217FBB) >> 64;\\n        }\\n        if (x & 0x800000000 > 0) {\\n            result = (result * 0x1000000058B90BFCE) >> 64;\\n        }\\n        if (x & 0x400000000 > 0) {\\n            result = (result * 0x100000002C5C85FE3) >> 64;\\n        }\\n        if (x & 0x200000000 > 0) {\\n            result = (result * 0x10000000162E42FF1) >> 64;\\n        }\\n        if (x & 0x100000000 > 0) {\\n            result = (result * 0x100000000B17217F8) >> 64;\\n        }\\n        if (x & 0x80000000 > 0) {\\n            result = (result * 0x10000000058B90BFC) >> 64;\\n        }\\n        if (x & 0x40000000 > 0) {\\n            result = (result * 0x1000000002C5C85FE) >> 64;\\n        }\\n        if (x & 0x20000000 > 0) {\\n            result = (result * 0x100000000162E42FF) >> 64;\\n        }\\n        if (x & 0x10000000 > 0) {\\n            result = (result * 0x1000000000B17217F) >> 64;\\n        }\\n        if (x & 0x8000000 > 0) {\\n            result = (result * 0x100000000058B90C0) >> 64;\\n        }\\n        if (x & 0x4000000 > 0) {\\n            result = (result * 0x10000000002C5C860) >> 64;\\n        }\\n        if (x & 0x2000000 > 0) {\\n            result = (result * 0x1000000000162E430) >> 64;\\n        }\\n        if (x & 0x1000000 > 0) {\\n            result = (result * 0x10000000000B17218) >> 64;\\n        }\\n        if (x & 0x800000 > 0) {\\n            result = (result * 0x1000000000058B90C) >> 64;\\n        }\\n        if (x & 0x400000 > 0) {\\n            result = (result * 0x100000000002C5C86) >> 64;\\n        }\\n        if (x & 0x200000 > 0) {\\n            result = (result * 0x10000000000162E43) >> 64;\\n        }\\n        if (x & 0x100000 > 0) {\\n            result = (result * 0x100000000000B1721) >> 64;\\n        }\\n        if (x & 0x80000 > 0) {\\n            result = (result * 0x10000000000058B91) >> 64;\\n        }\\n        if (x & 0x40000 > 0) {\\n            result = (result * 0x1000000000002C5C8) >> 64;\\n        }\\n        if (x & 0x20000 > 0) {\\n            result = (result * 0x100000000000162E4) >> 64;\\n        }\\n        if (x & 0x10000 > 0) {\\n            result = (result * 0x1000000000000B172) >> 64;\\n        }\\n        if (x & 0x8000 > 0) {\\n            result = (result * 0x100000000000058B9) >> 64;\\n        }\\n        if (x & 0x4000 > 0) {\\n            result = (result * 0x10000000000002C5D) >> 64;\\n        }\\n        if (x & 0x2000 > 0) {\\n            result = (result * 0x1000000000000162E) >> 64;\\n        }\\n        if (x & 0x1000 > 0) {\\n            result = (result * 0x10000000000000B17) >> 64;\\n        }\\n        if (x & 0x800 > 0) {\\n            result = (result * 0x1000000000000058C) >> 64;\\n        }\\n        if (x & 0x400 > 0) {\\n            result = (result * 0x100000000000002C6) >> 64;\\n        }\\n        if (x & 0x200 > 0) {\\n            result = (result * 0x10000000000000163) >> 64;\\n        }\\n        if (x & 0x100 > 0) {\\n            result = (result * 0x100000000000000B1) >> 64;\\n        }\\n        if (x & 0x80 > 0) {\\n            result = (result * 0x10000000000000059) >> 64;\\n        }\\n        if (x & 0x40 > 0) {\\n            result = (result * 0x1000000000000002C) >> 64;\\n        }\\n        if (x & 0x20 > 0) {\\n            result = (result * 0x10000000000000016) >> 64;\\n        }\\n        if (x & 0x10 > 0) {\\n            result = (result * 0x1000000000000000B) >> 64;\\n        }\\n        if (x & 0x8 > 0) {\\n            result = (result * 0x10000000000000006) >> 64;\\n        }\\n        if (x & 0x4 > 0) {\\n            result = (result * 0x10000000000000003) >> 64;\\n        }\\n        if (x & 0x2 > 0) {\\n            result = (result * 0x10000000000000001) >> 64;\\n        }\\n        if (x & 0x1 > 0) {\\n            result = (result * 0x10000000000000001) >> 64;\\n        }\\n\\n        // We're doing two things at the same time:\\n        //\\n        //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n        //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n        //      rather than 192.\\n        //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n        //\\n        // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n        result *= SCALE;\\n        result >>= (191 - (x >> 64));\\n    }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n        unchecked {\\n            result = prod0 / denominator;\\n        }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n        // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n        // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n    unchecked {\\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\\n        uint256 lpotdod = denominator & (~denominator + 1);\\n        assembly {\\n        // Divide denominator by lpotdod.\\n            denominator := div(denominator, lpotdod)\\n\\n        // Divide [prod1 prod0] by lpotdod.\\n            prod0 := div(prod0, lpotdod)\\n\\n        // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n            lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n        }\\n\\n        // Shift in bits from prod1 into prod0.\\n        prod0 |= prod1 * lpotdod;\\n\\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n        // four bits. That is, denominator * inv = 1 mod 2^4.\\n        uint256 inverse = (3 * denominator) ^ 2;\\n\\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n        // in modular arithmetic, doubling the correct bits in each step.\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inverse;\\n        return result;\\n    }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n        unchecked {\\n            result = (prod0 / SCALE) + roundUpUnit;\\n            return result;\\n        }\\n        }\\n\\n        assembly {\\n            result := add(\\n            mul(\\n            or(\\n            div(sub(prod0, remainder), SCALE_LPOTD),\\n            mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n            ),\\n            SCALE_INVERSE\\n            ),\\n            roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n    unchecked {\\n        ax = x < 0 ? uint256(-x) : uint256(x);\\n        ay = y < 0 ? uint256(-y) : uint256(y);\\n        ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n    }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n    unchecked {\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1; // Seven iterations should be enough\\n        uint256 roundedDownResult = x / result;\\n        return result >= roundedDownResult ? roundedDownResult : result;\\n    }\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x27a8091b4e19453e21a0daa713163cbea3fe1065c2bf719c18bf404189ca73af\",\"license\":\"Unlicense\"},\"contracts/Debond-v0/contracts/libraries/PRBMathSD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n    57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n    57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n    -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n    -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n    unchecked {\\n        if (x == MIN_SD59x18) {\\n            revert PRBMathSD59x18__AbsInputTooSmall();\\n        }\\n        result = x < 0 ? -x : x;\\n    }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n    unchecked {\\n        int256 sum = (x >> 1) + (y >> 1);\\n        if (sum < 0) {\\n            // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n            // right rounds down to infinity.\\n            assembly {\\n                result := add(sum, and(or(x, y), 1))\\n            }\\n        } else {\\n            // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n            // remainder gets truncated twice.\\n            result = sum + (x & y & 1);\\n        }\\n    }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n    unchecked {\\n        int256 remainder = x % SCALE;\\n        if (remainder == 0) {\\n            result = x;\\n        } else {\\n            // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n            result = x - remainder;\\n            if (x > 0) {\\n                result += SCALE;\\n            }\\n        }\\n    }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n    unchecked {\\n        ax = x < 0 ? uint256(-x) : uint256(x);\\n        ay = y < 0 ? uint256(-y) : uint256(y);\\n    }\\n\\n        // Compute the absolute value of (x*SCALE)\\u00f7y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n    unchecked {\\n        int256 doubleScaleProduct = x * LOG2_E;\\n        result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n    }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n        unchecked {\\n            result = 1e36 / exp2(-x);\\n        }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n            // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n            result = int256(PRBMath.exp2(x192x64));\\n        }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n    unchecked {\\n        int256 remainder = x % SCALE;\\n        if (remainder == 0) {\\n            result = x;\\n        } else {\\n            // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n            result = x - remainder;\\n            if (x < 0) {\\n                result -= SCALE;\\n            }\\n        }\\n    }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n    unchecked {\\n        result = x % SCALE;\\n    }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n    unchecked {\\n        if (x < MIN_SD59x18 / SCALE) {\\n            revert PRBMathSD59x18__FromIntUnderflow(x);\\n        }\\n        if (x > MAX_SD59x18 / SCALE) {\\n            revert PRBMathSD59x18__FromIntOverflow(x);\\n        }\\n        result = x * SCALE;\\n    }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n    unchecked {\\n        // Checking for overflow this way is faster than letting Solidity do it.\\n        int256 xy = x * y;\\n        if (xy / x != y) {\\n            revert PRBMathSD59x18__GmOverflow(x, y);\\n        }\\n\\n        // The product cannot be negative.\\n        if (xy < 0) {\\n            revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n        }\\n\\n        // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n        // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n        result = int256(PRBMath.sqrt(uint256(xy)));\\n    }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n    unchecked {\\n        // 1e36 is SCALE * SCALE.\\n        result = 1e36 / x;\\n    }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n    unchecked {\\n        result = (log2(x) * SCALE) / LOG2_E;\\n    }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n        unchecked {\\n            result = (log2(x) * SCALE) / 3_321928094887362347;\\n        }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n    unchecked {\\n        // This works because log2(x) = -log2(1/x).\\n        int256 sign;\\n        if (x >= SCALE) {\\n            sign = 1;\\n        } else {\\n            sign = -1;\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            assembly {\\n                x := div(1000000000000000000000000000000000000, x)\\n            }\\n        }\\n\\n        // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n        uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n        // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n        // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n        result = int256(n) * SCALE;\\n\\n        // This is y = x * 2^(-n).\\n        int256 y = x >> n;\\n\\n        // If y = 1, the fractional part is zero.\\n        if (y == SCALE) {\\n            return result * sign;\\n        }\\n\\n        // Calculate the fractional part via the iterative approximation.\\n        // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n        for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n            y = (y * y) / SCALE;\\n\\n            // Is y^2 > 2 and so in the range [2,4)?\\n            if (y >= 2 * SCALE) {\\n                // Add the 2^(-m) factor to the logarithm.\\n                result += delta;\\n\\n                // Corresponds to z/2 on Wikipedia.\\n                y >>= 1;\\n            }\\n        }\\n        result *= sign;\\n    }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n    unchecked {\\n        uint256 ax;\\n        uint256 ay;\\n        ax = x < 0 ? uint256(-x) : uint256(x);\\n        ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n        uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__MulOverflow(rAbs);\\n        }\\n\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n    unchecked {\\n        if (x < 0) {\\n            revert PRBMathSD59x18__SqrtNegativeInput(x);\\n        }\\n        if (x > MAX_SD59x18 / SCALE) {\\n            revert PRBMathSD59x18__SqrtOverflow(x);\\n        }\\n        // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n        // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n        result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n    }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n    unchecked {\\n        result = x / SCALE;\\n    }\\n    }\\n\\n\\n\\n    function sigmoid(int256 _x , int256 _c) internal pure returns (int256 result) {\\n        if(_x == 0) {\\n            result = 0;\\n        }\\n        else if(_x == 1) {\\n            result = 1;\\n        }\\n        else{\\n            int256 temp1;\\n            int256 temp2;\\n\\n            assembly{\\n                temp1 := sub(_c,1000000000000000000)\\n                temp2 := sub(_x,1000000000000000000)\\n            }\\n\\n            temp1 = mul(temp1, _x);\\n            temp2 = mul(temp2 ,_c);\\n\\n            temp1 = inv(temp1);\\n            temp2 = inv(temp2);\\n\\n            temp1 = exp2(temp1); //because temp1 = exp2(mul(temp2,log2(2)), with log2(2)=1\\n            temp2 = exp2(temp2);\\n\\n            result = div(temp1, temp1 + temp2);\\n        }\\n    }\\n\\n\\n    function fib(uint n) public pure returns(uint a) {\\n        if (n == 0) {\\n            return 0;\\n        }\\n        uint h = n / 2;\\n        uint mask = 1;\\n        // find highest set bit in n\\n        while(mask <= h) {\\n            mask <<= 1;\\n        }\\n        mask >>= 1;\\n        a = 1;\\n        uint b = 1;\\n        uint c;\\n        while(mask > 0) {\\n            c = a * a+b * b;\\n            if (n & mask > 0) {\\n                b = b * (b + 2 * a);\\n                a = c;\\n            } else {\\n                a = a * (2 * b - a);\\n                b = c;\\n            }\\n            mask >>= 1;\\n        }\\n        return a;\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0x20c02f70266565982db27cbd65b97f5beecf126ef5d5b03c26a1cdfd39cb2890\",\"license\":\"Unlicense\"},\"contracts/Debond-v0/contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n// SPDX-License-Identifier: apache 2.0\\n/*\\n    Copyright 2020 Sigmoid Foundation <info@SGM.finance>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\n// DappHub (https://github.com/dapphub/ds-math)\\nlibrary SafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul0(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    function ln(uint256 x) public pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * 1e18) / 1_442695040888963407;\\n        }\\n    }\\n\\n    function pow(uint256 x, uint256 y) public pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? 1e18 : uint256(0);\\n        } else {\\n            result = exp2(mul2(log2(x), y));\\n        }\\n    }\\n\\n    function mul2(uint256 x, uint256 y) public pure returns (uint256 result) {\\n        result = mulDivFixedPoint(x, y);\\n    }\\n\\n    function mulDivFixedPoint(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= 1e18) {\\n            revert();\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        uint256 SCALE = 1e18;\\n        uint256 SCALE_LPOTD = 262144;\\n        uint256 SCALE_INVERSE = 78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / 1e18) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(\\n                            sub(prod1, gt(remainder, prod0)),\\n                            add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1)\\n                        )\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    function exp2(uint256 x) public pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert();\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / 1e18;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = exp2p(x192x64);\\n        }\\n    }\\n\\n    function log2(uint256 x) public pure returns (uint256 result) {\\n        if (x < 1e18) {\\n            revert();\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = mostSignificantBit(x / 1e18);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * 1e18;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == 1e18) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = 5e17; delta > 0; delta >>= 1) {\\n                y = (y * y) / 1e18;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * 1e18) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    function exp2p(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= 1e18;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3202d24172ce737d2593f648857b4a4ba666d5e7f1a82b80203331d46cf2cac5\",\"license\":\"apache 2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002a2b38038062002a2b8339810160408190526200003491620000a5565b600080546001600160a01b039586166001600160a01b031991821617909155600180549486169482169490941790935560028054928516928416929092179091556003805491909316911617905562000102565b80516001600160a01b0381168114620000a057600080fd5b919050565b60008060008060808587031215620000bc57600080fd5b620000c78562000088565b9350620000d76020860162000088565b9250620000e76040860162000088565b9150620000f76060860162000088565b905092959194509250565b61291980620001126000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b7aae6b711610066578063b7aae6b714610127578063caa47d601461013c578063d58d45a814610147578063f71a7c9b1461015a578063fe0291561461016d57600080fd5b80630af1be38146100a35780633ff2f59d146100c757806386818f26146100d15780639262b1af146100f15780639ed206f8146100ff575b600080fd5b6100b46100b13660046121e0565b90565b6040519081526020015b60405180910390f35b6100b46201518081565b6100e46100df3660046121f9565b610181565b6040516100be919061227c565b6100b466b1a2bc2ec5000081565b61011261010d3660046122d0565b6103b5565b604080519283526020830191909152016100be565b61013a610135366004612311565b610859565b005b6100b463621d53f081565b61013a61015536600461235e565b610da0565b6100b461016836600461239f565b611033565b61013a61017b3660046123cb565b50505050565b60005460405163d06ca61f60e01b81526060916001600160a01b03169063d06ca61f906101b690889087908790600401612411565b600060405180830381865afa1580156101d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101fb91908101906124b0565b905083816001835161020d9190612560565b8151811061021d5761021d612577565b6020026020010151101561028c5760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b60648201526084015b60405180910390fd5b8282600081811061029f5761029f612577565b90506020020160208101906102b4919061258d565b6001600160a01b03166323b872dd3360008054906101000a90046001600160a01b0316846000815181106102ea576102ea612577565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d91906125aa565b506103ad8184848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525033925061103b915050565b949350505050565b6001546040516305d42cc560e31b815260048101869052600091829187918791879185918291829182916001600160a01b031690632ea1662890602401600060405180830381865afa15801561040f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104379190810190612658565b509093509150600190508a6001811115610453576104536126c3565b036105ae57600254604051630572c95f60e31b81526001600160a01b0390911690632b964af89061048b9084906000906004016126d9565b602060405180830381865afa1580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc9190612714565b600254604051630572c95f60e31b81529195506001600160a01b031690632b964af8906105009084906001906004016126d9565b602060405180830381865afa15801561051d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105419190612714565b925060008511801561056457506000826001811115610562576105626126c3565b145b1561057657610573858561272d565b93505b60008511801561059757506001826001811115610595576105956126c3565b145b156105a9576105a6858461272d565b92505b610785565b60008a60018111156105c2576105c26126c3565b03610785576001546040516305d42cc560e31b8152600481018890526000916001600160a01b031690632ea1662890602401600060405180830381865afa158015610611573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106399190810190612658565b5092505050600061064a8388611033565b600254604051630572c95f60e31b81529192506001600160a01b031690632b964af89061067e9085906000906004016126d9565b602060405180830381865afa15801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf9190612714565b600254604051630572c95f60e31b81529197506001600160a01b031690632b964af8906106f39085906001906004016126d9565b602060405180830381865afa158015610710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107349190612714565b9450600084600181111561074a5761074a6126c3565b0361075c57610759818761272d565b95505b6001846001811115610770576107706126c3565b036107825761077f818661272d565b94505b50505b831580610790575082155b156107c75760036107a966b1a2bc2ec500006002612745565b6107b3919061277a565b98506107c0896002612745565b9750610849565b60006107d36003611161565b905060006107ea866107e5818861272d565b611188565b9050670de0b6b3a76400006107ff828461125a565b61081166b1a2bc2ec500006002612745565b61081b9190612745565b610825919061277a565b99508961083a66b1a2bc2ec500006002612745565b6108449190612560565b9a5050505b5050505050505094509492505050565b6001546040516387ee5f4160e01b8152600481018690526024810187905286918691869186916001600160a01b03909116906387ee5f4190604401602060405180830381865afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d591906125aa565b6109145760405162461bcd60e51b815260206004820152601060248201526f14185a5c881b9bdd08105b1b1bddd95960821b6044820152606401610283565b6001546040516305d42cc560e31b8152600481018690526000916001600160a01b031690632ea1662890602401600060405180830381865afa15801561095e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109869190810190612658565b506001546040516305d42cc560e31b815260048101899052919450600093508392506001600160a01b031690632ea1662890602401600060405180830381865afa1580156109d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a009190810190612658565b5092509250506000610a0f8690565b6000546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018990529192508516906323b872dd906064016020604051808303816000875af1158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e91906125aa565b506000546001600160a01b03808416916340c10f199116610ab0846002612745565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610af657600080fd5b505af1158015610b0a573d6000803e3d6000fd5b5050600054604051633b730df160e01b8152600481018a9052602481018590526001600160a01b03888116604483015286811660648301529091169250633b730df19150608401600060405180830381600087803b158015610b6b57600080fd5b505af1158015610b7f573d6000803e3d6000fd5b50505050600080610b928a8a8a8e6103b5565b909250905060018b6001811115610bab57610bab6126c3565b03610c9857610bbb338b8a6112e7565b6000805460405163354aedbd60e21b81526001600160a01b03898116600483015287811660248301528392169063d52bb6f4906044016040805180830381865afa158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c31919061278e565b915091506000610c428b8484611599565b9050600080896001811115610c5957610c596126c3565b14610c645784610c66565b855b9050610c8f338e670de0b6b3a7640000610c808587612745565b610c8a919061277a565b6112e7565b50505050610d8f565b60008b6001811115610cac57610cac6126c3565b03610d8f576000805460405163354aedbd60e21b81526001600160a01b03898116600483015287811660248301528392169063d52bb6f4906044016040805180830381865afa158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d27919061278e565b915091506000610d388b8484611599565b9050600080896001811115610d4f57610d4f6126c3565b14610d5a5784610d5c565b855b9050610d8a338e670de0b6b3a7640000610d768587612745565b610d80919061277a565b610c8a908661272d565b505050505b505050505050505050505050505050565b60025460405163ea2092f360e01b81526001600160a01b039091169063ea2092f390610dd69033908790879087906004016127b2565b600060405180830381600087803b158015610df057600080fd5b505af1158015610e04573d6000803e3d6000fd5b50506001546040516305d42cc560e31b815260048101879052600093508392506001600160a01b0390911690632ea1662890602401600060405180830381865afa158015610e56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e7e9190810190612658565b50909350915060009050826001811115610e9a57610e9a6126c3565b036110155760025460405163b405254760e01b815260048101879052602481018690526000916001600160a01b03169063b405254790604401600060405180830381865afa158015610ef0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f1891908101906127d8565b95505050505050804211610f2b57600080fd5b6000546040516323b872dd60e01b81526001600160a01b03918216600482015233602482015260448101869052908316906323b872dd906064016020604051808303816000875af1158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa891906125aa565b50600054604051637921709360e01b81526001600160a01b0384811660048301526024820187905290911690637921709390604401600060405180830381600087803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b505050505061102c565b6001826001811115611029576110296126c3565b50505b5050505050565b805b92915050565b60005b6001835161104c9190612560565b81101561017b5760008084838151811061106857611068612577565b60200260200101518584600161107e919061272d565b8151811061108e5761108e612577565b6020026020010151915091506000868460016110aa919061272d565b815181106110ba576110ba612577565b60209081029190910101516000805460405163755c86d360e11b815260048101839052602481018490526001600160a01b038781166044830152868116606483015289811660848301529394509192849291169063eab90da69060a401600060405180830381600087803b15801561113157600080fd5b505af1158015611145573d6000803e3d6000fd5b505050505050505050808061115990612859565b91505061103e565b6000816ec097ce7bc90715b34b9f10000000008161118157611181612764565b0592915050565b6000600160ff1b83148061119f5750600160ff1b82145b156111bd5760405163b3c754a360e01b815260040160405180910390fd5b600080600085126111ce57846111d3565b846000035b9150600084126111e357836111e8565b836000035b905060006111ff83670de0b6b3a764000084611674565b90506001600160ff1b0381111561122c57604051637cb4bef560e01b815260048101829052602401610283565b600019808713908613808218600114611245578261124e565b61124e83612872565b98975050505050505050565b60008260000361126c57506000611035565b8260010361127c57506001611035565b670de0b6b3a763ffff198083019084016112968286611747565b91506112a28185611747565b90506112ad82611161565b91506112b881611161565b90506112c382611809565b91506112ce81611809565b90506112de826107e5838261288e565b95945050505050565b600154604051638a38e41960e01b815260048101849052429160009182916001600160a01b031690638a38e419906024016040805180830381865afa158015611334573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611358919061278e565b915091508060001461136a5780611370565b63621d53f05b9050620151806113808285612560565b106114705761139085838561189a565b600154604051638a38e41960e01b8152600481018790526000916001600160a01b031690638a38e419906024016040805180830381865afa1580156113d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fd919061278e565b506002546040516347401a9360e01b81529192506001600160a01b0316906347401a9390611435908a908a9086908b906004016127b2565b600060405180830381600087803b15801561144f57600080fd5b505af1158015611463573d6000803e3d6000fd5b5050505050505050505050565b60006201518061148463621d53f086612560565b61148e91906128cf565b90506201518061149e8386612560565b6114a8908361272d565b10611029576114b886848661189a565b600154604051638a38e41960e01b8152600481018890526000916001600160a01b031690638a38e419906024016040805180830381865afa158015611501573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611525919061278e565b506002546040516347401a9360e01b81529192506001600160a01b0316906347401a939061155d908b908b9086908c906004016127b2565b600060405180830381600087803b15801561157757600080fd5b505af115801561158b573d6000803e3d6000fd5b505050505050505050505050565b60008084116115f55760405162461bcd60e51b815260206004820152602260248201527f4465626f6e644c6962726172793a20494e53554646494349454e545f414d4f55604482015261139560f21b6064820152608401610283565b6000831180156116055750600082115b61165f5760405162461bcd60e51b815260206004820152602560248201527f4465626f6e644c6962726172793a20494e53554646494349454e545f4c495155604482015264494449545960d81b6064820152608401610283565b8261166a8386612745565b6103ad919061277a565b60008080600019858709858702925082811083820303915050806000036116ae578382816116a4576116a4612764565b0492505050611740565b8381106116d857604051631dcf306360e21b81526004810182905260248101859052604401610283565b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b6000600160ff1b83148061175e5750600160ff1b82145b1561177c57604051630d01a11b60e21b815260040160405180910390fd5b6000806000851261178d5784611792565b846000035b9150600084126117a257836117a7565b836000035b905060006117b58383611a1e565b90506001600160ff1b038111156117e25760405163bf79e8d960e01b815260048101829052602401610283565b6000198087139086138082186001146117fb578261124e565b505060000395945050505050565b6000808212156118565768033dd1780914b971141982121561182d57506000919050565b61183982600003611809565b6ec097ce7bc90715b34b9f10000000008161118157611181612764565b680a688906bd8b00000082126118825760405163e69458f960e01b815260048101839052602401610283565b670de0b6b3a7640000604083901b0461174081611ae4565b60006118a583612859565b6001546040516305d42cc560e31b8152600481018790529194508492506000916001600160a01b0390911690632ea1662890602401600060405180830381865afa1580156118f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261191f9190810190612658565b6002549094506001600160a01b0316925063d23a95de915087905084611945858861272d565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526101f46064820152608401600060405180830381600087803b15801561199357600080fd5b505af11580156119a7573d6000803e3d6000fd5b505060015460405163c60e219f60e01b81526004810189905260248101869052604481018790526001600160a01b03909116925063c60e219f9150606401600060405180830381600087803b1580156119ff57600080fd5b505af1158015611a13573d6000803e3d6000fd5b505050505050505050565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110611a625760405163698d9a0160e11b815260048101829052602401610283565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff8211905082600003611aa05780670de0b6b3a7640000850401945050505050611035565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b678000000000000000821615611b085768016a09e667f3bcc9090260401c5b674000000000000000821615611b27576801306fe0a31b7152df0260401c5b672000000000000000821615611b46576801172b83c7d517adce0260401c5b671000000000000000821615611b655768010b5586cf9890f62a0260401c5b670800000000000000821615611b84576801059b0d31585743ae0260401c5b670400000000000000821615611ba357680102c9a3e778060ee70260401c5b670200000000000000821615611bc25768010163da9fb33356d80260401c5b670100000000000000821615611be157680100b1afa5abcbed610260401c5b6680000000000000821615611bff5768010058c86da1c09ea20260401c5b6640000000000000821615611c1d576801002c605e2e8cec500260401c5b6620000000000000821615611c3b57680100162f3904051fa10260401c5b6610000000000000821615611c59576801000b175effdc76ba0260401c5b6608000000000000821615611c7757680100058ba01fb9f96d0260401c5b6604000000000000821615611c955768010002c5cc37da94920260401c5b6602000000000000821615611cb3576801000162e525ee05470260401c5b6601000000000000821615611cd15768010000b17255775c040260401c5b65800000000000821615611cee576801000058b91b5bc9ae0260401c5b65400000000000821615611d0b57680100002c5c89d5ec6d0260401c5b65200000000000821615611d285768010000162e43f4f8310260401c5b65100000000000821615611d4557680100000b1721bcfc9a0260401c5b65080000000000821615611d625768010000058b90cf1e6e0260401c5b65040000000000821615611d7f576801000002c5c863b73f0260401c5b65020000000000821615611d9c57680100000162e430e5a20260401c5b65010000000000821615611db9576801000000b1721835510260401c5b648000000000821615611dd557680100000058b90c0b490260401c5b644000000000821615611df15768010000002c5c8601cc0260401c5b642000000000821615611e0d576801000000162e42fff00260401c5b641000000000821615611e295768010000000b17217fbb0260401c5b640800000000821615611e45576801000000058b90bfce0260401c5b640400000000821615611e6157680100000002c5c85fe30260401c5b640200000000821615611e7d5768010000000162e42ff10260401c5b640100000000821615611e9957680100000000b17217f80260401c5b6380000000821615611eb45768010000000058b90bfc0260401c5b6340000000821615611ecf576801000000002c5c85fe0260401c5b6320000000821615611eea57680100000000162e42ff0260401c5b6310000000821615611f05576801000000000b17217f0260401c5b6308000000821615611f2057680100000000058b90c00260401c5b6304000000821615611f3b5768010000000002c5c8600260401c5b6302000000821615611f56576801000000000162e4300260401c5b6301000000821615611f715768010000000000b172180260401c5b62800000821615611f8b576801000000000058b90c0260401c5b62400000821615611fa557680100000000002c5c860260401c5b62200000821615611fbf5768010000000000162e430260401c5b62100000821615611fd957680100000000000b17210260401c5b62080000821615611ff35768010000000000058b910260401c5b6204000082161561200d576801000000000002c5c80260401c5b6202000082161561202757680100000000000162e40260401c5b62010000821615612041576801000000000000b1720260401c5b61800082161561205a57680100000000000058b90260401c5b6140008216156120735768010000000000002c5d0260401c5b61200082161561208c576801000000000000162e0260401c5b6110008216156120a55768010000000000000b170260401c5b6108008216156120be576801000000000000058c0260401c5b6104008216156120d757680100000000000002c60260401c5b6102008216156120f057680100000000000001630260401c5b61010082161561210957680100000000000000b10260401c5b608082161561212157680100000000000000590260401c5b6040821615612139576801000000000000002c0260401c5b602082161561215157680100000000000000160260401c5b6010821615612169576801000000000000000b0260401c5b600882161561218157680100000000000000060260401c5b600482161561219957680100000000000000030260401c5b60028216156121b157680100000000000000010260401c5b60018216156121c957680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b6000602082840312156121f257600080fd5b5035919050565b6000806000806060858703121561220f57600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561223557600080fd5b818701915087601f83011261224957600080fd5b81358181111561225857600080fd5b8860208260051b850101111561226d57600080fd5b95989497505060200194505050565b6020808252825182820181905260009190848201906040850190845b818110156122b457835183529284019291840191600101612298565b50909695505050505050565b600281106122cd57600080fd5b50565b600080600080608085870312156122e657600080fd5b8435935060208501359250604085013591506060850135612306816122c0565b939692955090935050565b600080600080600060a0868803121561232957600080fd5b853594506020860135935060408601359250606086013591506080860135612350816122c0565b809150509295509295909350565b60008060006060848603121561237357600080fd5b505081359360208301359350604090920135919050565b6001600160a01b03811681146122cd57600080fd5b600080604083850312156123b257600080fd5b82356123bd8161238a565b946020939093013593505050565b600080600080608085870312156123e157600080fd5b84356123ec8161238a565b935060208501356123fc8161238a565b93969395505050506040820135916060013590565b83815260406020808301829052908201839052600090849060608401835b8681101561245d5783356124428161238a565b6001600160a01b03168252928201929082019060010161242f565b50979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156124a8576124a8612469565b604052919050565b600060208083850312156124c357600080fd5b825167ffffffffffffffff808211156124db57600080fd5b818501915085601f8301126124ef57600080fd5b81518181111561250157612501612469565b8060051b915061251284830161247f565b818152918301840191848101908884111561252c57600080fd5b938501935b8385101561124e57845182529385019390850190612531565b634e487b7160e01b600052601160045260246000fd5b6000828210156125725761257261254a565b500390565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561259f57600080fd5b81356117408161238a565b6000602082840312156125bc57600080fd5b8151801515811461174057600080fd5b600082601f8301126125dd57600080fd5b815167ffffffffffffffff8111156125f7576125f7612469565b602061260b601f8301601f1916820161247f565b828152858284870101111561261f57600080fd5b60005b8381101561263d578581018301518282018401528201612622565b8381111561264e5760008385840101525b5095945050505050565b6000806000806080858703121561266e57600080fd5b845167ffffffffffffffff81111561268557600080fd5b612691878288016125cc565b94505060208501516126a2816122c0565b60408601519093506126b38161238a565b6060959095015193969295505050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0383168152604081016002831061270757634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b60006020828403121561272657600080fd5b5051919050565b600082198211156127405761274061254a565b500190565b600081600019048311821515161561275f5761275f61254a565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261278957612789612764565b500490565b600080604083850312156127a157600080fd5b505080516020909101519092909150565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b60008060008060008060c087890312156127f157600080fd5b865167ffffffffffffffff81111561280857600080fd5b61281489828a016125cc565b9650506020870151612825816122c0565b60408801519095506128368161238a565b80945050606087015192506080870151915060a087015190509295509295509295565b60006001820161286b5761286b61254a565b5060010190565b6000600160ff1b82016128875761288761254a565b5060000390565b600080821280156001600160ff1b03849003851316156128b0576128b061254a565b600160ff1b83900384128116156128c9576128c961254a565b50500190565b6000826128de576128de612764565b50069056fea2646970667358221220d5e02e8925a74d65f56967de542f0efa29d6b1c62d4dcfce7e748ebfa5b24eca64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b7aae6b711610066578063b7aae6b714610127578063caa47d601461013c578063d58d45a814610147578063f71a7c9b1461015a578063fe0291561461016d57600080fd5b80630af1be38146100a35780633ff2f59d146100c757806386818f26146100d15780639262b1af146100f15780639ed206f8146100ff575b600080fd5b6100b46100b13660046121e0565b90565b6040519081526020015b60405180910390f35b6100b46201518081565b6100e46100df3660046121f9565b610181565b6040516100be919061227c565b6100b466b1a2bc2ec5000081565b61011261010d3660046122d0565b6103b5565b604080519283526020830191909152016100be565b61013a610135366004612311565b610859565b005b6100b463621d53f081565b61013a61015536600461235e565b610da0565b6100b461016836600461239f565b611033565b61013a61017b3660046123cb565b50505050565b60005460405163d06ca61f60e01b81526060916001600160a01b03169063d06ca61f906101b690889087908790600401612411565b600060405180830381865afa1580156101d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101fb91908101906124b0565b905083816001835161020d9190612560565b8151811061021d5761021d612577565b6020026020010151101561028c5760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b60648201526084015b60405180910390fd5b8282600081811061029f5761029f612577565b90506020020160208101906102b4919061258d565b6001600160a01b03166323b872dd3360008054906101000a90046001600160a01b0316846000815181106102ea576102ea612577565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d91906125aa565b506103ad8184848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525033925061103b915050565b949350505050565b6001546040516305d42cc560e31b815260048101869052600091829187918791879185918291829182916001600160a01b031690632ea1662890602401600060405180830381865afa15801561040f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104379190810190612658565b509093509150600190508a6001811115610453576104536126c3565b036105ae57600254604051630572c95f60e31b81526001600160a01b0390911690632b964af89061048b9084906000906004016126d9565b602060405180830381865afa1580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc9190612714565b600254604051630572c95f60e31b81529195506001600160a01b031690632b964af8906105009084906001906004016126d9565b602060405180830381865afa15801561051d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105419190612714565b925060008511801561056457506000826001811115610562576105626126c3565b145b1561057657610573858561272d565b93505b60008511801561059757506001826001811115610595576105956126c3565b145b156105a9576105a6858461272d565b92505b610785565b60008a60018111156105c2576105c26126c3565b03610785576001546040516305d42cc560e31b8152600481018890526000916001600160a01b031690632ea1662890602401600060405180830381865afa158015610611573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106399190810190612658565b5092505050600061064a8388611033565b600254604051630572c95f60e31b81529192506001600160a01b031690632b964af89061067e9085906000906004016126d9565b602060405180830381865afa15801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf9190612714565b600254604051630572c95f60e31b81529197506001600160a01b031690632b964af8906106f39085906001906004016126d9565b602060405180830381865afa158015610710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107349190612714565b9450600084600181111561074a5761074a6126c3565b0361075c57610759818761272d565b95505b6001846001811115610770576107706126c3565b036107825761077f818661272d565b94505b50505b831580610790575082155b156107c75760036107a966b1a2bc2ec500006002612745565b6107b3919061277a565b98506107c0896002612745565b9750610849565b60006107d36003611161565b905060006107ea866107e5818861272d565b611188565b9050670de0b6b3a76400006107ff828461125a565b61081166b1a2bc2ec500006002612745565b61081b9190612745565b610825919061277a565b99508961083a66b1a2bc2ec500006002612745565b6108449190612560565b9a5050505b5050505050505094509492505050565b6001546040516387ee5f4160e01b8152600481018690526024810187905286918691869186916001600160a01b03909116906387ee5f4190604401602060405180830381865afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d591906125aa565b6109145760405162461bcd60e51b815260206004820152601060248201526f14185a5c881b9bdd08105b1b1bddd95960821b6044820152606401610283565b6001546040516305d42cc560e31b8152600481018690526000916001600160a01b031690632ea1662890602401600060405180830381865afa15801561095e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109869190810190612658565b506001546040516305d42cc560e31b815260048101899052919450600093508392506001600160a01b031690632ea1662890602401600060405180830381865afa1580156109d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a009190810190612658565b5092509250506000610a0f8690565b6000546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018990529192508516906323b872dd906064016020604051808303816000875af1158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e91906125aa565b506000546001600160a01b03808416916340c10f199116610ab0846002612745565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610af657600080fd5b505af1158015610b0a573d6000803e3d6000fd5b5050600054604051633b730df160e01b8152600481018a9052602481018590526001600160a01b03888116604483015286811660648301529091169250633b730df19150608401600060405180830381600087803b158015610b6b57600080fd5b505af1158015610b7f573d6000803e3d6000fd5b50505050600080610b928a8a8a8e6103b5565b909250905060018b6001811115610bab57610bab6126c3565b03610c9857610bbb338b8a6112e7565b6000805460405163354aedbd60e21b81526001600160a01b03898116600483015287811660248301528392169063d52bb6f4906044016040805180830381865afa158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c31919061278e565b915091506000610c428b8484611599565b9050600080896001811115610c5957610c596126c3565b14610c645784610c66565b855b9050610c8f338e670de0b6b3a7640000610c808587612745565b610c8a919061277a565b6112e7565b50505050610d8f565b60008b6001811115610cac57610cac6126c3565b03610d8f576000805460405163354aedbd60e21b81526001600160a01b03898116600483015287811660248301528392169063d52bb6f4906044016040805180830381865afa158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d27919061278e565b915091506000610d388b8484611599565b9050600080896001811115610d4f57610d4f6126c3565b14610d5a5784610d5c565b855b9050610d8a338e670de0b6b3a7640000610d768587612745565b610d80919061277a565b610c8a908661272d565b505050505b505050505050505050505050505050565b60025460405163ea2092f360e01b81526001600160a01b039091169063ea2092f390610dd69033908790879087906004016127b2565b600060405180830381600087803b158015610df057600080fd5b505af1158015610e04573d6000803e3d6000fd5b50506001546040516305d42cc560e31b815260048101879052600093508392506001600160a01b0390911690632ea1662890602401600060405180830381865afa158015610e56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e7e9190810190612658565b50909350915060009050826001811115610e9a57610e9a6126c3565b036110155760025460405163b405254760e01b815260048101879052602481018690526000916001600160a01b03169063b405254790604401600060405180830381865afa158015610ef0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f1891908101906127d8565b95505050505050804211610f2b57600080fd5b6000546040516323b872dd60e01b81526001600160a01b03918216600482015233602482015260448101869052908316906323b872dd906064016020604051808303816000875af1158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa891906125aa565b50600054604051637921709360e01b81526001600160a01b0384811660048301526024820187905290911690637921709390604401600060405180830381600087803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b505050505061102c565b6001826001811115611029576110296126c3565b50505b5050505050565b805b92915050565b60005b6001835161104c9190612560565b81101561017b5760008084838151811061106857611068612577565b60200260200101518584600161107e919061272d565b8151811061108e5761108e612577565b6020026020010151915091506000868460016110aa919061272d565b815181106110ba576110ba612577565b60209081029190910101516000805460405163755c86d360e11b815260048101839052602481018490526001600160a01b038781166044830152868116606483015289811660848301529394509192849291169063eab90da69060a401600060405180830381600087803b15801561113157600080fd5b505af1158015611145573d6000803e3d6000fd5b505050505050505050808061115990612859565b91505061103e565b6000816ec097ce7bc90715b34b9f10000000008161118157611181612764565b0592915050565b6000600160ff1b83148061119f5750600160ff1b82145b156111bd5760405163b3c754a360e01b815260040160405180910390fd5b600080600085126111ce57846111d3565b846000035b9150600084126111e357836111e8565b836000035b905060006111ff83670de0b6b3a764000084611674565b90506001600160ff1b0381111561122c57604051637cb4bef560e01b815260048101829052602401610283565b600019808713908613808218600114611245578261124e565b61124e83612872565b98975050505050505050565b60008260000361126c57506000611035565b8260010361127c57506001611035565b670de0b6b3a763ffff198083019084016112968286611747565b91506112a28185611747565b90506112ad82611161565b91506112b881611161565b90506112c382611809565b91506112ce81611809565b90506112de826107e5838261288e565b95945050505050565b600154604051638a38e41960e01b815260048101849052429160009182916001600160a01b031690638a38e419906024016040805180830381865afa158015611334573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611358919061278e565b915091508060001461136a5780611370565b63621d53f05b9050620151806113808285612560565b106114705761139085838561189a565b600154604051638a38e41960e01b8152600481018790526000916001600160a01b031690638a38e419906024016040805180830381865afa1580156113d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fd919061278e565b506002546040516347401a9360e01b81529192506001600160a01b0316906347401a9390611435908a908a9086908b906004016127b2565b600060405180830381600087803b15801561144f57600080fd5b505af1158015611463573d6000803e3d6000fd5b5050505050505050505050565b60006201518061148463621d53f086612560565b61148e91906128cf565b90506201518061149e8386612560565b6114a8908361272d565b10611029576114b886848661189a565b600154604051638a38e41960e01b8152600481018890526000916001600160a01b031690638a38e419906024016040805180830381865afa158015611501573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611525919061278e565b506002546040516347401a9360e01b81529192506001600160a01b0316906347401a939061155d908b908b9086908c906004016127b2565b600060405180830381600087803b15801561157757600080fd5b505af115801561158b573d6000803e3d6000fd5b505050505050505050505050565b60008084116115f55760405162461bcd60e51b815260206004820152602260248201527f4465626f6e644c6962726172793a20494e53554646494349454e545f414d4f55604482015261139560f21b6064820152608401610283565b6000831180156116055750600082115b61165f5760405162461bcd60e51b815260206004820152602560248201527f4465626f6e644c6962726172793a20494e53554646494349454e545f4c495155604482015264494449545960d81b6064820152608401610283565b8261166a8386612745565b6103ad919061277a565b60008080600019858709858702925082811083820303915050806000036116ae578382816116a4576116a4612764565b0492505050611740565b8381106116d857604051631dcf306360e21b81526004810182905260248101859052604401610283565b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b6000600160ff1b83148061175e5750600160ff1b82145b1561177c57604051630d01a11b60e21b815260040160405180910390fd5b6000806000851261178d5784611792565b846000035b9150600084126117a257836117a7565b836000035b905060006117b58383611a1e565b90506001600160ff1b038111156117e25760405163bf79e8d960e01b815260048101829052602401610283565b6000198087139086138082186001146117fb578261124e565b505060000395945050505050565b6000808212156118565768033dd1780914b971141982121561182d57506000919050565b61183982600003611809565b6ec097ce7bc90715b34b9f10000000008161118157611181612764565b680a688906bd8b00000082126118825760405163e69458f960e01b815260048101839052602401610283565b670de0b6b3a7640000604083901b0461174081611ae4565b60006118a583612859565b6001546040516305d42cc560e31b8152600481018790529194508492506000916001600160a01b0390911690632ea1662890602401600060405180830381865afa1580156118f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261191f9190810190612658565b6002549094506001600160a01b0316925063d23a95de915087905084611945858861272d565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526101f46064820152608401600060405180830381600087803b15801561199357600080fd5b505af11580156119a7573d6000803e3d6000fd5b505060015460405163c60e219f60e01b81526004810189905260248101869052604481018790526001600160a01b03909116925063c60e219f9150606401600060405180830381600087803b1580156119ff57600080fd5b505af1158015611a13573d6000803e3d6000fd5b505050505050505050565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110611a625760405163698d9a0160e11b815260048101829052602401610283565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff8211905082600003611aa05780670de0b6b3a7640000850401945050505050611035565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b678000000000000000821615611b085768016a09e667f3bcc9090260401c5b674000000000000000821615611b27576801306fe0a31b7152df0260401c5b672000000000000000821615611b46576801172b83c7d517adce0260401c5b671000000000000000821615611b655768010b5586cf9890f62a0260401c5b670800000000000000821615611b84576801059b0d31585743ae0260401c5b670400000000000000821615611ba357680102c9a3e778060ee70260401c5b670200000000000000821615611bc25768010163da9fb33356d80260401c5b670100000000000000821615611be157680100b1afa5abcbed610260401c5b6680000000000000821615611bff5768010058c86da1c09ea20260401c5b6640000000000000821615611c1d576801002c605e2e8cec500260401c5b6620000000000000821615611c3b57680100162f3904051fa10260401c5b6610000000000000821615611c59576801000b175effdc76ba0260401c5b6608000000000000821615611c7757680100058ba01fb9f96d0260401c5b6604000000000000821615611c955768010002c5cc37da94920260401c5b6602000000000000821615611cb3576801000162e525ee05470260401c5b6601000000000000821615611cd15768010000b17255775c040260401c5b65800000000000821615611cee576801000058b91b5bc9ae0260401c5b65400000000000821615611d0b57680100002c5c89d5ec6d0260401c5b65200000000000821615611d285768010000162e43f4f8310260401c5b65100000000000821615611d4557680100000b1721bcfc9a0260401c5b65080000000000821615611d625768010000058b90cf1e6e0260401c5b65040000000000821615611d7f576801000002c5c863b73f0260401c5b65020000000000821615611d9c57680100000162e430e5a20260401c5b65010000000000821615611db9576801000000b1721835510260401c5b648000000000821615611dd557680100000058b90c0b490260401c5b644000000000821615611df15768010000002c5c8601cc0260401c5b642000000000821615611e0d576801000000162e42fff00260401c5b641000000000821615611e295768010000000b17217fbb0260401c5b640800000000821615611e45576801000000058b90bfce0260401c5b640400000000821615611e6157680100000002c5c85fe30260401c5b640200000000821615611e7d5768010000000162e42ff10260401c5b640100000000821615611e9957680100000000b17217f80260401c5b6380000000821615611eb45768010000000058b90bfc0260401c5b6340000000821615611ecf576801000000002c5c85fe0260401c5b6320000000821615611eea57680100000000162e42ff0260401c5b6310000000821615611f05576801000000000b17217f0260401c5b6308000000821615611f2057680100000000058b90c00260401c5b6304000000821615611f3b5768010000000002c5c8600260401c5b6302000000821615611f56576801000000000162e4300260401c5b6301000000821615611f715768010000000000b172180260401c5b62800000821615611f8b576801000000000058b90c0260401c5b62400000821615611fa557680100000000002c5c860260401c5b62200000821615611fbf5768010000000000162e430260401c5b62100000821615611fd957680100000000000b17210260401c5b62080000821615611ff35768010000000000058b910260401c5b6204000082161561200d576801000000000002c5c80260401c5b6202000082161561202757680100000000000162e40260401c5b62010000821615612041576801000000000000b1720260401c5b61800082161561205a57680100000000000058b90260401c5b6140008216156120735768010000000000002c5d0260401c5b61200082161561208c576801000000000000162e0260401c5b6110008216156120a55768010000000000000b170260401c5b6108008216156120be576801000000000000058c0260401c5b6104008216156120d757680100000000000002c60260401c5b6102008216156120f057680100000000000001630260401c5b61010082161561210957680100000000000000b10260401c5b608082161561212157680100000000000000590260401c5b6040821615612139576801000000000000002c0260401c5b602082161561215157680100000000000000160260401c5b6010821615612169576801000000000000000b0260401c5b600882161561218157680100000000000000060260401c5b600482161561219957680100000000000000030260401c5b60028216156121b157680100000000000000010260401c5b60018216156121c957680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b6000602082840312156121f257600080fd5b5035919050565b6000806000806060858703121561220f57600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561223557600080fd5b818701915087601f83011261224957600080fd5b81358181111561225857600080fd5b8860208260051b850101111561226d57600080fd5b95989497505060200194505050565b6020808252825182820181905260009190848201906040850190845b818110156122b457835183529284019291840191600101612298565b50909695505050505050565b600281106122cd57600080fd5b50565b600080600080608085870312156122e657600080fd5b8435935060208501359250604085013591506060850135612306816122c0565b939692955090935050565b600080600080600060a0868803121561232957600080fd5b853594506020860135935060408601359250606086013591506080860135612350816122c0565b809150509295509295909350565b60008060006060848603121561237357600080fd5b505081359360208301359350604090920135919050565b6001600160a01b03811681146122cd57600080fd5b600080604083850312156123b257600080fd5b82356123bd8161238a565b946020939093013593505050565b600080600080608085870312156123e157600080fd5b84356123ec8161238a565b935060208501356123fc8161238a565b93969395505050506040820135916060013590565b83815260406020808301829052908201839052600090849060608401835b8681101561245d5783356124428161238a565b6001600160a01b03168252928201929082019060010161242f565b50979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156124a8576124a8612469565b604052919050565b600060208083850312156124c357600080fd5b825167ffffffffffffffff808211156124db57600080fd5b818501915085601f8301126124ef57600080fd5b81518181111561250157612501612469565b8060051b915061251284830161247f565b818152918301840191848101908884111561252c57600080fd5b938501935b8385101561124e57845182529385019390850190612531565b634e487b7160e01b600052601160045260246000fd5b6000828210156125725761257261254a565b500390565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561259f57600080fd5b81356117408161238a565b6000602082840312156125bc57600080fd5b8151801515811461174057600080fd5b600082601f8301126125dd57600080fd5b815167ffffffffffffffff8111156125f7576125f7612469565b602061260b601f8301601f1916820161247f565b828152858284870101111561261f57600080fd5b60005b8381101561263d578581018301518282018401528201612622565b8381111561264e5760008385840101525b5095945050505050565b6000806000806080858703121561266e57600080fd5b845167ffffffffffffffff81111561268557600080fd5b612691878288016125cc565b94505060208501516126a2816122c0565b60408601519093506126b38161238a565b6060959095015193969295505050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0383168152604081016002831061270757634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b60006020828403121561272657600080fd5b5051919050565b600082198211156127405761274061254a565b500190565b600081600019048311821515161561275f5761275f61254a565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261278957612789612764565b500490565b600080604083850312156127a157600080fd5b505080516020909101519092909150565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b60008060008060008060c087890312156127f157600080fd5b865167ffffffffffffffff81111561280857600080fd5b61281489828a016125cc565b9650506020870151612825816122c0565b60408801519095506128368161238a565b80945050606087015192506080870151915060a087015190509295509295509295565b60006001820161286b5761286b61254a565b5060010190565b6000600160ff1b82016128875761288761254a565b5060000390565b600080821280156001600160ff1b03849003851316156128b0576128b061254a565b600160ff1b83900384128116156128c9576128c961254a565b50500190565b6000826128de576128de612764565b50069056fea2646970667358221220d5e02e8925a74d65f56967de542f0efa29d6b1c62d4dcfce7e748ebfa5b24eca64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMathSD59x18__DivInputTooSmall()": [
        {
          "notice": "Emitted when one of the inputs is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__DivOverflow(uint256)": [
        {
          "notice": "Emitted when one of the intermediary unsigned results overflows SD59x18."
        }
      ],
      "PRBMathSD59x18__Exp2InputTooBig(int256)": [
        {
          "notice": "Emitted when the input is greater than 192."
        }
      ],
      "PRBMathSD59x18__MulInputTooSmall()": [
        {
          "notice": "Emitted when one of the inputs is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__MulOverflow(uint256)": [
        {
          "notice": "Emitted when the intermediary absolute result overflows SD59x18."
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3362,
        "contract": "contracts/Debond-v0/contracts/Bank.sol:Bank",
        "label": "apm",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAPM)9252"
      },
      {
        "astId": 3365,
        "contract": "contracts/Debond-v0/contracts/Bank.sol:Bank",
        "label": "debondData",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IData)9322"
      },
      {
        "astId": 3368,
        "contract": "contracts/Debond-v0/contracts/Bank.sol:Bank",
        "label": "bond",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDebondBond)9405"
      },
      {
        "astId": 3388,
        "contract": "contracts/Debond-v0/contracts/Bank.sol:Bank",
        "label": "DBITAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAPM)9252": {
        "encoding": "inplace",
        "label": "contract IAPM",
        "numberOfBytes": "20"
      },
      "t_contract(IData)9322": {
        "encoding": "inplace",
        "label": "contract IData",
        "numberOfBytes": "20"
      },
      "t_contract(IDebondBond)9405": {
        "encoding": "inplace",
        "label": "contract IDebondBond",
        "numberOfBytes": "20"
      }
    }
  }
}